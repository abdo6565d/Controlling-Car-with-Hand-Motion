
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002260  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00002260  000022f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800086  00800086  0000231a  2**0
                  ALLOC
  3 .stab         00001bd8  00000000  00000000  0000231c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f25  00000000  00000000  00003ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004e19  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004f59  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000050c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006d12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000089ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008d99  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009567  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e6       	ldi	r30, 0x60	; 96
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1e 0b 	call	0x163c	; 0x163c <main>
      8a:	0c 94 2e 11 	jmp	0x225c	; 0x225c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f7 10 	jmp	0x21ee	; 0x21ee <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e7       	ldi	r26, 0x7E	; 126
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 03 11 	jmp	0x2206	; 0x2206 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1f 11 	jmp	0x223e	; 0x223e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 03 11 	jmp	0x2206	; 0x2206 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1f 11 	jmp	0x223e	; 0x223e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f7 10 	jmp	0x21ee	; 0x21ee <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e7       	ldi	r24, 0x7E	; 126
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 03 11 	jmp	0x2206	; 0x2206 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1f 11 	jmp	0x223e	; 0x223e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 03 11 	jmp	0x2206	; 0x2206 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1f 11 	jmp	0x223e	; 0x223e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 03 11 	jmp	0x2206	; 0x2206 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1f 11 	jmp	0x223e	; 0x223e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 07 11 	jmp	0x220e	; 0x220e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 23 11 	jmp	0x2246	; 0x2246 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_enuInit>:
#include "UART_config.h"



ES_t UART_enuInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_enuInit+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <UART_enuInit+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_enuErrorState = ES_NOK;
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	8c 83       	std	Y+4, r24	; 0x04

#if SPEED_MODE == NORMAL
	UCSRA &=~(1<<1);
     b56:	ab e2       	ldi	r26, 0x2B	; 43
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	eb e2       	ldi	r30, 0x2B	; 43
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	8d 7f       	andi	r24, 0xFD	; 253
     b62:	8c 93       	st	X, r24
#if UART_MODE == TRANSCIEVER
	UCSRB |=(3<<3);
#elif UART_MODE == RECIEVER
	UCSRB |=(1<<4);
#elif UART_MODE == TRANSMITTER
	UCSRB |=(1<<3);
     b64:	aa e2       	ldi	r26, 0x2A	; 42
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	ea e2       	ldi	r30, 0x2A	; 42
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	88 60       	ori	r24, 0x08	; 8
     b70:	8c 93       	st	X, r24
#endif

	u8 Local_u8UCSRC=0;
     b72:	1b 82       	std	Y+3, r1	; 0x03
#if DATA_LEN == EIGHT
	Local_u8UCSRC |= (3<<1);
     b74:	8b 81       	ldd	r24, Y+3	; 0x03
     b76:	86 60       	ori	r24, 0x06	; 6
     b78:	8b 83       	std	Y+3, r24	; 0x03
#endif

#if PARITY_STATE == NO_PARITY
	Local_u8UCSRC &= ~ (3<<4);
     b7a:	8b 81       	ldd	r24, Y+3	; 0x03
     b7c:	8f 7c       	andi	r24, 0xCF	; 207
     b7e:	8b 83       	std	Y+3, r24	; 0x03
#endif

#if STOP_STATE == ONE_STOP_BIT
	Local_u8UCSRC |= (1<<3);
     b80:	8b 81       	ldd	r24, Y+3	; 0x03
     b82:	88 60       	ori	r24, 0x08	; 8
     b84:	8b 83       	std	Y+3, r24	; 0x03
#endif

#if CLOCK_MODE == ASYCH
	Local_u8UCSRC &=~(1<<6);
     b86:	8b 81       	ldd	r24, Y+3	; 0x03
     b88:	8f 7b       	andi	r24, 0xBF	; 191
     b8a:	8b 83       	std	Y+3, r24	; 0x03
#endif

	Local_u8UCSRC |=(1<<7);
     b8c:	8b 81       	ldd	r24, Y+3	; 0x03
     b8e:	80 68       	ori	r24, 0x80	; 128
     b90:	8b 83       	std	Y+3, r24	; 0x03
	UCSRC = Local_u8UCSRC;
     b92:	e0 e4       	ldi	r30, 0x40	; 64
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	8b 81       	ldd	r24, Y+3	; 0x03
     b98:	80 83       	st	Z, r24


	u16 Local_u16UBRR = BUAD(BAUDRATE);
     b9a:	87 e6       	ldi	r24, 0x67	; 103
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	9a 83       	std	Y+2, r25	; 0x02
     ba0:	89 83       	std	Y+1, r24	; 0x01

	Local_u16UBRR &=~(1<<15);
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	9a 81       	ldd	r25, Y+2	; 0x02
     ba6:	9f 77       	andi	r25, 0x7F	; 127
     ba8:	9a 83       	std	Y+2, r25	; 0x02
     baa:	89 83       	std	Y+1, r24	; 0x01

	UBRRL  = (u8)Local_u16UBRR;
     bac:	e9 e2       	ldi	r30, 0x29	; 41
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	89 81       	ldd	r24, Y+1	; 0x01
     bb2:	80 83       	st	Z, r24
	UBRRH  = (Local_u16UBRR>>8);
     bb4:	e0 e4       	ldi	r30, 0x40	; 64
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	9a 81       	ldd	r25, Y+2	; 0x02
     bbc:	89 2f       	mov	r24, r25
     bbe:	99 27       	eor	r25, r25
     bc0:	80 83       	st	Z, r24



	return Local_enuErrorState;
     bc2:	8c 81       	ldd	r24, Y+4	; 0x04
}
     bc4:	0f 90       	pop	r0
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	0f 90       	pop	r0
     bcc:	cf 91       	pop	r28
     bce:	df 91       	pop	r29
     bd0:	08 95       	ret

00000bd2 <UART_enuSendChar>:

ES_t UART_enuSendChar(u8 Copy_u8Data)
{
     bd2:	df 93       	push	r29
     bd4:	cf 93       	push	r28
     bd6:	00 d0       	rcall	.+0      	; 0xbd8 <UART_enuSendChar+0x6>
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
     bdc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	89 83       	std	Y+1, r24	; 0x01

	while (!((UCSRA>>UDRE)&1));
     be2:	eb e2       	ldi	r30, 0x2B	; 43
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	82 95       	swap	r24
     bea:	86 95       	lsr	r24
     bec:	87 70       	andi	r24, 0x07	; 7
     bee:	88 2f       	mov	r24, r24
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	81 70       	andi	r24, 0x01	; 1
     bf4:	90 70       	andi	r25, 0x00	; 0
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	a1 f3       	breq	.-24     	; 0xbe2 <UART_enuSendChar+0x10>
	UDR = Copy_u8Data;
     bfa:	ec e2       	ldi	r30, 0x2C	; 44
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	8a 81       	ldd	r24, Y+2	; 0x02
     c00:	80 83       	st	Z, r24
	 * UDR = Copy_u8Data;
	 * while (!((UCSRA>>TXC)&1));
	 * UCSRA |= (1<<TXC);
	 */

	return Local_enuErrorState;
     c02:	89 81       	ldd	r24, Y+1	; 0x01
}
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	cf 91       	pop	r28
     c0a:	df 91       	pop	r29
     c0c:	08 95       	ret

00000c0e <UART_enuRecieveChar>:

ES_t UART_enuRecieveChar(u8 *Copy_pu8Data)
{
     c0e:	df 93       	push	r29
     c10:	cf 93       	push	r28
     c12:	00 d0       	rcall	.+0      	; 0xc14 <UART_enuRecieveChar+0x6>
     c14:	0f 92       	push	r0
     c16:	cd b7       	in	r28, 0x3d	; 61
     c18:	de b7       	in	r29, 0x3e	; 62
     c1a:	9b 83       	std	Y+3, r25	; 0x03
     c1c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	89 83       	std	Y+1, r24	; 0x01

	while (!((UCSRA>>RXC)&1));
     c22:	eb e2       	ldi	r30, 0x2B	; 43
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	88 23       	and	r24, r24
     c2a:	dc f7       	brge	.-10     	; 0xc22 <UART_enuRecieveChar+0x14>
	*Copy_pu8Data = UDR;
     c2c:	ec e2       	ldi	r30, 0x2C	; 44
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	ea 81       	ldd	r30, Y+2	; 0x02
     c34:	fb 81       	ldd	r31, Y+3	; 0x03
     c36:	80 83       	st	Z, r24

	return Local_enuErrorState;
     c38:	89 81       	ldd	r24, Y+1	; 0x01
}
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	cf 91       	pop	r28
     c42:	df 91       	pop	r29
     c44:	08 95       	ret

00000c46 <UART_enuSendString>:

ES_t UART_enuSendString(const char* Copy_pcData)
{
     c46:	df 93       	push	r29
     c48:	cf 93       	push	r28
     c4a:	00 d0       	rcall	.+0      	; 0xc4c <UART_enuSendString+0x6>
     c4c:	0f 92       	push	r0
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
     c52:	9b 83       	std	Y+3, r25	; 0x03
     c54:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	89 83       	std	Y+1, r24	; 0x01
     c5a:	17 c0       	rjmp	.+46     	; 0xc8a <UART_enuSendString+0x44>

	while (*Copy_pcData != 0)
	{
		while (!((UCSRA>>UDRE)&1));
     c5c:	eb e2       	ldi	r30, 0x2B	; 43
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	82 95       	swap	r24
     c64:	86 95       	lsr	r24
     c66:	87 70       	andi	r24, 0x07	; 7
     c68:	88 2f       	mov	r24, r24
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	81 70       	andi	r24, 0x01	; 1
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	a1 f3       	breq	.-24     	; 0xc5c <UART_enuSendString+0x16>
		UDR = *Copy_pcData;
     c74:	ac e2       	ldi	r26, 0x2C	; 44
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	ea 81       	ldd	r30, Y+2	; 0x02
     c7a:	fb 81       	ldd	r31, Y+3	; 0x03
     c7c:	80 81       	ld	r24, Z
     c7e:	8c 93       	st	X, r24
		Copy_pcData++;
     c80:	8a 81       	ldd	r24, Y+2	; 0x02
     c82:	9b 81       	ldd	r25, Y+3	; 0x03
     c84:	01 96       	adiw	r24, 0x01	; 1
     c86:	9b 83       	std	Y+3, r25	; 0x03
     c88:	8a 83       	std	Y+2, r24	; 0x02

ES_t UART_enuSendString(const char* Copy_pcData)
{
	ES_t Local_enuErrorState = ES_NOK;

	while (*Copy_pcData != 0)
     c8a:	ea 81       	ldd	r30, Y+2	; 0x02
     c8c:	fb 81       	ldd	r31, Y+3	; 0x03
     c8e:	80 81       	ld	r24, Z
     c90:	88 23       	and	r24, r24
     c92:	21 f7       	brne	.-56     	; 0xc5c <UART_enuSendString+0x16>
		while (!((UCSRA>>UDRE)&1));
		UDR = *Copy_pcData;
		Copy_pcData++;
	}

	return Local_enuErrorState;
     c94:	89 81       	ldd	r24, Y+1	; 0x01
}
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	cf 91       	pop	r28
     c9e:	df 91       	pop	r29
     ca0:	08 95       	ret

00000ca2 <UART_enuRecieveString>:

/*ahmed*/
ES_t UART_enuRecieveString(char * Copy_pcData)
{
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <UART_enuRecieveString+0x6>
     ca8:	00 d0       	rcall	.+0      	; 0xcaa <UART_enuRecieveString+0x8>
     caa:	0f 92       	push	r0
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
     cb0:	9d 83       	std	Y+5, r25	; 0x05
     cb2:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	8b 83       	std	Y+3, r24	; 0x03

	u8 i=0;
     cb8:	1a 82       	std	Y+2, r1	; 0x02
	while (!((UCSRA>>RXC)&1));
     cba:	eb e2       	ldi	r30, 0x2B	; 43
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	88 23       	and	r24, r24
     cc2:	dc f7       	brge	.-10     	; 0xcba <UART_enuRecieveString+0x18>
	char RX = UDR;
     cc4:	ec e2       	ldi	r30, 0x2C	; 44
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	89 83       	std	Y+1, r24	; 0x01

	while (!((UCSRA>>UDRE)&1));
     ccc:	eb e2       	ldi	r30, 0x2B	; 43
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	82 95       	swap	r24
     cd4:	86 95       	lsr	r24
     cd6:	87 70       	andi	r24, 0x07	; 7
     cd8:	88 2f       	mov	r24, r24
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	81 70       	andi	r24, 0x01	; 1
     cde:	90 70       	andi	r25, 0x00	; 0
     ce0:	00 97       	sbiw	r24, 0x00	; 0
     ce2:	a1 f3       	breq	.-24     	; 0xccc <UART_enuRecieveString+0x2a>
		UDR = RX;
     ce4:	ec e2       	ldi	r30, 0x2C	; 44
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	80 83       	st	Z, r24
     cec:	26 c0       	rjmp	.+76     	; 0xd3a <UART_enuRecieveString+0x98>

	while (RX != '\r' && RX != '\n' && RX != '\0')
	{
		/*while (!((UCSRA>>UDRE)&1));
		UDR = RX;*/
		Copy_pcData[i++]= RX;
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	8c 81       	ldd	r24, Y+4	; 0x04
     cf6:	9d 81       	ldd	r25, Y+5	; 0x05
     cf8:	fc 01       	movw	r30, r24
     cfa:	e2 0f       	add	r30, r18
     cfc:	f3 1f       	adc	r31, r19
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	80 83       	st	Z, r24
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	8f 5f       	subi	r24, 0xFF	; 255
     d06:	8a 83       	std	Y+2, r24	; 0x02
		while (!((UCSRA>>RXC)&1));
     d08:	eb e2       	ldi	r30, 0x2B	; 43
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	88 23       	and	r24, r24
     d10:	dc f7       	brge	.-10     	; 0xd08 <UART_enuRecieveString+0x66>
		RX = UDR;
     d12:	ec e2       	ldi	r30, 0x2C	; 44
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	89 83       	std	Y+1, r24	; 0x01

		while (!((UCSRA>>UDRE)&1));
     d1a:	eb e2       	ldi	r30, 0x2B	; 43
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	82 95       	swap	r24
     d22:	86 95       	lsr	r24
     d24:	87 70       	andi	r24, 0x07	; 7
     d26:	88 2f       	mov	r24, r24
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	81 70       	andi	r24, 0x01	; 1
     d2c:	90 70       	andi	r25, 0x00	; 0
     d2e:	00 97       	sbiw	r24, 0x00	; 0
     d30:	a1 f3       	breq	.-24     	; 0xd1a <UART_enuRecieveString+0x78>
			UDR = RX;
     d32:	ec e2       	ldi	r30, 0x2C	; 44
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	80 83       	st	Z, r24
	char RX = UDR;

	while (!((UCSRA>>UDRE)&1));
		UDR = RX;

	while (RX != '\r' && RX != '\n' && RX != '\0')
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	8d 30       	cpi	r24, 0x0D	; 13
     d3e:	31 f0       	breq	.+12     	; 0xd4c <UART_enuRecieveString+0xaa>
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	8a 30       	cpi	r24, 0x0A	; 10
     d44:	19 f0       	breq	.+6      	; 0xd4c <UART_enuRecieveString+0xaa>
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	88 23       	and	r24, r24
     d4a:	89 f6       	brne	.-94     	; 0xcee <UART_enuRecieveString+0x4c>
		RX = UDR;

		while (!((UCSRA>>UDRE)&1));
			UDR = RX;
	}
	Copy_pcData[i]= '\0';
     d4c:	8a 81       	ldd	r24, Y+2	; 0x02
     d4e:	28 2f       	mov	r18, r24
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	8c 81       	ldd	r24, Y+4	; 0x04
     d54:	9d 81       	ldd	r25, Y+5	; 0x05
     d56:	fc 01       	movw	r30, r24
     d58:	e2 0f       	add	r30, r18
     d5a:	f3 1f       	adc	r31, r19
     d5c:	10 82       	st	Z, r1


	return Local_enuErrorState;
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03

}
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <DIO_enuInit>:
#include "DIO_priv.h"
#include "DIO_config.h"


ES_t DIO_enuInit(void)
{
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	0f 92       	push	r0
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	89 83       	std	Y+1, r24	; 0x01

#if DIO_u8PA0DIR == DIO_u8INPUT
	DDRA &= ~(1<<0);
     d7e:	aa e3       	ldi	r26, 0x3A	; 58
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	ea e3       	ldi	r30, 0x3A	; 58
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	8e 7f       	andi	r24, 0xFE	; 254
     d8a:	8c 93       	st	X, r24
	DDRA |= (1<<0);
#else
#error "Direction of PA0 is wrong ya latkh"
#endif

	return Local_enuErrorState;
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
}
     d8e:	0f 90       	pop	r0
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	08 95       	ret

00000d96 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 Copy_u8Direction)
{
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	00 d0       	rcall	.+0      	; 0xd9c <DIO_enuSetPinDirection+0x6>
     d9c:	00 d0       	rcall	.+0      	; 0xd9e <DIO_enuSetPinDirection+0x8>
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <DIO_enuSetPinDirection+0xa>
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	8a 83       	std	Y+2, r24	; 0x02
     da6:	6b 83       	std	Y+3, r22	; 0x03
     da8:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	84 30       	cpi	r24, 0x04	; 4
     db2:	08 f0       	brcs	.+2      	; 0xdb6 <DIO_enuSetPinDirection+0x20>
     db4:	d0 c0       	rjmp	.+416    	; 0xf56 <DIO_enuSetPinDirection+0x1c0>
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	88 30       	cpi	r24, 0x08	; 8
     dba:	08 f0       	brcs	.+2      	; 0xdbe <DIO_enuSetPinDirection+0x28>
     dbc:	cc c0       	rjmp	.+408    	; 0xf56 <DIO_enuSetPinDirection+0x1c0>
     dbe:	8c 81       	ldd	r24, Y+4	; 0x04
     dc0:	82 30       	cpi	r24, 0x02	; 2
     dc2:	08 f0       	brcs	.+2      	; 0xdc6 <DIO_enuSetPinDirection+0x30>
     dc4:	c8 c0       	rjmp	.+400    	; 0xf56 <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID<= DIO_u8PIN7 &&
			Copy_u8Direction <= DIO_u8OUTPUT)
	{
		switch (Copy_u8GroupID)
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	3e 83       	std	Y+6, r19	; 0x06
     dce:	2d 83       	std	Y+5, r18	; 0x05
     dd0:	6d 81       	ldd	r22, Y+5	; 0x05
     dd2:	7e 81       	ldd	r23, Y+6	; 0x06
     dd4:	61 30       	cpi	r22, 0x01	; 1
     dd6:	71 05       	cpc	r23, r1
     dd8:	09 f4       	brne	.+2      	; 0xddc <DIO_enuSetPinDirection+0x46>
     dda:	41 c0       	rjmp	.+130    	; 0xe5e <DIO_enuSetPinDirection+0xc8>
     ddc:	8d 81       	ldd	r24, Y+5	; 0x05
     dde:	9e 81       	ldd	r25, Y+6	; 0x06
     de0:	82 30       	cpi	r24, 0x02	; 2
     de2:	91 05       	cpc	r25, r1
     de4:	34 f4       	brge	.+12     	; 0xdf2 <DIO_enuSetPinDirection+0x5c>
     de6:	2d 81       	ldd	r18, Y+5	; 0x05
     de8:	3e 81       	ldd	r19, Y+6	; 0x06
     dea:	21 15       	cp	r18, r1
     dec:	31 05       	cpc	r19, r1
     dee:	71 f0       	breq	.+28     	; 0xe0c <DIO_enuSetPinDirection+0x76>
     df0:	b0 c0       	rjmp	.+352    	; 0xf52 <DIO_enuSetPinDirection+0x1bc>
     df2:	6d 81       	ldd	r22, Y+5	; 0x05
     df4:	7e 81       	ldd	r23, Y+6	; 0x06
     df6:	62 30       	cpi	r22, 0x02	; 2
     df8:	71 05       	cpc	r23, r1
     dfa:	09 f4       	brne	.+2      	; 0xdfe <DIO_enuSetPinDirection+0x68>
     dfc:	59 c0       	rjmp	.+178    	; 0xeb0 <DIO_enuSetPinDirection+0x11a>
     dfe:	8d 81       	ldd	r24, Y+5	; 0x05
     e00:	9e 81       	ldd	r25, Y+6	; 0x06
     e02:	83 30       	cpi	r24, 0x03	; 3
     e04:	91 05       	cpc	r25, r1
     e06:	09 f4       	brne	.+2      	; 0xe0a <DIO_enuSetPinDirection+0x74>
     e08:	7c c0       	rjmp	.+248    	; 0xf02 <DIO_enuSetPinDirection+0x16c>
     e0a:	a3 c0       	rjmp	.+326    	; 0xf52 <DIO_enuSetPinDirection+0x1bc>
		{
		case DIO_u8GROUP_A:
			DDRA &= ~(DIO_BIT_MASK << Copy_u8PinID);
     e0c:	aa e3       	ldi	r26, 0x3A	; 58
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	ea e3       	ldi	r30, 0x3A	; 58
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	48 2f       	mov	r20, r24
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <DIO_enuSetPinDirection+0x92>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	2a 95       	dec	r18
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <DIO_enuSetPinDirection+0x8e>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Direction << Copy_u8PinID);
     e32:	aa e3       	ldi	r26, 0x3A	; 58
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	ea e3       	ldi	r30, 0x3A	; 58
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	48 2f       	mov	r20, r24
     e3e:	8c 81       	ldd	r24, Y+4	; 0x04
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	88 2f       	mov	r24, r24
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	b9 01       	movw	r22, r18
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <DIO_enuSetPinDirection+0xbc>
     e4e:	66 0f       	add	r22, r22
     e50:	77 1f       	adc	r23, r23
     e52:	8a 95       	dec	r24
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <DIO_enuSetPinDirection+0xb8>
     e56:	cb 01       	movw	r24, r22
     e58:	84 2b       	or	r24, r20
     e5a:	8c 93       	st	X, r24
     e5c:	7a c0       	rjmp	.+244    	; 0xf52 <DIO_enuSetPinDirection+0x1bc>
			break;

		case DIO_u8GROUP_B:
			DDRB &= ~(DIO_BIT_MASK << Copy_u8PinID);
     e5e:	a7 e3       	ldi	r26, 0x37	; 55
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e7 e3       	ldi	r30, 0x37	; 55
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	48 2f       	mov	r20, r24
     e6a:	8b 81       	ldd	r24, Y+3	; 0x03
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <DIO_enuSetPinDirection+0xe4>
     e76:	88 0f       	add	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	2a 95       	dec	r18
     e7c:	e2 f7       	brpl	.-8      	; 0xe76 <DIO_enuSetPinDirection+0xe0>
     e7e:	80 95       	com	r24
     e80:	84 23       	and	r24, r20
     e82:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Direction << Copy_u8PinID);
     e84:	a7 e3       	ldi	r26, 0x37	; 55
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e7 e3       	ldi	r30, 0x37	; 55
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	48 2f       	mov	r20, r24
     e90:	8c 81       	ldd	r24, Y+4	; 0x04
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	88 2f       	mov	r24, r24
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	b9 01       	movw	r22, r18
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <DIO_enuSetPinDirection+0x10e>
     ea0:	66 0f       	add	r22, r22
     ea2:	77 1f       	adc	r23, r23
     ea4:	8a 95       	dec	r24
     ea6:	e2 f7       	brpl	.-8      	; 0xea0 <DIO_enuSetPinDirection+0x10a>
     ea8:	cb 01       	movw	r24, r22
     eaa:	84 2b       	or	r24, r20
     eac:	8c 93       	st	X, r24
     eae:	51 c0       	rjmp	.+162    	; 0xf52 <DIO_enuSetPinDirection+0x1bc>

			break;

		case DIO_u8GROUP_C:
			DDRC &= ~(DIO_BIT_MASK << Copy_u8PinID);
     eb0:	a4 e3       	ldi	r26, 0x34	; 52
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e4 e3       	ldi	r30, 0x34	; 52
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	48 2f       	mov	r20, r24
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <DIO_enuSetPinDirection+0x136>
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	2a 95       	dec	r18
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <DIO_enuSetPinDirection+0x132>
     ed0:	80 95       	com	r24
     ed2:	84 23       	and	r24, r20
     ed4:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Direction << Copy_u8PinID);
     ed6:	a4 e3       	ldi	r26, 0x34	; 52
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e4 e3       	ldi	r30, 0x34	; 52
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	48 2f       	mov	r20, r24
     ee2:	8c 81       	ldd	r24, Y+4	; 0x04
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	88 2f       	mov	r24, r24
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	b9 01       	movw	r22, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <DIO_enuSetPinDirection+0x160>
     ef2:	66 0f       	add	r22, r22
     ef4:	77 1f       	adc	r23, r23
     ef6:	8a 95       	dec	r24
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <DIO_enuSetPinDirection+0x15c>
     efa:	cb 01       	movw	r24, r22
     efc:	84 2b       	or	r24, r20
     efe:	8c 93       	st	X, r24
     f00:	28 c0       	rjmp	.+80     	; 0xf52 <DIO_enuSetPinDirection+0x1bc>

			break;

		case DIO_u8GROUP_D:
			DDRD &= ~(DIO_BIT_MASK << Copy_u8PinID);
     f02:	a1 e3       	ldi	r26, 0x31	; 49
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e1 e3       	ldi	r30, 0x31	; 49
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	48 2f       	mov	r20, r24
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <DIO_enuSetPinDirection+0x188>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	2a 95       	dec	r18
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <DIO_enuSetPinDirection+0x184>
     f22:	80 95       	com	r24
     f24:	84 23       	and	r24, r20
     f26:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Direction << Copy_u8PinID);
     f28:	a1 e3       	ldi	r26, 0x31	; 49
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e1 e3       	ldi	r30, 0x31	; 49
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	48 2f       	mov	r20, r24
     f34:	8c 81       	ldd	r24, Y+4	; 0x04
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	88 2f       	mov	r24, r24
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	b9 01       	movw	r22, r18
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <DIO_enuSetPinDirection+0x1b2>
     f44:	66 0f       	add	r22, r22
     f46:	77 1f       	adc	r23, r23
     f48:	8a 95       	dec	r24
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <DIO_enuSetPinDirection+0x1ae>
     f4c:	cb 01       	movw	r24, r22
     f4e:	84 2b       	or	r24, r20
     f50:	8c 93       	st	X, r24

			break;

		}

		Local_enuErrorState = ES_OK;
     f52:	19 82       	std	Y+1, r1	; 0x01
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     f56:	82 e0       	ldi	r24, 0x02	; 2
     f58:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f5c:	26 96       	adiw	r28, 0x06	; 6
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	f8 94       	cli
     f62:	de bf       	out	0x3e, r29	; 62
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	cd bf       	out	0x3d, r28	; 61
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	00 d0       	rcall	.+0      	; 0xf74 <DIO_enuSetPinValue+0x6>
     f74:	00 d0       	rcall	.+0      	; 0xf76 <DIO_enuSetPinValue+0x8>
     f76:	00 d0       	rcall	.+0      	; 0xf78 <DIO_enuSetPinValue+0xa>
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
     f7c:	8a 83       	std	Y+2, r24	; 0x02
     f7e:	6b 83       	std	Y+3, r22	; 0x03
     f80:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	84 30       	cpi	r24, 0x04	; 4
     f8a:	08 f0       	brcs	.+2      	; 0xf8e <DIO_enuSetPinValue+0x20>
     f8c:	d0 c0       	rjmp	.+416    	; 0x112e <DIO_enuSetPinValue+0x1c0>
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	88 30       	cpi	r24, 0x08	; 8
     f92:	08 f0       	brcs	.+2      	; 0xf96 <DIO_enuSetPinValue+0x28>
     f94:	cc c0       	rjmp	.+408    	; 0x112e <DIO_enuSetPinValue+0x1c0>
     f96:	8c 81       	ldd	r24, Y+4	; 0x04
     f98:	82 30       	cpi	r24, 0x02	; 2
     f9a:	08 f0       	brcs	.+2      	; 0xf9e <DIO_enuSetPinValue+0x30>
     f9c:	c8 c0       	rjmp	.+400    	; 0x112e <DIO_enuSetPinValue+0x1c0>
			Copy_u8PinID <= DIO_u8PIN7 &&
			Copy_u8Value <= DIO_u8HIGH)
	{
		switch (Copy_u8GroupID)
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	3e 83       	std	Y+6, r19	; 0x06
     fa6:	2d 83       	std	Y+5, r18	; 0x05
     fa8:	6d 81       	ldd	r22, Y+5	; 0x05
     faa:	7e 81       	ldd	r23, Y+6	; 0x06
     fac:	61 30       	cpi	r22, 0x01	; 1
     fae:	71 05       	cpc	r23, r1
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <DIO_enuSetPinValue+0x46>
     fb2:	41 c0       	rjmp	.+130    	; 0x1036 <DIO_enuSetPinValue+0xc8>
     fb4:	8d 81       	ldd	r24, Y+5	; 0x05
     fb6:	9e 81       	ldd	r25, Y+6	; 0x06
     fb8:	82 30       	cpi	r24, 0x02	; 2
     fba:	91 05       	cpc	r25, r1
     fbc:	34 f4       	brge	.+12     	; 0xfca <DIO_enuSetPinValue+0x5c>
     fbe:	2d 81       	ldd	r18, Y+5	; 0x05
     fc0:	3e 81       	ldd	r19, Y+6	; 0x06
     fc2:	21 15       	cp	r18, r1
     fc4:	31 05       	cpc	r19, r1
     fc6:	71 f0       	breq	.+28     	; 0xfe4 <DIO_enuSetPinValue+0x76>
     fc8:	b0 c0       	rjmp	.+352    	; 0x112a <DIO_enuSetPinValue+0x1bc>
     fca:	6d 81       	ldd	r22, Y+5	; 0x05
     fcc:	7e 81       	ldd	r23, Y+6	; 0x06
     fce:	62 30       	cpi	r22, 0x02	; 2
     fd0:	71 05       	cpc	r23, r1
     fd2:	09 f4       	brne	.+2      	; 0xfd6 <DIO_enuSetPinValue+0x68>
     fd4:	59 c0       	rjmp	.+178    	; 0x1088 <DIO_enuSetPinValue+0x11a>
     fd6:	8d 81       	ldd	r24, Y+5	; 0x05
     fd8:	9e 81       	ldd	r25, Y+6	; 0x06
     fda:	83 30       	cpi	r24, 0x03	; 3
     fdc:	91 05       	cpc	r25, r1
     fde:	09 f4       	brne	.+2      	; 0xfe2 <DIO_enuSetPinValue+0x74>
     fe0:	7c c0       	rjmp	.+248    	; 0x10da <DIO_enuSetPinValue+0x16c>
     fe2:	a3 c0       	rjmp	.+326    	; 0x112a <DIO_enuSetPinValue+0x1bc>
		{
		case DIO_u8GROUP_A:
			PORTA &= ~(DIO_BIT_MASK << Copy_u8PinID);
     fe4:	ab e3       	ldi	r26, 0x3B	; 59
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	eb e3       	ldi	r30, 0x3B	; 59
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	48 2f       	mov	r20, r24
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <DIO_enuSetPinValue+0x92>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	2a 95       	dec	r18
    1002:	e2 f7       	brpl	.-8      	; 0xffc <DIO_enuSetPinValue+0x8e>
    1004:	80 95       	com	r24
    1006:	84 23       	and	r24, r20
    1008:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
    100a:	ab e3       	ldi	r26, 0x3B	; 59
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	eb e3       	ldi	r30, 0x3B	; 59
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	48 2f       	mov	r20, r24
    1016:	8c 81       	ldd	r24, Y+4	; 0x04
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	88 2f       	mov	r24, r24
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	b9 01       	movw	r22, r18
    1024:	02 c0       	rjmp	.+4      	; 0x102a <DIO_enuSetPinValue+0xbc>
    1026:	66 0f       	add	r22, r22
    1028:	77 1f       	adc	r23, r23
    102a:	8a 95       	dec	r24
    102c:	e2 f7       	brpl	.-8      	; 0x1026 <DIO_enuSetPinValue+0xb8>
    102e:	cb 01       	movw	r24, r22
    1030:	84 2b       	or	r24, r20
    1032:	8c 93       	st	X, r24
    1034:	7a c0       	rjmp	.+244    	; 0x112a <DIO_enuSetPinValue+0x1bc>
			break;

		case DIO_u8GROUP_B:
			PORTB &= ~(DIO_BIT_MASK << Copy_u8PinID);
    1036:	a8 e3       	ldi	r26, 0x38	; 56
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e8 e3       	ldi	r30, 0x38	; 56
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	48 2f       	mov	r20, r24
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <DIO_enuSetPinValue+0xe4>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	2a 95       	dec	r18
    1054:	e2 f7       	brpl	.-8      	; 0x104e <DIO_enuSetPinValue+0xe0>
    1056:	80 95       	com	r24
    1058:	84 23       	and	r24, r20
    105a:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
    105c:	a8 e3       	ldi	r26, 0x38	; 56
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e8 e3       	ldi	r30, 0x38	; 56
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	48 2f       	mov	r20, r24
    1068:	8c 81       	ldd	r24, Y+4	; 0x04
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	88 2f       	mov	r24, r24
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	b9 01       	movw	r22, r18
    1076:	02 c0       	rjmp	.+4      	; 0x107c <DIO_enuSetPinValue+0x10e>
    1078:	66 0f       	add	r22, r22
    107a:	77 1f       	adc	r23, r23
    107c:	8a 95       	dec	r24
    107e:	e2 f7       	brpl	.-8      	; 0x1078 <DIO_enuSetPinValue+0x10a>
    1080:	cb 01       	movw	r24, r22
    1082:	84 2b       	or	r24, r20
    1084:	8c 93       	st	X, r24
    1086:	51 c0       	rjmp	.+162    	; 0x112a <DIO_enuSetPinValue+0x1bc>

			break;

		case DIO_u8GROUP_C:
			PORTC &= ~(DIO_BIT_MASK << Copy_u8PinID);
    1088:	a5 e3       	ldi	r26, 0x35	; 53
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e5 e3       	ldi	r30, 0x35	; 53
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	48 2f       	mov	r20, r24
    1094:	8b 81       	ldd	r24, Y+3	; 0x03
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <DIO_enuSetPinValue+0x136>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	2a 95       	dec	r18
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <DIO_enuSetPinValue+0x132>
    10a8:	80 95       	com	r24
    10aa:	84 23       	and	r24, r20
    10ac:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
    10ae:	a5 e3       	ldi	r26, 0x35	; 53
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e5 e3       	ldi	r30, 0x35	; 53
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	48 2f       	mov	r20, r24
    10ba:	8c 81       	ldd	r24, Y+4	; 0x04
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	88 2f       	mov	r24, r24
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	b9 01       	movw	r22, r18
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <DIO_enuSetPinValue+0x160>
    10ca:	66 0f       	add	r22, r22
    10cc:	77 1f       	adc	r23, r23
    10ce:	8a 95       	dec	r24
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <DIO_enuSetPinValue+0x15c>
    10d2:	cb 01       	movw	r24, r22
    10d4:	84 2b       	or	r24, r20
    10d6:	8c 93       	st	X, r24
    10d8:	28 c0       	rjmp	.+80     	; 0x112a <DIO_enuSetPinValue+0x1bc>

			break;

		case DIO_u8GROUP_D:
			PORTD &= ~(DIO_BIT_MASK << Copy_u8PinID);
    10da:	a2 e3       	ldi	r26, 0x32	; 50
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e2 e3       	ldi	r30, 0x32	; 50
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	48 2f       	mov	r20, r24
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <DIO_enuSetPinValue+0x188>
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	2a 95       	dec	r18
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <DIO_enuSetPinValue+0x184>
    10fa:	80 95       	com	r24
    10fc:	84 23       	and	r24, r20
    10fe:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
    1100:	a2 e3       	ldi	r26, 0x32	; 50
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e2 e3       	ldi	r30, 0x32	; 50
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	48 2f       	mov	r20, r24
    110c:	8c 81       	ldd	r24, Y+4	; 0x04
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	88 2f       	mov	r24, r24
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	b9 01       	movw	r22, r18
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <DIO_enuSetPinValue+0x1b2>
    111c:	66 0f       	add	r22, r22
    111e:	77 1f       	adc	r23, r23
    1120:	8a 95       	dec	r24
    1122:	e2 f7       	brpl	.-8      	; 0x111c <DIO_enuSetPinValue+0x1ae>
    1124:	cb 01       	movw	r24, r22
    1126:	84 2b       	or	r24, r20
    1128:	8c 93       	st	X, r24

			break;

		}

		Local_enuErrorState = ES_OK;
    112a:	19 82       	std	Y+1, r1	; 0x01
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    112e:	82 e0       	ldi	r24, 0x02	; 2
    1130:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1132:	89 81       	ldd	r24, Y+1	; 0x01
}
    1134:	26 96       	adiw	r28, 0x06	; 6
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	f8 94       	cli
    113a:	de bf       	out	0x3e, r29	; 62
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	cd bf       	out	0x3d, r28	; 61
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	08 95       	ret

00001146 <DIO_enuTogglePinValue>:

ES_t DIO_enuTogglePinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID)
{
    1146:	df 93       	push	r29
    1148:	cf 93       	push	r28
    114a:	00 d0       	rcall	.+0      	; 0x114c <DIO_enuTogglePinValue+0x6>
    114c:	00 d0       	rcall	.+0      	; 0x114e <DIO_enuTogglePinValue+0x8>
    114e:	0f 92       	push	r0
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    1154:	8a 83       	std	Y+2, r24	; 0x02
    1156:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	84 30       	cpi	r24, 0x04	; 4
    1160:	08 f0       	brcs	.+2      	; 0x1164 <DIO_enuTogglePinValue+0x1e>
    1162:	74 c0       	rjmp	.+232    	; 0x124c <DIO_enuTogglePinValue+0x106>
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	88 30       	cpi	r24, 0x08	; 8
    1168:	08 f0       	brcs	.+2      	; 0x116c <DIO_enuTogglePinValue+0x26>
    116a:	70 c0       	rjmp	.+224    	; 0x124c <DIO_enuTogglePinValue+0x106>
			Copy_u8PinID <= DIO_u8PIN7 )
	{
		switch (Copy_u8GroupID)
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	3d 83       	std	Y+5, r19	; 0x05
    1174:	2c 83       	std	Y+4, r18	; 0x04
    1176:	8c 81       	ldd	r24, Y+4	; 0x04
    1178:	9d 81       	ldd	r25, Y+5	; 0x05
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	91 05       	cpc	r25, r1
    117e:	49 f1       	breq	.+82     	; 0x11d2 <DIO_enuTogglePinValue+0x8c>
    1180:	2c 81       	ldd	r18, Y+4	; 0x04
    1182:	3d 81       	ldd	r19, Y+5	; 0x05
    1184:	22 30       	cpi	r18, 0x02	; 2
    1186:	31 05       	cpc	r19, r1
    1188:	2c f4       	brge	.+10     	; 0x1194 <DIO_enuTogglePinValue+0x4e>
    118a:	8c 81       	ldd	r24, Y+4	; 0x04
    118c:	9d 81       	ldd	r25, Y+5	; 0x05
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	61 f0       	breq	.+24     	; 0x11aa <DIO_enuTogglePinValue+0x64>
    1192:	5a c0       	rjmp	.+180    	; 0x1248 <DIO_enuTogglePinValue+0x102>
    1194:	2c 81       	ldd	r18, Y+4	; 0x04
    1196:	3d 81       	ldd	r19, Y+5	; 0x05
    1198:	22 30       	cpi	r18, 0x02	; 2
    119a:	31 05       	cpc	r19, r1
    119c:	71 f1       	breq	.+92     	; 0x11fa <DIO_enuTogglePinValue+0xb4>
    119e:	8c 81       	ldd	r24, Y+4	; 0x04
    11a0:	9d 81       	ldd	r25, Y+5	; 0x05
    11a2:	83 30       	cpi	r24, 0x03	; 3
    11a4:	91 05       	cpc	r25, r1
    11a6:	e9 f1       	breq	.+122    	; 0x1222 <DIO_enuTogglePinValue+0xdc>
    11a8:	4f c0       	rjmp	.+158    	; 0x1248 <DIO_enuTogglePinValue+0x102>
		{
		case DIO_u8GROUP_A:
			PORTA ^=  (DIO_BIT_MASK << Copy_u8PinID);
    11aa:	ab e3       	ldi	r26, 0x3B	; 59
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	eb e3       	ldi	r30, 0x3B	; 59
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	48 2f       	mov	r20, r24
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	02 2e       	mov	r0, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <DIO_enuTogglePinValue+0x82>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	0a 94       	dec	r0
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <DIO_enuTogglePinValue+0x7e>
    11cc:	84 27       	eor	r24, r20
    11ce:	8c 93       	st	X, r24
    11d0:	3b c0       	rjmp	.+118    	; 0x1248 <DIO_enuTogglePinValue+0x102>
			break;

		case DIO_u8GROUP_B:
			PORTB ^=  (DIO_BIT_MASK << Copy_u8PinID);
    11d2:	a8 e3       	ldi	r26, 0x38	; 56
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e8 e3       	ldi	r30, 0x38	; 56
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	48 2f       	mov	r20, r24
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	02 2e       	mov	r0, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <DIO_enuTogglePinValue+0xaa>
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	0a 94       	dec	r0
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <DIO_enuTogglePinValue+0xa6>
    11f4:	84 27       	eor	r24, r20
    11f6:	8c 93       	st	X, r24
    11f8:	27 c0       	rjmp	.+78     	; 0x1248 <DIO_enuTogglePinValue+0x102>

			break;

		case DIO_u8GROUP_C:
			PORTC ^=  (DIO_BIT_MASK << Copy_u8PinID);
    11fa:	a5 e3       	ldi	r26, 0x35	; 53
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e5 e3       	ldi	r30, 0x35	; 53
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	48 2f       	mov	r20, r24
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	02 2e       	mov	r0, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_enuTogglePinValue+0xd2>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <DIO_enuTogglePinValue+0xce>
    121c:	84 27       	eor	r24, r20
    121e:	8c 93       	st	X, r24
    1220:	13 c0       	rjmp	.+38     	; 0x1248 <DIO_enuTogglePinValue+0x102>

			break;

		case DIO_u8GROUP_D:
			PORTD ^=  (DIO_BIT_MASK << Copy_u8PinID);
    1222:	a2 e3       	ldi	r26, 0x32	; 50
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e2 e3       	ldi	r30, 0x32	; 50
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <DIO_enuTogglePinValue+0xfa>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <DIO_enuTogglePinValue+0xf6>
    1244:	84 27       	eor	r24, r20
    1246:	8c 93       	st	X, r24

			break;

		}

		Local_enuErrorState = ES_OK;
    1248:	19 82       	std	Y+1, r1	; 0x01
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <DIO_enuTogglePinValue+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    124c:	82 e0       	ldi	r24, 0x02	; 2
    124e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1250:	89 81       	ldd	r24, Y+1	; 0x01
}
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 * Copy_u8PinValue)
{
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	27 97       	sbiw	r28, 0x07	; 7
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	f8 94       	cli
    1270:	de bf       	out	0x3e, r29	; 62
    1272:	0f be       	out	0x3f, r0	; 63
    1274:	cd bf       	out	0x3d, r28	; 61
    1276:	8a 83       	std	Y+2, r24	; 0x02
    1278:	6b 83       	std	Y+3, r22	; 0x03
    127a:	5d 83       	std	Y+5, r21	; 0x05
    127c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PinValue != NULL)
    1282:	8c 81       	ldd	r24, Y+4	; 0x04
    1284:	9d 81       	ldd	r25, Y+5	; 0x05
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	09 f4       	brne	.+2      	; 0x128c <DIO_enuGetPinValue+0x2a>
    128a:	7d c0       	rjmp	.+250    	; 0x1386 <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	84 30       	cpi	r24, 0x04	; 4
    1290:	08 f0       	brcs	.+2      	; 0x1294 <DIO_enuGetPinValue+0x32>
    1292:	76 c0       	rjmp	.+236    	; 0x1380 <DIO_enuGetPinValue+0x11e>
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	88 30       	cpi	r24, 0x08	; 8
    1298:	08 f0       	brcs	.+2      	; 0x129c <DIO_enuGetPinValue+0x3a>
    129a:	72 c0       	rjmp	.+228    	; 0x1380 <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_u8PIN7)
		{
			switch (Copy_u8GroupID)
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	3f 83       	std	Y+7, r19	; 0x07
    12a4:	2e 83       	std	Y+6, r18	; 0x06
    12a6:	4e 81       	ldd	r20, Y+6	; 0x06
    12a8:	5f 81       	ldd	r21, Y+7	; 0x07
    12aa:	41 30       	cpi	r20, 0x01	; 1
    12ac:	51 05       	cpc	r21, r1
    12ae:	59 f1       	breq	.+86     	; 0x1306 <DIO_enuGetPinValue+0xa4>
    12b0:	8e 81       	ldd	r24, Y+6	; 0x06
    12b2:	9f 81       	ldd	r25, Y+7	; 0x07
    12b4:	82 30       	cpi	r24, 0x02	; 2
    12b6:	91 05       	cpc	r25, r1
    12b8:	34 f4       	brge	.+12     	; 0x12c6 <DIO_enuGetPinValue+0x64>
    12ba:	2e 81       	ldd	r18, Y+6	; 0x06
    12bc:	3f 81       	ldd	r19, Y+7	; 0x07
    12be:	21 15       	cp	r18, r1
    12c0:	31 05       	cpc	r19, r1
    12c2:	69 f0       	breq	.+26     	; 0x12de <DIO_enuGetPinValue+0x7c>
    12c4:	5b c0       	rjmp	.+182    	; 0x137c <DIO_enuGetPinValue+0x11a>
    12c6:	4e 81       	ldd	r20, Y+6	; 0x06
    12c8:	5f 81       	ldd	r21, Y+7	; 0x07
    12ca:	42 30       	cpi	r20, 0x02	; 2
    12cc:	51 05       	cpc	r21, r1
    12ce:	79 f1       	breq	.+94     	; 0x132e <DIO_enuGetPinValue+0xcc>
    12d0:	8e 81       	ldd	r24, Y+6	; 0x06
    12d2:	9f 81       	ldd	r25, Y+7	; 0x07
    12d4:	83 30       	cpi	r24, 0x03	; 3
    12d6:	91 05       	cpc	r25, r1
    12d8:	09 f4       	brne	.+2      	; 0x12dc <DIO_enuGetPinValue+0x7a>
    12da:	3d c0       	rjmp	.+122    	; 0x1356 <DIO_enuGetPinValue+0xf4>
    12dc:	4f c0       	rjmp	.+158    	; 0x137c <DIO_enuGetPinValue+0x11a>
			{
			case DIO_u8GROUP_A:

				*Copy_u8PinValue =  ((PINA >> Copy_u8PinID) & DIO_BIT_MASK);
    12de:	e9 e3       	ldi	r30, 0x39	; 57
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	88 2f       	mov	r24, r24
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	a9 01       	movw	r20, r18
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <DIO_enuGetPinValue+0x94>
    12f2:	55 95       	asr	r21
    12f4:	47 95       	ror	r20
    12f6:	8a 95       	dec	r24
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <DIO_enuGetPinValue+0x90>
    12fa:	ca 01       	movw	r24, r20
    12fc:	81 70       	andi	r24, 0x01	; 1
    12fe:	ec 81       	ldd	r30, Y+4	; 0x04
    1300:	fd 81       	ldd	r31, Y+5	; 0x05
    1302:	80 83       	st	Z, r24
    1304:	3b c0       	rjmp	.+118    	; 0x137c <DIO_enuGetPinValue+0x11a>

				break;

			case DIO_u8GROUP_B:

				*Copy_u8PinValue =  ((PINB >> Copy_u8PinID) & DIO_BIT_MASK);
    1306:	e6 e3       	ldi	r30, 0x36	; 54
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	88 2f       	mov	r24, r24
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	a9 01       	movw	r20, r18
    1318:	02 c0       	rjmp	.+4      	; 0x131e <DIO_enuGetPinValue+0xbc>
    131a:	55 95       	asr	r21
    131c:	47 95       	ror	r20
    131e:	8a 95       	dec	r24
    1320:	e2 f7       	brpl	.-8      	; 0x131a <DIO_enuGetPinValue+0xb8>
    1322:	ca 01       	movw	r24, r20
    1324:	81 70       	andi	r24, 0x01	; 1
    1326:	ec 81       	ldd	r30, Y+4	; 0x04
    1328:	fd 81       	ldd	r31, Y+5	; 0x05
    132a:	80 83       	st	Z, r24
    132c:	27 c0       	rjmp	.+78     	; 0x137c <DIO_enuGetPinValue+0x11a>

				break;

			case DIO_u8GROUP_C:

				*Copy_u8PinValue =  ((PINC >> Copy_u8PinID) & DIO_BIT_MASK);
    132e:	e3 e3       	ldi	r30, 0x33	; 51
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	88 2f       	mov	r24, r24
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	a9 01       	movw	r20, r18
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <DIO_enuGetPinValue+0xe4>
    1342:	55 95       	asr	r21
    1344:	47 95       	ror	r20
    1346:	8a 95       	dec	r24
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <DIO_enuGetPinValue+0xe0>
    134a:	ca 01       	movw	r24, r20
    134c:	81 70       	andi	r24, 0x01	; 1
    134e:	ec 81       	ldd	r30, Y+4	; 0x04
    1350:	fd 81       	ldd	r31, Y+5	; 0x05
    1352:	80 83       	st	Z, r24
    1354:	13 c0       	rjmp	.+38     	; 0x137c <DIO_enuGetPinValue+0x11a>

				break;

			case DIO_u8GROUP_D:

				*Copy_u8PinValue =  ((PIND >> Copy_u8PinID) & DIO_BIT_MASK);
    1356:	e0 e3       	ldi	r30, 0x30	; 48
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	88 2f       	mov	r24, r24
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	a9 01       	movw	r20, r18
    1368:	02 c0       	rjmp	.+4      	; 0x136e <DIO_enuGetPinValue+0x10c>
    136a:	55 95       	asr	r21
    136c:	47 95       	ror	r20
    136e:	8a 95       	dec	r24
    1370:	e2 f7       	brpl	.-8      	; 0x136a <DIO_enuGetPinValue+0x108>
    1372:	ca 01       	movw	r24, r20
    1374:	81 70       	andi	r24, 0x01	; 1
    1376:	ec 81       	ldd	r30, Y+4	; 0x04
    1378:	fd 81       	ldd	r31, Y+5	; 0x05
    137a:	80 83       	st	Z, r24

				break;
			}
			Local_enuErrorState = ES_OK;
    137c:	19 82       	std	Y+1, r1	; 0x01
    137e:	05 c0       	rjmp	.+10     	; 0x138a <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1380:	82 e0       	ldi	r24, 0x02	; 2
    1382:	89 83       	std	Y+1, r24	; 0x01
    1384:	02 c0       	rjmp	.+4      	; 0x138a <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1386:	83 e0       	ldi	r24, 0x03	; 3
    1388:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    138a:	89 81       	ldd	r24, Y+1	; 0x01
}
    138c:	27 96       	adiw	r28, 0x07	; 7
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	f8 94       	cli
    1392:	de bf       	out	0x3e, r29	; 62
    1394:	0f be       	out	0x3f, r0	; 63
    1396:	cd bf       	out	0x3d, r28	; 61
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	08 95       	ret

0000139e <ADC_INIT>:
#include "ADC_priv.h"

static void(*ptr_global)(void) = NULL;


ES_t ADC_INIT(void){
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	0f 92       	push	r0
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62

	u8 error_state = ES_OK;
    13a8:	19 82       	std	Y+1, r1	; 0x01

#if ADC_refrence == AREF_internal
	ADMUX &=~ (3<<6);

#elif ADC_refrence == AVCC_external
	ADMUX |= (1<<6);
    13aa:	a7 e2       	ldi	r26, 0x27	; 39
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e7 e2       	ldi	r30, 0x27	; 39
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	80 64       	ori	r24, 0x40	; 64
    13b6:	8c 93       	st	X, r24

#if ADC_Adjust == Right_Adjust
	ADMUX &=~ (1<<5);

#elif ADC_Adjust == Left_Adjust
	ADMUX |= (1<<5);
    13b8:	a7 e2       	ldi	r26, 0x27	; 39
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e7 e2       	ldi	r30, 0x27	; 39
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	80 62       	ori	r24, 0x20	; 32
    13c4:	8c 93       	st	X, r24

#endif

#if PRESSCALER == 128
	ADCSRA |= (7<<0);
    13c6:	a6 e2       	ldi	r26, 0x26	; 38
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e6 e2       	ldi	r30, 0x26	; 38
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	87 60       	ori	r24, 0x07	; 7
    13d2:	8c 93       	st	X, r24
#elif PRESSCALER == 64
	ADCSRA |= (6<<0);

#endif

	ADCSRA |= (1<<7);
    13d4:	a6 e2       	ldi	r26, 0x26	; 38
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e6 e2       	ldi	r30, 0x26	; 38
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	80 68       	ori	r24, 0x80	; 128
    13e0:	8c 93       	st	X, r24
	ADCSRA &=~ (1<<5);
    13e2:	a6 e2       	ldi	r26, 0x26	; 38
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e6 e2       	ldi	r30, 0x26	; 38
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	8f 7d       	andi	r24, 0xDF	; 223
    13ee:	8c 93       	st	X, r24

	return error_state;
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13f2:	0f 90       	pop	r0
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <ADC_START_CONVERSION>:
ES_t ADC_START_CONVERSION(u8 CH){
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	00 d0       	rcall	.+0      	; 0x1400 <ADC_START_CONVERSION+0x6>
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
    1404:	8a 83       	std	Y+2, r24	; 0x02

	u8 error_state = ES_NOK;
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	89 83       	std	Y+1, r24	; 0x01

if (CH <= 7 && CH >= 0) {
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	88 30       	cpi	r24, 0x08	; 8
    140e:	b8 f4       	brcc	.+46     	; 0x143e <ADC_START_CONVERSION+0x44>

	ADCSRA |= (1<<6);
    1410:	a6 e2       	ldi	r26, 0x26	; 38
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e6 e2       	ldi	r30, 0x26	; 38
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	80 64       	ori	r24, 0x40	; 64
    141c:	8c 93       	st	X, r24
	ADMUX &=~ (7<<0);
    141e:	a7 e2       	ldi	r26, 0x27	; 39
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e7 e2       	ldi	r30, 0x27	; 39
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	88 7f       	andi	r24, 0xF8	; 248
    142a:	8c 93       	st	X, r24
	ADMUX  |= (CH<<0);
    142c:	a7 e2       	ldi	r26, 0x27	; 39
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e7 e2       	ldi	r30, 0x27	; 39
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	90 81       	ld	r25, Z
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	89 2b       	or	r24, r25
    143a:	8c 93       	st	X, r24

	error_state = ES_OK;
    143c:	19 82       	std	Y+1, r1	; 0x01
}

	return error_state;
    143e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <ADC_GET_RESULT>:

ES_t ADC_GET_RESULT(u16 *RESULT){
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	00 d0       	rcall	.+0      	; 0x1450 <ADC_GET_RESULT+0x6>
    1450:	0f 92       	push	r0
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	9b 83       	std	Y+3, r25	; 0x03
    1458:	8a 83       	std	Y+2, r24	; 0x02

	u8 error_state = ES_NOK;
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	89 83       	std	Y+1, r24	; 0x01
	*RESULT |= ((u16)ADCH<<8);
	error_state = ES_OK;
}
else if (ADC_Adjust == Left_Adjust){

	while((ADCSRA>>6)&1);
    145e:	e6 e2       	ldi	r30, 0x26	; 38
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	82 95       	swap	r24
    1466:	86 95       	lsr	r24
    1468:	86 95       	lsr	r24
    146a:	83 70       	andi	r24, 0x03	; 3
    146c:	88 2f       	mov	r24, r24
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	81 70       	andi	r24, 0x01	; 1
    1472:	90 70       	andi	r25, 0x00	; 0
    1474:	88 23       	and	r24, r24
    1476:	99 f7       	brne	.-26     	; 0x145e <ADC_GET_RESULT+0x14>
	*RESULT = (ADCL >>6);
    1478:	e4 e2       	ldi	r30, 0x24	; 36
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	82 95       	swap	r24
    1480:	86 95       	lsr	r24
    1482:	86 95       	lsr	r24
    1484:	83 70       	andi	r24, 0x03	; 3
    1486:	88 2f       	mov	r24, r24
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	ea 81       	ldd	r30, Y+2	; 0x02
    148c:	fb 81       	ldd	r31, Y+3	; 0x03
    148e:	91 83       	std	Z+1, r25	; 0x01
    1490:	80 83       	st	Z, r24
	*RESULT |= ((u16)ADCH<<2);
    1492:	ea 81       	ldd	r30, Y+2	; 0x02
    1494:	fb 81       	ldd	r31, Y+3	; 0x03
    1496:	20 81       	ld	r18, Z
    1498:	31 81       	ldd	r19, Z+1	; 0x01
    149a:	e5 e2       	ldi	r30, 0x25	; 37
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	88 2f       	mov	r24, r24
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	82 2b       	or	r24, r18
    14ae:	93 2b       	or	r25, r19
    14b0:	ea 81       	ldd	r30, Y+2	; 0x02
    14b2:	fb 81       	ldd	r31, Y+3	; 0x03
    14b4:	91 83       	std	Z+1, r25	; 0x01
    14b6:	80 83       	st	Z, r24

	error_state = ES_OK;
    14b8:	19 82       	std	Y+1, r1	; 0x01
}

else error_state = ES_OUT_OF_RANGE;

	return error_state;
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	cf 91       	pop	r28
    14c4:	df 91       	pop	r29
    14c6:	08 95       	ret

000014c8 <ADC_SET_AUTO_TRIGGER>:

ES_t ADC_SET_AUTO_TRIGGER(u8 copy_source){
    14c8:	df 93       	push	r29
    14ca:	cf 93       	push	r28
    14cc:	00 d0       	rcall	.+0      	; 0x14ce <ADC_SET_AUTO_TRIGGER+0x6>
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	8a 83       	std	Y+2, r24	; 0x02

	u8 error_state = ES_NOK;
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	89 83       	std	Y+1, r24	; 0x01

	if (copy_source <= 7 && copy_source >= 0){
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	88 30       	cpi	r24, 0x08	; 8
    14dc:	50 f5       	brcc	.+84     	; 0x1532 <ADC_SET_AUTO_TRIGGER+0x6a>
		ADCSRA &=~ (1<<5);
    14de:	a6 e2       	ldi	r26, 0x26	; 38
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e6 e2       	ldi	r30, 0x26	; 38
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	8f 7d       	andi	r24, 0xDF	; 223
    14ea:	8c 93       	st	X, r24
		ADCSRA  |= (1<<5);
    14ec:	a6 e2       	ldi	r26, 0x26	; 38
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	e6 e2       	ldi	r30, 0x26	; 38
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	80 62       	ori	r24, 0x20	; 32
    14f8:	8c 93       	st	X, r24

		SFIOR  &=~ (7<<5);
    14fa:	a0 e5       	ldi	r26, 0x50	; 80
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	e0 e5       	ldi	r30, 0x50	; 80
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	8f 71       	andi	r24, 0x1F	; 31
    1506:	8c 93       	st	X, r24
		SFIOR  |=  (copy_source << 5);
    1508:	a0 e5       	ldi	r26, 0x50	; 80
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e0 e5       	ldi	r30, 0x50	; 80
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	28 2f       	mov	r18, r24
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	88 2f       	mov	r24, r24
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	88 0f       	add	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	82 95       	swap	r24
    1520:	92 95       	swap	r25
    1522:	90 7f       	andi	r25, 0xF0	; 240
    1524:	98 27       	eor	r25, r24
    1526:	80 7f       	andi	r24, 0xF0	; 240
    1528:	98 27       	eor	r25, r24
    152a:	82 2b       	or	r24, r18
    152c:	8c 93       	st	X, r24

		error_state = ES_OK;
    152e:	19 82       	std	Y+1, r1	; 0x01
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <ADC_SET_AUTO_TRIGGER+0x6e>
}

	else error_state = ES_OUT_OF_RANGE;
    1532:	82 e0       	ldi	r24, 0x02	; 2
    1534:	89 83       	std	Y+1, r24	; 0x01

		return error_state;
    1536:	89 81       	ldd	r24, Y+1	; 0x01
}
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	cf 91       	pop	r28
    153e:	df 91       	pop	r29
    1540:	08 95       	ret

00001542 <ADC_DISABLE_AUTO_TRIGGER>:
ES_t ADC_DISABLE_AUTO_TRIGGER(){
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62

	ADCSRA &=~ (1<<5);
    154a:	a6 e2       	ldi	r26, 0x26	; 38
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e6 e2       	ldi	r30, 0x26	; 38
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	8f 7d       	andi	r24, 0xDF	; 223
    1556:	8c 93       	st	X, r24

		return ES_OK;
    1558:	80 e0       	ldi	r24, 0x00	; 0
}
    155a:	cf 91       	pop	r28
    155c:	df 91       	pop	r29
    155e:	08 95       	ret

00001560 <ADC_ENABlE_ENTRRUPT>:
ES_t ADC_ENABlE_ENTRRUPT(void){
    1560:	df 93       	push	r29
    1562:	cf 93       	push	r28
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62

	ADCSRA &=~ (1<<3);
    1568:	a6 e2       	ldi	r26, 0x26	; 38
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e6 e2       	ldi	r30, 0x26	; 38
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	87 7f       	andi	r24, 0xF7	; 247
    1574:	8c 93       	st	X, r24
	ADCSRA |=  (1<<3);
    1576:	a6 e2       	ldi	r26, 0x26	; 38
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e6 e2       	ldi	r30, 0x26	; 38
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	88 60       	ori	r24, 0x08	; 8
    1582:	8c 93       	st	X, r24

		return ES_NOK;
    1584:	81 e0       	ldi	r24, 0x01	; 1
}
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	08 95       	ret

0000158c <ADC_DISABlE_ENTRRUPT>:

ES_t ADC_DISABlE_ENTRRUPT(void){
    158c:	df 93       	push	r29
    158e:	cf 93       	push	r28
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62

	ADCSRA &=~ (1<<3);
    1594:	a6 e2       	ldi	r26, 0x26	; 38
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e6 e2       	ldi	r30, 0x26	; 38
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	87 7f       	andi	r24, 0xF7	; 247
    15a0:	8c 93       	st	X, r24

		return ES_NOK;
    15a2:	81 e0       	ldi	r24, 0x01	; 1
}
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <ADC_call_back_fun>:

ES_t ADC_call_back_fun(void(*copy_fun)(void)){
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <ADC_call_back_fun+0x6>
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	9a 83       	std	Y+2, r25	; 0x02
    15b6:	89 83       	std	Y+1, r24	; 0x01

	ptr_global = copy_fun;
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	9a 81       	ldd	r25, Y+2	; 0x02
    15bc:	90 93 87 00 	sts	0x0087, r25
    15c0:	80 93 86 00 	sts	0x0086, r24

	return ES_OK;
    15c4:	80 e0       	ldi	r24, 0x00	; 0

}
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	08 95       	ret

000015d0 <void__victor_16>:
void__victor_16(void)__attribute__((signal));
void__victor_16(void){
    15d0:	1f 92       	push	r1
    15d2:	0f 92       	push	r0
    15d4:	0f b6       	in	r0, 0x3f	; 63
    15d6:	0f 92       	push	r0
    15d8:	11 24       	eor	r1, r1
    15da:	2f 93       	push	r18
    15dc:	3f 93       	push	r19
    15de:	4f 93       	push	r20
    15e0:	5f 93       	push	r21
    15e2:	6f 93       	push	r22
    15e4:	7f 93       	push	r23
    15e6:	8f 93       	push	r24
    15e8:	9f 93       	push	r25
    15ea:	af 93       	push	r26
    15ec:	bf 93       	push	r27
    15ee:	ef 93       	push	r30
    15f0:	ff 93       	push	r31
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <void__victor_16+0x28>
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
	if(ptr_global != NULL)
    15fc:	80 91 86 00 	lds	r24, 0x0086
    1600:	90 91 87 00 	lds	r25, 0x0087
    1604:	00 97       	sbiw	r24, 0x00	; 0
    1606:	29 f0       	breq	.+10     	; 0x1612 <void__victor_16+0x42>
	ptr_global();
    1608:	e0 91 86 00 	lds	r30, 0x0086
    160c:	f0 91 87 00 	lds	r31, 0x0087
    1610:	09 95       	icall
}
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	cf 91       	pop	r28
    1618:	df 91       	pop	r29
    161a:	ff 91       	pop	r31
    161c:	ef 91       	pop	r30
    161e:	bf 91       	pop	r27
    1620:	af 91       	pop	r26
    1622:	9f 91       	pop	r25
    1624:	8f 91       	pop	r24
    1626:	7f 91       	pop	r23
    1628:	6f 91       	pop	r22
    162a:	5f 91       	pop	r21
    162c:	4f 91       	pop	r20
    162e:	3f 91       	pop	r19
    1630:	2f 91       	pop	r18
    1632:	0f 90       	pop	r0
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	0f 90       	pop	r0
    1638:	1f 90       	pop	r1
    163a:	18 95       	reti

0000163c <main>:
#define Hold      > 800


//********************************************MASTER*****************************************************************************************************

int main(void){
    163c:	0f 93       	push	r16
    163e:	1f 93       	push	r17
    1640:	df 93       	push	r29
    1642:	cf 93       	push	r28
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
    1648:	cc 56       	subi	r28, 0x6C	; 108
    164a:	d0 40       	sbci	r29, 0x00	; 0
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	f8 94       	cli
    1650:	de bf       	out	0x3e, r29	; 62
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	cd bf       	out	0x3d, r28	; 61

	u16  THUMB,INDEX,MIDDLE,RING,LITTLE;
	DIO_enuInit();
    1656:	0e 94 b8 06 	call	0xd70	; 0xd70 <DIO_enuInit>
	ADC_INIT();
    165a:	0e 94 cf 09 	call	0x139e	; 0x139e <ADC_INIT>
	UART_enuInit();
    165e:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_enuInit>
	DIO_enuSetPinDirection(DIO_u8GROUP_D,DIO_u8PIN1,DIO_u8OUTPUT);			// SET TX AS OUTPUT
    1662:	83 e0       	ldi	r24, 0x03	; 3
    1664:	61 e0       	ldi	r22, 0x01	; 1
    1666:	41 e0       	ldi	r20, 0x01	; 1
    1668:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_enuSetPinDirection>
    166c:	fe 01       	movw	r30, r28
    166e:	e1 5a       	subi	r30, 0xA1	; 161
    1670:	ff 4f       	sbci	r31, 0xFF	; 255
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	aa ef       	ldi	r26, 0xFA	; 250
    1678:	b3 e4       	ldi	r27, 0x43	; 67
    167a:	80 83       	st	Z, r24
    167c:	91 83       	std	Z+1, r25	; 0x01
    167e:	a2 83       	std	Z+2, r26	; 0x02
    1680:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1682:	8e 01       	movw	r16, r28
    1684:	05 5a       	subi	r16, 0xA5	; 165
    1686:	1f 4f       	sbci	r17, 0xFF	; 255
    1688:	fe 01       	movw	r30, r28
    168a:	e1 5a       	subi	r30, 0xA1	; 161
    168c:	ff 4f       	sbci	r31, 0xFF	; 255
    168e:	60 81       	ld	r22, Z
    1690:	71 81       	ldd	r23, Z+1	; 0x01
    1692:	82 81       	ldd	r24, Z+2	; 0x02
    1694:	93 81       	ldd	r25, Z+3	; 0x03
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	4a e7       	ldi	r20, 0x7A	; 122
    169c:	55 e4       	ldi	r21, 0x45	; 69
    169e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	f8 01       	movw	r30, r16
    16a8:	80 83       	st	Z, r24
    16aa:	91 83       	std	Z+1, r25	; 0x01
    16ac:	a2 83       	std	Z+2, r26	; 0x02
    16ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16b0:	fe 01       	movw	r30, r28
    16b2:	e5 5a       	subi	r30, 0xA5	; 165
    16b4:	ff 4f       	sbci	r31, 0xFF	; 255
    16b6:	60 81       	ld	r22, Z
    16b8:	71 81       	ldd	r23, Z+1	; 0x01
    16ba:	82 81       	ldd	r24, Z+2	; 0x02
    16bc:	93 81       	ldd	r25, Z+3	; 0x03
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	40 e8       	ldi	r20, 0x80	; 128
    16c4:	5f e3       	ldi	r21, 0x3F	; 63
    16c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ca:	88 23       	and	r24, r24
    16cc:	44 f4       	brge	.+16     	; 0x16de <main+0xa2>
		__ticks = 1;
    16ce:	fe 01       	movw	r30, r28
    16d0:	e7 5a       	subi	r30, 0xA7	; 167
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	91 83       	std	Z+1, r25	; 0x01
    16da:	80 83       	st	Z, r24
    16dc:	64 c0       	rjmp	.+200    	; 0x17a6 <main+0x16a>
	else if (__tmp > 65535)
    16de:	fe 01       	movw	r30, r28
    16e0:	e5 5a       	subi	r30, 0xA5	; 165
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	60 81       	ld	r22, Z
    16e6:	71 81       	ldd	r23, Z+1	; 0x01
    16e8:	82 81       	ldd	r24, Z+2	; 0x02
    16ea:	93 81       	ldd	r25, Z+3	; 0x03
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	3f ef       	ldi	r19, 0xFF	; 255
    16f0:	4f e7       	ldi	r20, 0x7F	; 127
    16f2:	57 e4       	ldi	r21, 0x47	; 71
    16f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16f8:	18 16       	cp	r1, r24
    16fa:	0c f0       	brlt	.+2      	; 0x16fe <main+0xc2>
    16fc:	43 c0       	rjmp	.+134    	; 0x1784 <main+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fe:	fe 01       	movw	r30, r28
    1700:	e1 5a       	subi	r30, 0xA1	; 161
    1702:	ff 4f       	sbci	r31, 0xFF	; 255
    1704:	60 81       	ld	r22, Z
    1706:	71 81       	ldd	r23, Z+1	; 0x01
    1708:	82 81       	ldd	r24, Z+2	; 0x02
    170a:	93 81       	ldd	r25, Z+3	; 0x03
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	40 e2       	ldi	r20, 0x20	; 32
    1712:	51 e4       	ldi	r21, 0x41	; 65
    1714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	8e 01       	movw	r16, r28
    171e:	07 5a       	subi	r16, 0xA7	; 167
    1720:	1f 4f       	sbci	r17, 0xFF	; 255
    1722:	bc 01       	movw	r22, r24
    1724:	cd 01       	movw	r24, r26
    1726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	f8 01       	movw	r30, r16
    1730:	91 83       	std	Z+1, r25	; 0x01
    1732:	80 83       	st	Z, r24
    1734:	1f c0       	rjmp	.+62     	; 0x1774 <main+0x138>
    1736:	fe 01       	movw	r30, r28
    1738:	e9 5a       	subi	r30, 0xA9	; 169
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	80 e9       	ldi	r24, 0x90	; 144
    173e:	91 e0       	ldi	r25, 0x01	; 1
    1740:	91 83       	std	Z+1, r25	; 0x01
    1742:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1744:	fe 01       	movw	r30, r28
    1746:	e9 5a       	subi	r30, 0xA9	; 169
    1748:	ff 4f       	sbci	r31, 0xFF	; 255
    174a:	80 81       	ld	r24, Z
    174c:	91 81       	ldd	r25, Z+1	; 0x01
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	f1 f7       	brne	.-4      	; 0x174e <main+0x112>
    1752:	fe 01       	movw	r30, r28
    1754:	e9 5a       	subi	r30, 0xA9	; 169
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	91 83       	std	Z+1, r25	; 0x01
    175a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    175c:	de 01       	movw	r26, r28
    175e:	a7 5a       	subi	r26, 0xA7	; 167
    1760:	bf 4f       	sbci	r27, 0xFF	; 255
    1762:	fe 01       	movw	r30, r28
    1764:	e7 5a       	subi	r30, 0xA7	; 167
    1766:	ff 4f       	sbci	r31, 0xFF	; 255
    1768:	80 81       	ld	r24, Z
    176a:	91 81       	ldd	r25, Z+1	; 0x01
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	11 96       	adiw	r26, 0x01	; 1
    1770:	9c 93       	st	X, r25
    1772:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1774:	fe 01       	movw	r30, r28
    1776:	e7 5a       	subi	r30, 0xA7	; 167
    1778:	ff 4f       	sbci	r31, 0xFF	; 255
    177a:	80 81       	ld	r24, Z
    177c:	91 81       	ldd	r25, Z+1	; 0x01
    177e:	00 97       	sbiw	r24, 0x00	; 0
    1780:	d1 f6       	brne	.-76     	; 0x1736 <main+0xfa>
    1782:	27 c0       	rjmp	.+78     	; 0x17d2 <main+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1784:	8e 01       	movw	r16, r28
    1786:	07 5a       	subi	r16, 0xA7	; 167
    1788:	1f 4f       	sbci	r17, 0xFF	; 255
    178a:	fe 01       	movw	r30, r28
    178c:	e5 5a       	subi	r30, 0xA5	; 165
    178e:	ff 4f       	sbci	r31, 0xFF	; 255
    1790:	60 81       	ld	r22, Z
    1792:	71 81       	ldd	r23, Z+1	; 0x01
    1794:	82 81       	ldd	r24, Z+2	; 0x02
    1796:	93 81       	ldd	r25, Z+3	; 0x03
    1798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	f8 01       	movw	r30, r16
    17a2:	91 83       	std	Z+1, r25	; 0x01
    17a4:	80 83       	st	Z, r24
    17a6:	de 01       	movw	r26, r28
    17a8:	ab 5a       	subi	r26, 0xAB	; 171
    17aa:	bf 4f       	sbci	r27, 0xFF	; 255
    17ac:	fe 01       	movw	r30, r28
    17ae:	e7 5a       	subi	r30, 0xA7	; 167
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	80 81       	ld	r24, Z
    17b4:	91 81       	ldd	r25, Z+1	; 0x01
    17b6:	8d 93       	st	X+, r24
    17b8:	9c 93       	st	X, r25
    17ba:	fe 01       	movw	r30, r28
    17bc:	eb 5a       	subi	r30, 0xAB	; 171
    17be:	ff 4f       	sbci	r31, 0xFF	; 255
    17c0:	80 81       	ld	r24, Z
    17c2:	91 81       	ldd	r25, Z+1	; 0x01
    17c4:	01 97       	sbiw	r24, 0x01	; 1
    17c6:	f1 f7       	brne	.-4      	; 0x17c4 <main+0x188>
    17c8:	fe 01       	movw	r30, r28
    17ca:	eb 5a       	subi	r30, 0xAB	; 171
    17cc:	ff 4f       	sbci	r31, 0xFF	; 255
    17ce:	91 83       	std	Z+1, r25	; 0x01
    17d0:	80 83       	st	Z, r24


	while(1){

		_delay_ms(500);
		ADC_START_CONVERSION(0);
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	0e 94 fd 09 	call	0x13fa	; 0x13fa <ADC_START_CONVERSION>
		ADC_GET_RESULT(&THUMB);
    17d8:	ce 01       	movw	r24, r28
    17da:	8d 59       	subi	r24, 0x9D	; 157
    17dc:	9f 4f       	sbci	r25, 0xFF	; 255
    17de:	0e 94 25 0a 	call	0x144a	; 0x144a <ADC_GET_RESULT>
    17e2:	fe 01       	movw	r30, r28
    17e4:	ef 5a       	subi	r30, 0xAF	; 175
    17e6:	ff 4f       	sbci	r31, 0xFF	; 255
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	a8 e4       	ldi	r26, 0x48	; 72
    17ee:	b2 e4       	ldi	r27, 0x42	; 66
    17f0:	80 83       	st	Z, r24
    17f2:	91 83       	std	Z+1, r25	; 0x01
    17f4:	a2 83       	std	Z+2, r26	; 0x02
    17f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17f8:	8e 01       	movw	r16, r28
    17fa:	03 5b       	subi	r16, 0xB3	; 179
    17fc:	1f 4f       	sbci	r17, 0xFF	; 255
    17fe:	fe 01       	movw	r30, r28
    1800:	ef 5a       	subi	r30, 0xAF	; 175
    1802:	ff 4f       	sbci	r31, 0xFF	; 255
    1804:	60 81       	ld	r22, Z
    1806:	71 81       	ldd	r23, Z+1	; 0x01
    1808:	82 81       	ldd	r24, Z+2	; 0x02
    180a:	93 81       	ldd	r25, Z+3	; 0x03
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	4a e7       	ldi	r20, 0x7A	; 122
    1812:	55 e4       	ldi	r21, 0x45	; 69
    1814:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1818:	dc 01       	movw	r26, r24
    181a:	cb 01       	movw	r24, r22
    181c:	f8 01       	movw	r30, r16
    181e:	80 83       	st	Z, r24
    1820:	91 83       	std	Z+1, r25	; 0x01
    1822:	a2 83       	std	Z+2, r26	; 0x02
    1824:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1826:	fe 01       	movw	r30, r28
    1828:	e3 5b       	subi	r30, 0xB3	; 179
    182a:	ff 4f       	sbci	r31, 0xFF	; 255
    182c:	60 81       	ld	r22, Z
    182e:	71 81       	ldd	r23, Z+1	; 0x01
    1830:	82 81       	ldd	r24, Z+2	; 0x02
    1832:	93 81       	ldd	r25, Z+3	; 0x03
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	40 e8       	ldi	r20, 0x80	; 128
    183a:	5f e3       	ldi	r21, 0x3F	; 63
    183c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1840:	88 23       	and	r24, r24
    1842:	44 f4       	brge	.+16     	; 0x1854 <main+0x218>
		__ticks = 1;
    1844:	fe 01       	movw	r30, r28
    1846:	e5 5b       	subi	r30, 0xB5	; 181
    1848:	ff 4f       	sbci	r31, 0xFF	; 255
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	91 83       	std	Z+1, r25	; 0x01
    1850:	80 83       	st	Z, r24
    1852:	64 c0       	rjmp	.+200    	; 0x191c <main+0x2e0>
	else if (__tmp > 65535)
    1854:	fe 01       	movw	r30, r28
    1856:	e3 5b       	subi	r30, 0xB3	; 179
    1858:	ff 4f       	sbci	r31, 0xFF	; 255
    185a:	60 81       	ld	r22, Z
    185c:	71 81       	ldd	r23, Z+1	; 0x01
    185e:	82 81       	ldd	r24, Z+2	; 0x02
    1860:	93 81       	ldd	r25, Z+3	; 0x03
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	3f ef       	ldi	r19, 0xFF	; 255
    1866:	4f e7       	ldi	r20, 0x7F	; 127
    1868:	57 e4       	ldi	r21, 0x47	; 71
    186a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    186e:	18 16       	cp	r1, r24
    1870:	0c f0       	brlt	.+2      	; 0x1874 <main+0x238>
    1872:	43 c0       	rjmp	.+134    	; 0x18fa <main+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1874:	fe 01       	movw	r30, r28
    1876:	ef 5a       	subi	r30, 0xAF	; 175
    1878:	ff 4f       	sbci	r31, 0xFF	; 255
    187a:	60 81       	ld	r22, Z
    187c:	71 81       	ldd	r23, Z+1	; 0x01
    187e:	82 81       	ldd	r24, Z+2	; 0x02
    1880:	93 81       	ldd	r25, Z+3	; 0x03
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	40 e2       	ldi	r20, 0x20	; 32
    1888:	51 e4       	ldi	r21, 0x41	; 65
    188a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188e:	dc 01       	movw	r26, r24
    1890:	cb 01       	movw	r24, r22
    1892:	8e 01       	movw	r16, r28
    1894:	05 5b       	subi	r16, 0xB5	; 181
    1896:	1f 4f       	sbci	r17, 0xFF	; 255
    1898:	bc 01       	movw	r22, r24
    189a:	cd 01       	movw	r24, r26
    189c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	f8 01       	movw	r30, r16
    18a6:	91 83       	std	Z+1, r25	; 0x01
    18a8:	80 83       	st	Z, r24
    18aa:	1f c0       	rjmp	.+62     	; 0x18ea <main+0x2ae>
    18ac:	fe 01       	movw	r30, r28
    18ae:	e7 5b       	subi	r30, 0xB7	; 183
    18b0:	ff 4f       	sbci	r31, 0xFF	; 255
    18b2:	80 e9       	ldi	r24, 0x90	; 144
    18b4:	91 e0       	ldi	r25, 0x01	; 1
    18b6:	91 83       	std	Z+1, r25	; 0x01
    18b8:	80 83       	st	Z, r24
    18ba:	fe 01       	movw	r30, r28
    18bc:	e7 5b       	subi	r30, 0xB7	; 183
    18be:	ff 4f       	sbci	r31, 0xFF	; 255
    18c0:	80 81       	ld	r24, Z
    18c2:	91 81       	ldd	r25, Z+1	; 0x01
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	f1 f7       	brne	.-4      	; 0x18c4 <main+0x288>
    18c8:	fe 01       	movw	r30, r28
    18ca:	e7 5b       	subi	r30, 0xB7	; 183
    18cc:	ff 4f       	sbci	r31, 0xFF	; 255
    18ce:	91 83       	std	Z+1, r25	; 0x01
    18d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d2:	de 01       	movw	r26, r28
    18d4:	a5 5b       	subi	r26, 0xB5	; 181
    18d6:	bf 4f       	sbci	r27, 0xFF	; 255
    18d8:	fe 01       	movw	r30, r28
    18da:	e5 5b       	subi	r30, 0xB5	; 181
    18dc:	ff 4f       	sbci	r31, 0xFF	; 255
    18de:	80 81       	ld	r24, Z
    18e0:	91 81       	ldd	r25, Z+1	; 0x01
    18e2:	01 97       	sbiw	r24, 0x01	; 1
    18e4:	11 96       	adiw	r26, 0x01	; 1
    18e6:	9c 93       	st	X, r25
    18e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ea:	fe 01       	movw	r30, r28
    18ec:	e5 5b       	subi	r30, 0xB5	; 181
    18ee:	ff 4f       	sbci	r31, 0xFF	; 255
    18f0:	80 81       	ld	r24, Z
    18f2:	91 81       	ldd	r25, Z+1	; 0x01
    18f4:	00 97       	sbiw	r24, 0x00	; 0
    18f6:	d1 f6       	brne	.-76     	; 0x18ac <main+0x270>
    18f8:	27 c0       	rjmp	.+78     	; 0x1948 <main+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18fa:	8e 01       	movw	r16, r28
    18fc:	05 5b       	subi	r16, 0xB5	; 181
    18fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1900:	fe 01       	movw	r30, r28
    1902:	e3 5b       	subi	r30, 0xB3	; 179
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	60 81       	ld	r22, Z
    1908:	71 81       	ldd	r23, Z+1	; 0x01
    190a:	82 81       	ldd	r24, Z+2	; 0x02
    190c:	93 81       	ldd	r25, Z+3	; 0x03
    190e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	f8 01       	movw	r30, r16
    1918:	91 83       	std	Z+1, r25	; 0x01
    191a:	80 83       	st	Z, r24
    191c:	de 01       	movw	r26, r28
    191e:	a9 5b       	subi	r26, 0xB9	; 185
    1920:	bf 4f       	sbci	r27, 0xFF	; 255
    1922:	fe 01       	movw	r30, r28
    1924:	e5 5b       	subi	r30, 0xB5	; 181
    1926:	ff 4f       	sbci	r31, 0xFF	; 255
    1928:	80 81       	ld	r24, Z
    192a:	91 81       	ldd	r25, Z+1	; 0x01
    192c:	8d 93       	st	X+, r24
    192e:	9c 93       	st	X, r25
    1930:	fe 01       	movw	r30, r28
    1932:	e9 5b       	subi	r30, 0xB9	; 185
    1934:	ff 4f       	sbci	r31, 0xFF	; 255
    1936:	80 81       	ld	r24, Z
    1938:	91 81       	ldd	r25, Z+1	; 0x01
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	f1 f7       	brne	.-4      	; 0x193a <main+0x2fe>
    193e:	fe 01       	movw	r30, r28
    1940:	e9 5b       	subi	r30, 0xB9	; 185
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	91 83       	std	Z+1, r25	; 0x01
    1946:	80 83       	st	Z, r24
		_delay_ms(50);
		ADC_START_CONVERSION(1);
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	0e 94 fd 09 	call	0x13fa	; 0x13fa <ADC_START_CONVERSION>
		ADC_GET_RESULT(&INDEX);
    194e:	ce 01       	movw	r24, r28
    1950:	8b 59       	subi	r24, 0x9B	; 155
    1952:	9f 4f       	sbci	r25, 0xFF	; 255
    1954:	0e 94 25 0a 	call	0x144a	; 0x144a <ADC_GET_RESULT>
    1958:	fe 01       	movw	r30, r28
    195a:	ed 5b       	subi	r30, 0xBD	; 189
    195c:	ff 4f       	sbci	r31, 0xFF	; 255
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	a8 e4       	ldi	r26, 0x48	; 72
    1964:	b2 e4       	ldi	r27, 0x42	; 66
    1966:	80 83       	st	Z, r24
    1968:	91 83       	std	Z+1, r25	; 0x01
    196a:	a2 83       	std	Z+2, r26	; 0x02
    196c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    196e:	8e 01       	movw	r16, r28
    1970:	01 5c       	subi	r16, 0xC1	; 193
    1972:	1f 4f       	sbci	r17, 0xFF	; 255
    1974:	fe 01       	movw	r30, r28
    1976:	ed 5b       	subi	r30, 0xBD	; 189
    1978:	ff 4f       	sbci	r31, 0xFF	; 255
    197a:	60 81       	ld	r22, Z
    197c:	71 81       	ldd	r23, Z+1	; 0x01
    197e:	82 81       	ldd	r24, Z+2	; 0x02
    1980:	93 81       	ldd	r25, Z+3	; 0x03
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	4a e7       	ldi	r20, 0x7A	; 122
    1988:	55 e4       	ldi	r21, 0x45	; 69
    198a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	f8 01       	movw	r30, r16
    1994:	80 83       	st	Z, r24
    1996:	91 83       	std	Z+1, r25	; 0x01
    1998:	a2 83       	std	Z+2, r26	; 0x02
    199a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    199c:	fe 01       	movw	r30, r28
    199e:	ff 96       	adiw	r30, 0x3f	; 63
    19a0:	60 81       	ld	r22, Z
    19a2:	71 81       	ldd	r23, Z+1	; 0x01
    19a4:	82 81       	ldd	r24, Z+2	; 0x02
    19a6:	93 81       	ldd	r25, Z+3	; 0x03
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	40 e8       	ldi	r20, 0x80	; 128
    19ae:	5f e3       	ldi	r21, 0x3F	; 63
    19b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19b4:	88 23       	and	r24, r24
    19b6:	2c f4       	brge	.+10     	; 0x19c2 <main+0x386>
		__ticks = 1;
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	9e af       	std	Y+62, r25	; 0x3e
    19be:	8d af       	std	Y+61, r24	; 0x3d
    19c0:	46 c0       	rjmp	.+140    	; 0x1a4e <main+0x412>
	else if (__tmp > 65535)
    19c2:	fe 01       	movw	r30, r28
    19c4:	ff 96       	adiw	r30, 0x3f	; 63
    19c6:	60 81       	ld	r22, Z
    19c8:	71 81       	ldd	r23, Z+1	; 0x01
    19ca:	82 81       	ldd	r24, Z+2	; 0x02
    19cc:	93 81       	ldd	r25, Z+3	; 0x03
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	3f ef       	ldi	r19, 0xFF	; 255
    19d2:	4f e7       	ldi	r20, 0x7F	; 127
    19d4:	57 e4       	ldi	r21, 0x47	; 71
    19d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19da:	18 16       	cp	r1, r24
    19dc:	64 f5       	brge	.+88     	; 0x1a36 <main+0x3fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19de:	fe 01       	movw	r30, r28
    19e0:	ed 5b       	subi	r30, 0xBD	; 189
    19e2:	ff 4f       	sbci	r31, 0xFF	; 255
    19e4:	60 81       	ld	r22, Z
    19e6:	71 81       	ldd	r23, Z+1	; 0x01
    19e8:	82 81       	ldd	r24, Z+2	; 0x02
    19ea:	93 81       	ldd	r25, Z+3	; 0x03
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	40 e2       	ldi	r20, 0x20	; 32
    19f2:	51 e4       	ldi	r21, 0x41	; 65
    19f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	bc 01       	movw	r22, r24
    19fe:	cd 01       	movw	r24, r26
    1a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	9e af       	std	Y+62, r25	; 0x3e
    1a0a:	8d af       	std	Y+61, r24	; 0x3d
    1a0c:	0f c0       	rjmp	.+30     	; 0x1a2c <main+0x3f0>
    1a0e:	80 e9       	ldi	r24, 0x90	; 144
    1a10:	91 e0       	ldi	r25, 0x01	; 1
    1a12:	9c af       	std	Y+60, r25	; 0x3c
    1a14:	8b af       	std	Y+59, r24	; 0x3b
    1a16:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a18:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	f1 f7       	brne	.-4      	; 0x1a1a <main+0x3de>
    1a1e:	9c af       	std	Y+60, r25	; 0x3c
    1a20:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a22:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a24:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	9e af       	std	Y+62, r25	; 0x3e
    1a2a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a2e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a30:	00 97       	sbiw	r24, 0x00	; 0
    1a32:	69 f7       	brne	.-38     	; 0x1a0e <main+0x3d2>
    1a34:	16 c0       	rjmp	.+44     	; 0x1a62 <main+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a36:	fe 01       	movw	r30, r28
    1a38:	ff 96       	adiw	r30, 0x3f	; 63
    1a3a:	60 81       	ld	r22, Z
    1a3c:	71 81       	ldd	r23, Z+1	; 0x01
    1a3e:	82 81       	ldd	r24, Z+2	; 0x02
    1a40:	93 81       	ldd	r25, Z+3	; 0x03
    1a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	9e af       	std	Y+62, r25	; 0x3e
    1a4c:	8d af       	std	Y+61, r24	; 0x3d
    1a4e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a50:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a52:	9a af       	std	Y+58, r25	; 0x3a
    1a54:	89 af       	std	Y+57, r24	; 0x39
    1a56:	89 ad       	ldd	r24, Y+57	; 0x39
    1a58:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	f1 f7       	brne	.-4      	; 0x1a5a <main+0x41e>
    1a5e:	9a af       	std	Y+58, r25	; 0x3a
    1a60:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(50);
		ADC_START_CONVERSION(2);
    1a62:	82 e0       	ldi	r24, 0x02	; 2
    1a64:	0e 94 fd 09 	call	0x13fa	; 0x13fa <ADC_START_CONVERSION>
		ADC_GET_RESULT(&MIDDLE);
    1a68:	ce 01       	movw	r24, r28
    1a6a:	89 59       	subi	r24, 0x99	; 153
    1a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6e:	0e 94 25 0a 	call	0x144a	; 0x144a <ADC_GET_RESULT>
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	a8 e4       	ldi	r26, 0x48	; 72
    1a78:	b2 e4       	ldi	r27, 0x42	; 66
    1a7a:	8d ab       	std	Y+53, r24	; 0x35
    1a7c:	9e ab       	std	Y+54, r25	; 0x36
    1a7e:	af ab       	std	Y+55, r26	; 0x37
    1a80:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a82:	6d a9       	ldd	r22, Y+53	; 0x35
    1a84:	7e a9       	ldd	r23, Y+54	; 0x36
    1a86:	8f a9       	ldd	r24, Y+55	; 0x37
    1a88:	98 ad       	ldd	r25, Y+56	; 0x38
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	4a e7       	ldi	r20, 0x7A	; 122
    1a90:	55 e4       	ldi	r21, 0x45	; 69
    1a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	89 ab       	std	Y+49, r24	; 0x31
    1a9c:	9a ab       	std	Y+50, r25	; 0x32
    1a9e:	ab ab       	std	Y+51, r26	; 0x33
    1aa0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1aa2:	69 a9       	ldd	r22, Y+49	; 0x31
    1aa4:	7a a9       	ldd	r23, Y+50	; 0x32
    1aa6:	8b a9       	ldd	r24, Y+51	; 0x33
    1aa8:	9c a9       	ldd	r25, Y+52	; 0x34
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	40 e8       	ldi	r20, 0x80	; 128
    1ab0:	5f e3       	ldi	r21, 0x3F	; 63
    1ab2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ab6:	88 23       	and	r24, r24
    1ab8:	2c f4       	brge	.+10     	; 0x1ac4 <main+0x488>
		__ticks = 1;
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	98 ab       	std	Y+48, r25	; 0x30
    1ac0:	8f a7       	std	Y+47, r24	; 0x2f
    1ac2:	3f c0       	rjmp	.+126    	; 0x1b42 <main+0x506>
	else if (__tmp > 65535)
    1ac4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ac6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ac8:	8b a9       	ldd	r24, Y+51	; 0x33
    1aca:	9c a9       	ldd	r25, Y+52	; 0x34
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	3f ef       	ldi	r19, 0xFF	; 255
    1ad0:	4f e7       	ldi	r20, 0x7F	; 127
    1ad2:	57 e4       	ldi	r21, 0x47	; 71
    1ad4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ad8:	18 16       	cp	r1, r24
    1ada:	4c f5       	brge	.+82     	; 0x1b2e <main+0x4f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1adc:	6d a9       	ldd	r22, Y+53	; 0x35
    1ade:	7e a9       	ldd	r23, Y+54	; 0x36
    1ae0:	8f a9       	ldd	r24, Y+55	; 0x37
    1ae2:	98 ad       	ldd	r25, Y+56	; 0x38
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	40 e2       	ldi	r20, 0x20	; 32
    1aea:	51 e4       	ldi	r21, 0x41	; 65
    1aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	bc 01       	movw	r22, r24
    1af6:	cd 01       	movw	r24, r26
    1af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	98 ab       	std	Y+48, r25	; 0x30
    1b02:	8f a7       	std	Y+47, r24	; 0x2f
    1b04:	0f c0       	rjmp	.+30     	; 0x1b24 <main+0x4e8>
    1b06:	80 e9       	ldi	r24, 0x90	; 144
    1b08:	91 e0       	ldi	r25, 0x01	; 1
    1b0a:	9e a7       	std	Y+46, r25	; 0x2e
    1b0c:	8d a7       	std	Y+45, r24	; 0x2d
    1b0e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b10:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	f1 f7       	brne	.-4      	; 0x1b12 <main+0x4d6>
    1b16:	9e a7       	std	Y+46, r25	; 0x2e
    1b18:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b1c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	98 ab       	std	Y+48, r25	; 0x30
    1b22:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b24:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b26:	98 a9       	ldd	r25, Y+48	; 0x30
    1b28:	00 97       	sbiw	r24, 0x00	; 0
    1b2a:	69 f7       	brne	.-38     	; 0x1b06 <main+0x4ca>
    1b2c:	14 c0       	rjmp	.+40     	; 0x1b56 <main+0x51a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2e:	69 a9       	ldd	r22, Y+49	; 0x31
    1b30:	7a a9       	ldd	r23, Y+50	; 0x32
    1b32:	8b a9       	ldd	r24, Y+51	; 0x33
    1b34:	9c a9       	ldd	r25, Y+52	; 0x34
    1b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	98 ab       	std	Y+48, r25	; 0x30
    1b40:	8f a7       	std	Y+47, r24	; 0x2f
    1b42:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b44:	98 a9       	ldd	r25, Y+48	; 0x30
    1b46:	9c a7       	std	Y+44, r25	; 0x2c
    1b48:	8b a7       	std	Y+43, r24	; 0x2b
    1b4a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b4c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	f1 f7       	brne	.-4      	; 0x1b4e <main+0x512>
    1b52:	9c a7       	std	Y+44, r25	; 0x2c
    1b54:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
		ADC_START_CONVERSION(3);
    1b56:	83 e0       	ldi	r24, 0x03	; 3
    1b58:	0e 94 fd 09 	call	0x13fa	; 0x13fa <ADC_START_CONVERSION>
		ADC_GET_RESULT(&RING);
    1b5c:	ce 01       	movw	r24, r28
    1b5e:	87 59       	subi	r24, 0x97	; 151
    1b60:	9f 4f       	sbci	r25, 0xFF	; 255
    1b62:	0e 94 25 0a 	call	0x144a	; 0x144a <ADC_GET_RESULT>
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	a8 e4       	ldi	r26, 0x48	; 72
    1b6c:	b2 e4       	ldi	r27, 0x42	; 66
    1b6e:	8f a3       	std	Y+39, r24	; 0x27
    1b70:	98 a7       	std	Y+40, r25	; 0x28
    1b72:	a9 a7       	std	Y+41, r26	; 0x29
    1b74:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b76:	6f a1       	ldd	r22, Y+39	; 0x27
    1b78:	78 a5       	ldd	r23, Y+40	; 0x28
    1b7a:	89 a5       	ldd	r24, Y+41	; 0x29
    1b7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	4a e7       	ldi	r20, 0x7A	; 122
    1b84:	55 e4       	ldi	r21, 0x45	; 69
    1b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	8b a3       	std	Y+35, r24	; 0x23
    1b90:	9c a3       	std	Y+36, r25	; 0x24
    1b92:	ad a3       	std	Y+37, r26	; 0x25
    1b94:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b96:	6b a1       	ldd	r22, Y+35	; 0x23
    1b98:	7c a1       	ldd	r23, Y+36	; 0x24
    1b9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1b9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	40 e8       	ldi	r20, 0x80	; 128
    1ba4:	5f e3       	ldi	r21, 0x3F	; 63
    1ba6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1baa:	88 23       	and	r24, r24
    1bac:	2c f4       	brge	.+10     	; 0x1bb8 <main+0x57c>
		__ticks = 1;
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	9a a3       	std	Y+34, r25	; 0x22
    1bb4:	89 a3       	std	Y+33, r24	; 0x21
    1bb6:	3f c0       	rjmp	.+126    	; 0x1c36 <main+0x5fa>
	else if (__tmp > 65535)
    1bb8:	6b a1       	ldd	r22, Y+35	; 0x23
    1bba:	7c a1       	ldd	r23, Y+36	; 0x24
    1bbc:	8d a1       	ldd	r24, Y+37	; 0x25
    1bbe:	9e a1       	ldd	r25, Y+38	; 0x26
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	3f ef       	ldi	r19, 0xFF	; 255
    1bc4:	4f e7       	ldi	r20, 0x7F	; 127
    1bc6:	57 e4       	ldi	r21, 0x47	; 71
    1bc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bcc:	18 16       	cp	r1, r24
    1bce:	4c f5       	brge	.+82     	; 0x1c22 <main+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd0:	6f a1       	ldd	r22, Y+39	; 0x27
    1bd2:	78 a5       	ldd	r23, Y+40	; 0x28
    1bd4:	89 a5       	ldd	r24, Y+41	; 0x29
    1bd6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e2       	ldi	r20, 0x20	; 32
    1bde:	51 e4       	ldi	r21, 0x41	; 65
    1be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	bc 01       	movw	r22, r24
    1bea:	cd 01       	movw	r24, r26
    1bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	9a a3       	std	Y+34, r25	; 0x22
    1bf6:	89 a3       	std	Y+33, r24	; 0x21
    1bf8:	0f c0       	rjmp	.+30     	; 0x1c18 <main+0x5dc>
    1bfa:	80 e9       	ldi	r24, 0x90	; 144
    1bfc:	91 e0       	ldi	r25, 0x01	; 1
    1bfe:	98 a3       	std	Y+32, r25	; 0x20
    1c00:	8f 8f       	std	Y+31, r24	; 0x1f
    1c02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c04:	98 a1       	ldd	r25, Y+32	; 0x20
    1c06:	01 97       	sbiw	r24, 0x01	; 1
    1c08:	f1 f7       	brne	.-4      	; 0x1c06 <main+0x5ca>
    1c0a:	98 a3       	std	Y+32, r25	; 0x20
    1c0c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c10:	9a a1       	ldd	r25, Y+34	; 0x22
    1c12:	01 97       	sbiw	r24, 0x01	; 1
    1c14:	9a a3       	std	Y+34, r25	; 0x22
    1c16:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c18:	89 a1       	ldd	r24, Y+33	; 0x21
    1c1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	69 f7       	brne	.-38     	; 0x1bfa <main+0x5be>
    1c20:	14 c0       	rjmp	.+40     	; 0x1c4a <main+0x60e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c22:	6b a1       	ldd	r22, Y+35	; 0x23
    1c24:	7c a1       	ldd	r23, Y+36	; 0x24
    1c26:	8d a1       	ldd	r24, Y+37	; 0x25
    1c28:	9e a1       	ldd	r25, Y+38	; 0x26
    1c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	9a a3       	std	Y+34, r25	; 0x22
    1c34:	89 a3       	std	Y+33, r24	; 0x21
    1c36:	89 a1       	ldd	r24, Y+33	; 0x21
    1c38:	9a a1       	ldd	r25, Y+34	; 0x22
    1c3a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c3c:	8d 8f       	std	Y+29, r24	; 0x1d
    1c3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c42:	01 97       	sbiw	r24, 0x01	; 1
    1c44:	f1 f7       	brne	.-4      	; 0x1c42 <main+0x606>
    1c46:	9e 8f       	std	Y+30, r25	; 0x1e
    1c48:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		ADC_START_CONVERSION(4);
    1c4a:	84 e0       	ldi	r24, 0x04	; 4
    1c4c:	0e 94 fd 09 	call	0x13fa	; 0x13fa <ADC_START_CONVERSION>
		ADC_GET_RESULT(&LITTLE);
    1c50:	ce 01       	movw	r24, r28
    1c52:	85 59       	subi	r24, 0x95	; 149
    1c54:	9f 4f       	sbci	r25, 0xFF	; 255
    1c56:	0e 94 25 0a 	call	0x144a	; 0x144a <ADC_GET_RESULT>
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	a8 e4       	ldi	r26, 0x48	; 72
    1c60:	b2 e4       	ldi	r27, 0x42	; 66
    1c62:	89 8f       	std	Y+25, r24	; 0x19
    1c64:	9a 8f       	std	Y+26, r25	; 0x1a
    1c66:	ab 8f       	std	Y+27, r26	; 0x1b
    1c68:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c6a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	4a e7       	ldi	r20, 0x7A	; 122
    1c78:	55 e4       	ldi	r21, 0x45	; 69
    1c7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	8d 8b       	std	Y+21, r24	; 0x15
    1c84:	9e 8b       	std	Y+22, r25	; 0x16
    1c86:	af 8b       	std	Y+23, r26	; 0x17
    1c88:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c8a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c8c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c90:	98 8d       	ldd	r25, Y+24	; 0x18
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	40 e8       	ldi	r20, 0x80	; 128
    1c98:	5f e3       	ldi	r21, 0x3F	; 63
    1c9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c9e:	88 23       	and	r24, r24
    1ca0:	2c f4       	brge	.+10     	; 0x1cac <main+0x670>
		__ticks = 1;
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	9c 8b       	std	Y+20, r25	; 0x14
    1ca8:	8b 8b       	std	Y+19, r24	; 0x13
    1caa:	3f c0       	rjmp	.+126    	; 0x1d2a <main+0x6ee>
	else if (__tmp > 65535)
    1cac:	6d 89       	ldd	r22, Y+21	; 0x15
    1cae:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb2:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	3f ef       	ldi	r19, 0xFF	; 255
    1cb8:	4f e7       	ldi	r20, 0x7F	; 127
    1cba:	57 e4       	ldi	r21, 0x47	; 71
    1cbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cc0:	18 16       	cp	r1, r24
    1cc2:	4c f5       	brge	.+82     	; 0x1d16 <main+0x6da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc4:	69 8d       	ldd	r22, Y+25	; 0x19
    1cc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e2       	ldi	r20, 0x20	; 32
    1cd2:	51 e4       	ldi	r21, 0x41	; 65
    1cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	bc 01       	movw	r22, r24
    1cde:	cd 01       	movw	r24, r26
    1ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	9c 8b       	std	Y+20, r25	; 0x14
    1cea:	8b 8b       	std	Y+19, r24	; 0x13
    1cec:	0f c0       	rjmp	.+30     	; 0x1d0c <main+0x6d0>
    1cee:	80 e9       	ldi	r24, 0x90	; 144
    1cf0:	91 e0       	ldi	r25, 0x01	; 1
    1cf2:	9a 8b       	std	Y+18, r25	; 0x12
    1cf4:	89 8b       	std	Y+17, r24	; 0x11
    1cf6:	89 89       	ldd	r24, Y+17	; 0x11
    1cf8:	9a 89       	ldd	r25, Y+18	; 0x12
    1cfa:	01 97       	sbiw	r24, 0x01	; 1
    1cfc:	f1 f7       	brne	.-4      	; 0x1cfa <main+0x6be>
    1cfe:	9a 8b       	std	Y+18, r25	; 0x12
    1d00:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d02:	8b 89       	ldd	r24, Y+19	; 0x13
    1d04:	9c 89       	ldd	r25, Y+20	; 0x14
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	9c 8b       	std	Y+20, r25	; 0x14
    1d0a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d10:	00 97       	sbiw	r24, 0x00	; 0
    1d12:	69 f7       	brne	.-38     	; 0x1cee <main+0x6b2>
    1d14:	14 c0       	rjmp	.+40     	; 0x1d3e <main+0x702>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d16:	6d 89       	ldd	r22, Y+21	; 0x15
    1d18:	7e 89       	ldd	r23, Y+22	; 0x16
    1d1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	9c 8b       	std	Y+20, r25	; 0x14
    1d28:	8b 8b       	std	Y+19, r24	; 0x13
    1d2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d2e:	98 8b       	std	Y+16, r25	; 0x10
    1d30:	8f 87       	std	Y+15, r24	; 0x0f
    1d32:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d34:	98 89       	ldd	r25, Y+16	; 0x10
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	f1 f7       	brne	.-4      	; 0x1d36 <main+0x6fa>
    1d3a:	98 8b       	std	Y+16, r25	; 0x10
    1d3c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);

		if	   (THUMB Open && INDEX Open && MIDDLE Hold && RING Hold && LITTLE Open){
    1d3e:	fe 01       	movw	r30, r28
    1d40:	ed 59       	subi	r30, 0x9D	; 157
    1d42:	ff 4f       	sbci	r31, 0xFF	; 255
    1d44:	80 81       	ld	r24, Z
    1d46:	91 81       	ldd	r25, Z+1	; 0x01
    1d48:	f3 e0       	ldi	r31, 0x03	; 3
    1d4a:	80 32       	cpi	r24, 0x20	; 32
    1d4c:	9f 07       	cpc	r25, r31
    1d4e:	68 f5       	brcc	.+90     	; 0x1daa <main+0x76e>
    1d50:	fe 01       	movw	r30, r28
    1d52:	eb 59       	subi	r30, 0x9B	; 155
    1d54:	ff 4f       	sbci	r31, 0xFF	; 255
    1d56:	80 81       	ld	r24, Z
    1d58:	91 81       	ldd	r25, Z+1	; 0x01
    1d5a:	23 e0       	ldi	r18, 0x03	; 3
    1d5c:	80 32       	cpi	r24, 0x20	; 32
    1d5e:	92 07       	cpc	r25, r18
    1d60:	20 f5       	brcc	.+72     	; 0x1daa <main+0x76e>
    1d62:	fe 01       	movw	r30, r28
    1d64:	e9 59       	subi	r30, 0x99	; 153
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	80 81       	ld	r24, Z
    1d6a:	91 81       	ldd	r25, Z+1	; 0x01
    1d6c:	e3 e0       	ldi	r30, 0x03	; 3
    1d6e:	81 32       	cpi	r24, 0x21	; 33
    1d70:	9e 07       	cpc	r25, r30
    1d72:	d8 f0       	brcs	.+54     	; 0x1daa <main+0x76e>
    1d74:	fe 01       	movw	r30, r28
    1d76:	e7 59       	subi	r30, 0x97	; 151
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	80 81       	ld	r24, Z
    1d7c:	91 81       	ldd	r25, Z+1	; 0x01
    1d7e:	f3 e0       	ldi	r31, 0x03	; 3
    1d80:	81 32       	cpi	r24, 0x21	; 33
    1d82:	9f 07       	cpc	r25, r31
    1d84:	90 f0       	brcs	.+36     	; 0x1daa <main+0x76e>
    1d86:	fe 01       	movw	r30, r28
    1d88:	e5 59       	subi	r30, 0x95	; 149
    1d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8c:	80 81       	ld	r24, Z
    1d8e:	91 81       	ldd	r25, Z+1	; 0x01
    1d90:	23 e0       	ldi	r18, 0x03	; 3
    1d92:	80 32       	cpi	r24, 0x20	; 32
    1d94:	92 07       	cpc	r25, r18
    1d96:	48 f4       	brcc	.+18     	; 0x1daa <main+0x76e>

			UART_enuSendString("NF");
    1d98:	80 e6       	ldi	r24, 0x60	; 96
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_enuSendString>
			UART_enuSendString("\r\n");			//Carriage Return,Line Feed
    1da0:	83 e6       	ldi	r24, 0x63	; 99
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_enuSendString>
    1da8:	af c1       	rjmp	.+862    	; 0x2108 <main+0xacc>

		}

		else if	   (THUMB Open && INDEX Hold && MIDDLE Open && RING Open && LITTLE Hold){
    1daa:	fe 01       	movw	r30, r28
    1dac:	ed 59       	subi	r30, 0x9D	; 157
    1dae:	ff 4f       	sbci	r31, 0xFF	; 255
    1db0:	80 81       	ld	r24, Z
    1db2:	91 81       	ldd	r25, Z+1	; 0x01
    1db4:	e3 e0       	ldi	r30, 0x03	; 3
    1db6:	80 32       	cpi	r24, 0x20	; 32
    1db8:	9e 07       	cpc	r25, r30
    1dba:	68 f5       	brcc	.+90     	; 0x1e16 <main+0x7da>
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	eb 59       	subi	r30, 0x9B	; 155
    1dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc2:	80 81       	ld	r24, Z
    1dc4:	91 81       	ldd	r25, Z+1	; 0x01
    1dc6:	f3 e0       	ldi	r31, 0x03	; 3
    1dc8:	81 32       	cpi	r24, 0x21	; 33
    1dca:	9f 07       	cpc	r25, r31
    1dcc:	20 f1       	brcs	.+72     	; 0x1e16 <main+0x7da>
    1dce:	fe 01       	movw	r30, r28
    1dd0:	e9 59       	subi	r30, 0x99	; 153
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	80 81       	ld	r24, Z
    1dd6:	91 81       	ldd	r25, Z+1	; 0x01
    1dd8:	23 e0       	ldi	r18, 0x03	; 3
    1dda:	80 32       	cpi	r24, 0x20	; 32
    1ddc:	92 07       	cpc	r25, r18
    1dde:	d8 f4       	brcc	.+54     	; 0x1e16 <main+0x7da>
    1de0:	fe 01       	movw	r30, r28
    1de2:	e7 59       	subi	r30, 0x97	; 151
    1de4:	ff 4f       	sbci	r31, 0xFF	; 255
    1de6:	80 81       	ld	r24, Z
    1de8:	91 81       	ldd	r25, Z+1	; 0x01
    1dea:	e3 e0       	ldi	r30, 0x03	; 3
    1dec:	80 32       	cpi	r24, 0x20	; 32
    1dee:	9e 07       	cpc	r25, r30
    1df0:	90 f4       	brcc	.+36     	; 0x1e16 <main+0x7da>
    1df2:	fe 01       	movw	r30, r28
    1df4:	e5 59       	subi	r30, 0x95	; 149
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	80 81       	ld	r24, Z
    1dfa:	91 81       	ldd	r25, Z+1	; 0x01
    1dfc:	f3 e0       	ldi	r31, 0x03	; 3
    1dfe:	81 32       	cpi	r24, 0x21	; 33
    1e00:	9f 07       	cpc	r25, r31
    1e02:	48 f0       	brcs	.+18     	; 0x1e16 <main+0x7da>
			UART_enuSendString("NB");
    1e04:	86 e6       	ldi	r24, 0x66	; 102
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_enuSendString>
			UART_enuSendString("\r\n");
    1e0c:	83 e6       	ldi	r24, 0x63	; 99
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_enuSendString>
    1e14:	79 c1       	rjmp	.+754    	; 0x2108 <main+0xacc>

		}


		else if	   (THUMB Open && INDEX Hold && MIDDLE Open && RING Open && LITTLE Open){
    1e16:	fe 01       	movw	r30, r28
    1e18:	ed 59       	subi	r30, 0x9D	; 157
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	80 81       	ld	r24, Z
    1e1e:	91 81       	ldd	r25, Z+1	; 0x01
    1e20:	23 e0       	ldi	r18, 0x03	; 3
    1e22:	80 32       	cpi	r24, 0x20	; 32
    1e24:	92 07       	cpc	r25, r18
    1e26:	68 f5       	brcc	.+90     	; 0x1e82 <main+0x846>
    1e28:	fe 01       	movw	r30, r28
    1e2a:	eb 59       	subi	r30, 0x9B	; 155
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	80 81       	ld	r24, Z
    1e30:	91 81       	ldd	r25, Z+1	; 0x01
    1e32:	e3 e0       	ldi	r30, 0x03	; 3
    1e34:	81 32       	cpi	r24, 0x21	; 33
    1e36:	9e 07       	cpc	r25, r30
    1e38:	20 f1       	brcs	.+72     	; 0x1e82 <main+0x846>
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	e9 59       	subi	r30, 0x99	; 153
    1e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e40:	80 81       	ld	r24, Z
    1e42:	91 81       	ldd	r25, Z+1	; 0x01
    1e44:	f3 e0       	ldi	r31, 0x03	; 3
    1e46:	80 32       	cpi	r24, 0x20	; 32
    1e48:	9f 07       	cpc	r25, r31
    1e4a:	d8 f4       	brcc	.+54     	; 0x1e82 <main+0x846>
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	e7 59       	subi	r30, 0x97	; 151
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	80 81       	ld	r24, Z
    1e54:	91 81       	ldd	r25, Z+1	; 0x01
    1e56:	23 e0       	ldi	r18, 0x03	; 3
    1e58:	80 32       	cpi	r24, 0x20	; 32
    1e5a:	92 07       	cpc	r25, r18
    1e5c:	90 f4       	brcc	.+36     	; 0x1e82 <main+0x846>
    1e5e:	fe 01       	movw	r30, r28
    1e60:	e5 59       	subi	r30, 0x95	; 149
    1e62:	ff 4f       	sbci	r31, 0xFF	; 255
    1e64:	80 81       	ld	r24, Z
    1e66:	91 81       	ldd	r25, Z+1	; 0x01
    1e68:	e3 e0       	ldi	r30, 0x03	; 3
    1e6a:	80 32       	cpi	r24, 0x20	; 32
    1e6c:	9e 07       	cpc	r25, r30
    1e6e:	48 f4       	brcc	.+18     	; 0x1e82 <main+0x846>

			UART_enuSendString("NL");
    1e70:	89 e6       	ldi	r24, 0x69	; 105
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_enuSendString>
			UART_enuSendString("\r\n");
    1e78:	83 e6       	ldi	r24, 0x63	; 99
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_enuSendString>
    1e80:	43 c1       	rjmp	.+646    	; 0x2108 <main+0xacc>
		}
		else if	   (THUMB Open && INDEX Open && MIDDLE Open && RING Open && LITTLE Hold){
    1e82:	fe 01       	movw	r30, r28
    1e84:	ed 59       	subi	r30, 0x9D	; 157
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	80 81       	ld	r24, Z
    1e8a:	91 81       	ldd	r25, Z+1	; 0x01
    1e8c:	f3 e0       	ldi	r31, 0x03	; 3
    1e8e:	80 32       	cpi	r24, 0x20	; 32
    1e90:	9f 07       	cpc	r25, r31
    1e92:	68 f5       	brcc	.+90     	; 0x1eee <main+0x8b2>
    1e94:	fe 01       	movw	r30, r28
    1e96:	eb 59       	subi	r30, 0x9B	; 155
    1e98:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9a:	80 81       	ld	r24, Z
    1e9c:	91 81       	ldd	r25, Z+1	; 0x01
    1e9e:	23 e0       	ldi	r18, 0x03	; 3
    1ea0:	80 32       	cpi	r24, 0x20	; 32
    1ea2:	92 07       	cpc	r25, r18
    1ea4:	20 f5       	brcc	.+72     	; 0x1eee <main+0x8b2>
    1ea6:	fe 01       	movw	r30, r28
    1ea8:	e9 59       	subi	r30, 0x99	; 153
    1eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1eac:	80 81       	ld	r24, Z
    1eae:	91 81       	ldd	r25, Z+1	; 0x01
    1eb0:	e3 e0       	ldi	r30, 0x03	; 3
    1eb2:	80 32       	cpi	r24, 0x20	; 32
    1eb4:	9e 07       	cpc	r25, r30
    1eb6:	d8 f4       	brcc	.+54     	; 0x1eee <main+0x8b2>
    1eb8:	fe 01       	movw	r30, r28
    1eba:	e7 59       	subi	r30, 0x97	; 151
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	80 81       	ld	r24, Z
    1ec0:	91 81       	ldd	r25, Z+1	; 0x01
    1ec2:	f3 e0       	ldi	r31, 0x03	; 3
    1ec4:	80 32       	cpi	r24, 0x20	; 32
    1ec6:	9f 07       	cpc	r25, r31
    1ec8:	90 f4       	brcc	.+36     	; 0x1eee <main+0x8b2>
    1eca:	fe 01       	movw	r30, r28
    1ecc:	e5 59       	subi	r30, 0x95	; 149
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	80 81       	ld	r24, Z
    1ed2:	91 81       	ldd	r25, Z+1	; 0x01
    1ed4:	23 e0       	ldi	r18, 0x03	; 3
    1ed6:	81 32       	cpi	r24, 0x21	; 33
    1ed8:	92 07       	cpc	r25, r18
    1eda:	48 f0       	brcs	.+18     	; 0x1eee <main+0x8b2>

			UART_enuSendString("NR");
    1edc:	8c e6       	ldi	r24, 0x6C	; 108
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_enuSendString>
			UART_enuSendString("\r\n");
    1ee4:	83 e6       	ldi	r24, 0x63	; 99
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_enuSendString>
    1eec:	0d c1       	rjmp	.+538    	; 0x2108 <main+0xacc>
		}
		else if	   (THUMB Hold && INDEX Open && MIDDLE Hold && RING Hold && LITTLE Open){
    1eee:	fe 01       	movw	r30, r28
    1ef0:	ed 59       	subi	r30, 0x9D	; 157
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	80 81       	ld	r24, Z
    1ef6:	91 81       	ldd	r25, Z+1	; 0x01
    1ef8:	e3 e0       	ldi	r30, 0x03	; 3
    1efa:	81 32       	cpi	r24, 0x21	; 33
    1efc:	9e 07       	cpc	r25, r30
    1efe:	68 f1       	brcs	.+90     	; 0x1f5a <main+0x91e>
    1f00:	fe 01       	movw	r30, r28
    1f02:	eb 59       	subi	r30, 0x9B	; 155
    1f04:	ff 4f       	sbci	r31, 0xFF	; 255
    1f06:	80 81       	ld	r24, Z
    1f08:	91 81       	ldd	r25, Z+1	; 0x01
    1f0a:	f3 e0       	ldi	r31, 0x03	; 3
    1f0c:	80 32       	cpi	r24, 0x20	; 32
    1f0e:	9f 07       	cpc	r25, r31
    1f10:	20 f5       	brcc	.+72     	; 0x1f5a <main+0x91e>
    1f12:	fe 01       	movw	r30, r28
    1f14:	e9 59       	subi	r30, 0x99	; 153
    1f16:	ff 4f       	sbci	r31, 0xFF	; 255
    1f18:	80 81       	ld	r24, Z
    1f1a:	91 81       	ldd	r25, Z+1	; 0x01
    1f1c:	23 e0       	ldi	r18, 0x03	; 3
    1f1e:	81 32       	cpi	r24, 0x21	; 33
    1f20:	92 07       	cpc	r25, r18
    1f22:	d8 f0       	brcs	.+54     	; 0x1f5a <main+0x91e>
    1f24:	fe 01       	movw	r30, r28
    1f26:	e7 59       	subi	r30, 0x97	; 151
    1f28:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2a:	80 81       	ld	r24, Z
    1f2c:	91 81       	ldd	r25, Z+1	; 0x01
    1f2e:	e3 e0       	ldi	r30, 0x03	; 3
    1f30:	81 32       	cpi	r24, 0x21	; 33
    1f32:	9e 07       	cpc	r25, r30
    1f34:	90 f0       	brcs	.+36     	; 0x1f5a <main+0x91e>
    1f36:	fe 01       	movw	r30, r28
    1f38:	e5 59       	subi	r30, 0x95	; 149
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	80 81       	ld	r24, Z
    1f3e:	91 81       	ldd	r25, Z+1	; 0x01
    1f40:	f3 e0       	ldi	r31, 0x03	; 3
    1f42:	80 32       	cpi	r24, 0x20	; 32
    1f44:	9f 07       	cpc	r25, r31
    1f46:	48 f4       	brcc	.+18     	; 0x1f5a <main+0x91e>

			UART_enuSendString("DF");
    1f48:	8f e6       	ldi	r24, 0x6F	; 111
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_enuSendString>
			UART_enuSendString("\r\n");
    1f50:	83 e6       	ldi	r24, 0x63	; 99
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_enuSendString>
    1f58:	d7 c0       	rjmp	.+430    	; 0x2108 <main+0xacc>
		}

		else if	   (THUMB Hold && INDEX Hold && MIDDLE Open && RING Open && LITTLE Hold){
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	ed 59       	subi	r30, 0x9D	; 157
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	80 81       	ld	r24, Z
    1f62:	91 81       	ldd	r25, Z+1	; 0x01
    1f64:	23 e0       	ldi	r18, 0x03	; 3
    1f66:	81 32       	cpi	r24, 0x21	; 33
    1f68:	92 07       	cpc	r25, r18
    1f6a:	68 f1       	brcs	.+90     	; 0x1fc6 <main+0x98a>
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	eb 59       	subi	r30, 0x9B	; 155
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	80 81       	ld	r24, Z
    1f74:	91 81       	ldd	r25, Z+1	; 0x01
    1f76:	e3 e0       	ldi	r30, 0x03	; 3
    1f78:	81 32       	cpi	r24, 0x21	; 33
    1f7a:	9e 07       	cpc	r25, r30
    1f7c:	20 f1       	brcs	.+72     	; 0x1fc6 <main+0x98a>
    1f7e:	fe 01       	movw	r30, r28
    1f80:	e9 59       	subi	r30, 0x99	; 153
    1f82:	ff 4f       	sbci	r31, 0xFF	; 255
    1f84:	80 81       	ld	r24, Z
    1f86:	91 81       	ldd	r25, Z+1	; 0x01
    1f88:	f3 e0       	ldi	r31, 0x03	; 3
    1f8a:	80 32       	cpi	r24, 0x20	; 32
    1f8c:	9f 07       	cpc	r25, r31
    1f8e:	d8 f4       	brcc	.+54     	; 0x1fc6 <main+0x98a>
    1f90:	fe 01       	movw	r30, r28
    1f92:	e7 59       	subi	r30, 0x97	; 151
    1f94:	ff 4f       	sbci	r31, 0xFF	; 255
    1f96:	80 81       	ld	r24, Z
    1f98:	91 81       	ldd	r25, Z+1	; 0x01
    1f9a:	23 e0       	ldi	r18, 0x03	; 3
    1f9c:	80 32       	cpi	r24, 0x20	; 32
    1f9e:	92 07       	cpc	r25, r18
    1fa0:	90 f4       	brcc	.+36     	; 0x1fc6 <main+0x98a>
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	e5 59       	subi	r30, 0x95	; 149
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	80 81       	ld	r24, Z
    1faa:	91 81       	ldd	r25, Z+1	; 0x01
    1fac:	e3 e0       	ldi	r30, 0x03	; 3
    1fae:	81 32       	cpi	r24, 0x21	; 33
    1fb0:	9e 07       	cpc	r25, r30
    1fb2:	48 f0       	brcs	.+18     	; 0x1fc6 <main+0x98a>

			UART_enuSendString("DB");
    1fb4:	82 e7       	ldi	r24, 0x72	; 114
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_enuSendString>
			UART_enuSendString("\r\n");
    1fbc:	83 e6       	ldi	r24, 0x63	; 99
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_enuSendString>
    1fc4:	a1 c0       	rjmp	.+322    	; 0x2108 <main+0xacc>

		}
		else if	   (THUMB Hold && INDEX Hold && MIDDLE Open && RING Open && LITTLE Open){
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	ed 59       	subi	r30, 0x9D	; 157
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	80 81       	ld	r24, Z
    1fce:	91 81       	ldd	r25, Z+1	; 0x01
    1fd0:	f3 e0       	ldi	r31, 0x03	; 3
    1fd2:	81 32       	cpi	r24, 0x21	; 33
    1fd4:	9f 07       	cpc	r25, r31
    1fd6:	68 f1       	brcs	.+90     	; 0x2032 <main+0x9f6>
    1fd8:	fe 01       	movw	r30, r28
    1fda:	eb 59       	subi	r30, 0x9B	; 155
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	80 81       	ld	r24, Z
    1fe0:	91 81       	ldd	r25, Z+1	; 0x01
    1fe2:	23 e0       	ldi	r18, 0x03	; 3
    1fe4:	81 32       	cpi	r24, 0x21	; 33
    1fe6:	92 07       	cpc	r25, r18
    1fe8:	20 f1       	brcs	.+72     	; 0x2032 <main+0x9f6>
    1fea:	fe 01       	movw	r30, r28
    1fec:	e9 59       	subi	r30, 0x99	; 153
    1fee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff0:	80 81       	ld	r24, Z
    1ff2:	91 81       	ldd	r25, Z+1	; 0x01
    1ff4:	e3 e0       	ldi	r30, 0x03	; 3
    1ff6:	80 32       	cpi	r24, 0x20	; 32
    1ff8:	9e 07       	cpc	r25, r30
    1ffa:	d8 f4       	brcc	.+54     	; 0x2032 <main+0x9f6>
    1ffc:	fe 01       	movw	r30, r28
    1ffe:	e7 59       	subi	r30, 0x97	; 151
    2000:	ff 4f       	sbci	r31, 0xFF	; 255
    2002:	80 81       	ld	r24, Z
    2004:	91 81       	ldd	r25, Z+1	; 0x01
    2006:	f3 e0       	ldi	r31, 0x03	; 3
    2008:	80 32       	cpi	r24, 0x20	; 32
    200a:	9f 07       	cpc	r25, r31
    200c:	90 f4       	brcc	.+36     	; 0x2032 <main+0x9f6>
    200e:	fe 01       	movw	r30, r28
    2010:	e5 59       	subi	r30, 0x95	; 149
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	80 81       	ld	r24, Z
    2016:	91 81       	ldd	r25, Z+1	; 0x01
    2018:	23 e0       	ldi	r18, 0x03	; 3
    201a:	80 32       	cpi	r24, 0x20	; 32
    201c:	92 07       	cpc	r25, r18
    201e:	48 f4       	brcc	.+18     	; 0x2032 <main+0x9f6>

			UART_enuSendString("DL");
    2020:	85 e7       	ldi	r24, 0x75	; 117
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_enuSendString>
			UART_enuSendString("\r\n");
    2028:	83 e6       	ldi	r24, 0x63	; 99
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_enuSendString>
    2030:	6b c0       	rjmp	.+214    	; 0x2108 <main+0xacc>
		}
		else if	   (THUMB Hold && INDEX Open && MIDDLE Open && RING Open && LITTLE Hold){
    2032:	fe 01       	movw	r30, r28
    2034:	ed 59       	subi	r30, 0x9D	; 157
    2036:	ff 4f       	sbci	r31, 0xFF	; 255
    2038:	80 81       	ld	r24, Z
    203a:	91 81       	ldd	r25, Z+1	; 0x01
    203c:	e3 e0       	ldi	r30, 0x03	; 3
    203e:	81 32       	cpi	r24, 0x21	; 33
    2040:	9e 07       	cpc	r25, r30
    2042:	68 f1       	brcs	.+90     	; 0x209e <main+0xa62>
    2044:	fe 01       	movw	r30, r28
    2046:	eb 59       	subi	r30, 0x9B	; 155
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	80 81       	ld	r24, Z
    204c:	91 81       	ldd	r25, Z+1	; 0x01
    204e:	f3 e0       	ldi	r31, 0x03	; 3
    2050:	80 32       	cpi	r24, 0x20	; 32
    2052:	9f 07       	cpc	r25, r31
    2054:	20 f5       	brcc	.+72     	; 0x209e <main+0xa62>
    2056:	fe 01       	movw	r30, r28
    2058:	e9 59       	subi	r30, 0x99	; 153
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	80 81       	ld	r24, Z
    205e:	91 81       	ldd	r25, Z+1	; 0x01
    2060:	23 e0       	ldi	r18, 0x03	; 3
    2062:	80 32       	cpi	r24, 0x20	; 32
    2064:	92 07       	cpc	r25, r18
    2066:	d8 f4       	brcc	.+54     	; 0x209e <main+0xa62>
    2068:	fe 01       	movw	r30, r28
    206a:	e7 59       	subi	r30, 0x97	; 151
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	80 81       	ld	r24, Z
    2070:	91 81       	ldd	r25, Z+1	; 0x01
    2072:	e3 e0       	ldi	r30, 0x03	; 3
    2074:	80 32       	cpi	r24, 0x20	; 32
    2076:	9e 07       	cpc	r25, r30
    2078:	90 f4       	brcc	.+36     	; 0x209e <main+0xa62>
    207a:	fe 01       	movw	r30, r28
    207c:	e5 59       	subi	r30, 0x95	; 149
    207e:	ff 4f       	sbci	r31, 0xFF	; 255
    2080:	80 81       	ld	r24, Z
    2082:	91 81       	ldd	r25, Z+1	; 0x01
    2084:	f3 e0       	ldi	r31, 0x03	; 3
    2086:	81 32       	cpi	r24, 0x21	; 33
    2088:	9f 07       	cpc	r25, r31
    208a:	48 f0       	brcs	.+18     	; 0x209e <main+0xa62>

			UART_enuSendString("DR");
    208c:	88 e7       	ldi	r24, 0x78	; 120
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_enuSendString>
			UART_enuSendString("\r\n");
    2094:	83 e6       	ldi	r24, 0x63	; 99
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_enuSendString>
    209c:	35 c0       	rjmp	.+106    	; 0x2108 <main+0xacc>
		}
		else if	   (THUMB Open && INDEX Open && MIDDLE Open && RING Open && LITTLE Open){
    209e:	fe 01       	movw	r30, r28
    20a0:	ed 59       	subi	r30, 0x9D	; 157
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	80 81       	ld	r24, Z
    20a6:	91 81       	ldd	r25, Z+1	; 0x01
    20a8:	23 e0       	ldi	r18, 0x03	; 3
    20aa:	80 32       	cpi	r24, 0x20	; 32
    20ac:	92 07       	cpc	r25, r18
    20ae:	60 f5       	brcc	.+88     	; 0x2108 <main+0xacc>
    20b0:	fe 01       	movw	r30, r28
    20b2:	eb 59       	subi	r30, 0x9B	; 155
    20b4:	ff 4f       	sbci	r31, 0xFF	; 255
    20b6:	80 81       	ld	r24, Z
    20b8:	91 81       	ldd	r25, Z+1	; 0x01
    20ba:	e3 e0       	ldi	r30, 0x03	; 3
    20bc:	80 32       	cpi	r24, 0x20	; 32
    20be:	9e 07       	cpc	r25, r30
    20c0:	18 f5       	brcc	.+70     	; 0x2108 <main+0xacc>
    20c2:	fe 01       	movw	r30, r28
    20c4:	e9 59       	subi	r30, 0x99	; 153
    20c6:	ff 4f       	sbci	r31, 0xFF	; 255
    20c8:	80 81       	ld	r24, Z
    20ca:	91 81       	ldd	r25, Z+1	; 0x01
    20cc:	f3 e0       	ldi	r31, 0x03	; 3
    20ce:	80 32       	cpi	r24, 0x20	; 32
    20d0:	9f 07       	cpc	r25, r31
    20d2:	d0 f4       	brcc	.+52     	; 0x2108 <main+0xacc>
    20d4:	fe 01       	movw	r30, r28
    20d6:	e7 59       	subi	r30, 0x97	; 151
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	80 81       	ld	r24, Z
    20dc:	91 81       	ldd	r25, Z+1	; 0x01
    20de:	23 e0       	ldi	r18, 0x03	; 3
    20e0:	80 32       	cpi	r24, 0x20	; 32
    20e2:	92 07       	cpc	r25, r18
    20e4:	88 f4       	brcc	.+34     	; 0x2108 <main+0xacc>
    20e6:	fe 01       	movw	r30, r28
    20e8:	e5 59       	subi	r30, 0x95	; 149
    20ea:	ff 4f       	sbci	r31, 0xFF	; 255
    20ec:	80 81       	ld	r24, Z
    20ee:	91 81       	ldd	r25, Z+1	; 0x01
    20f0:	e3 e0       	ldi	r30, 0x03	; 3
    20f2:	80 32       	cpi	r24, 0x20	; 32
    20f4:	9e 07       	cpc	r25, r30
    20f6:	40 f4       	brcc	.+16     	; 0x2108 <main+0xacc>

			UART_enuSendString("ST");
    20f8:	8b e7       	ldi	r24, 0x7B	; 123
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_enuSendString>
			UART_enuSendString("\r\n");
    2100:	83 e6       	ldi	r24, 0x63	; 99
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_enuSendString>
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	aa e7       	ldi	r26, 0x7A	; 122
    210e:	b4 e4       	ldi	r27, 0x44	; 68
    2110:	8b 87       	std	Y+11, r24	; 0x0b
    2112:	9c 87       	std	Y+12, r25	; 0x0c
    2114:	ad 87       	std	Y+13, r26	; 0x0d
    2116:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2118:	6b 85       	ldd	r22, Y+11	; 0x0b
    211a:	7c 85       	ldd	r23, Y+12	; 0x0c
    211c:	8d 85       	ldd	r24, Y+13	; 0x0d
    211e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	4a e7       	ldi	r20, 0x7A	; 122
    2126:	55 e4       	ldi	r21, 0x45	; 69
    2128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	8f 83       	std	Y+7, r24	; 0x07
    2132:	98 87       	std	Y+8, r25	; 0x08
    2134:	a9 87       	std	Y+9, r26	; 0x09
    2136:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2138:	6f 81       	ldd	r22, Y+7	; 0x07
    213a:	78 85       	ldd	r23, Y+8	; 0x08
    213c:	89 85       	ldd	r24, Y+9	; 0x09
    213e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	40 e8       	ldi	r20, 0x80	; 128
    2146:	5f e3       	ldi	r21, 0x3F	; 63
    2148:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    214c:	88 23       	and	r24, r24
    214e:	2c f4       	brge	.+10     	; 0x215a <main+0xb1e>
		__ticks = 1;
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	9e 83       	std	Y+6, r25	; 0x06
    2156:	8d 83       	std	Y+5, r24	; 0x05
    2158:	3f c0       	rjmp	.+126    	; 0x21d8 <main+0xb9c>
	else if (__tmp > 65535)
    215a:	6f 81       	ldd	r22, Y+7	; 0x07
    215c:	78 85       	ldd	r23, Y+8	; 0x08
    215e:	89 85       	ldd	r24, Y+9	; 0x09
    2160:	9a 85       	ldd	r25, Y+10	; 0x0a
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	3f ef       	ldi	r19, 0xFF	; 255
    2166:	4f e7       	ldi	r20, 0x7F	; 127
    2168:	57 e4       	ldi	r21, 0x47	; 71
    216a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    216e:	18 16       	cp	r1, r24
    2170:	4c f5       	brge	.+82     	; 0x21c4 <main+0xb88>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2172:	6b 85       	ldd	r22, Y+11	; 0x0b
    2174:	7c 85       	ldd	r23, Y+12	; 0x0c
    2176:	8d 85       	ldd	r24, Y+13	; 0x0d
    2178:	9e 85       	ldd	r25, Y+14	; 0x0e
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	40 e2       	ldi	r20, 0x20	; 32
    2180:	51 e4       	ldi	r21, 0x41	; 65
    2182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	bc 01       	movw	r22, r24
    218c:	cd 01       	movw	r24, r26
    218e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	9e 83       	std	Y+6, r25	; 0x06
    2198:	8d 83       	std	Y+5, r24	; 0x05
    219a:	0f c0       	rjmp	.+30     	; 0x21ba <main+0xb7e>
    219c:	80 e9       	ldi	r24, 0x90	; 144
    219e:	91 e0       	ldi	r25, 0x01	; 1
    21a0:	9c 83       	std	Y+4, r25	; 0x04
    21a2:	8b 83       	std	Y+3, r24	; 0x03
    21a4:	8b 81       	ldd	r24, Y+3	; 0x03
    21a6:	9c 81       	ldd	r25, Y+4	; 0x04
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	f1 f7       	brne	.-4      	; 0x21a8 <main+0xb6c>
    21ac:	9c 83       	std	Y+4, r25	; 0x04
    21ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b0:	8d 81       	ldd	r24, Y+5	; 0x05
    21b2:	9e 81       	ldd	r25, Y+6	; 0x06
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	9e 83       	std	Y+6, r25	; 0x06
    21b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ba:	8d 81       	ldd	r24, Y+5	; 0x05
    21bc:	9e 81       	ldd	r25, Y+6	; 0x06
    21be:	00 97       	sbiw	r24, 0x00	; 0
    21c0:	69 f7       	brne	.-38     	; 0x219c <main+0xb60>
    21c2:	54 ca       	rjmp	.-2904   	; 0x166c <main+0x30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c4:	6f 81       	ldd	r22, Y+7	; 0x07
    21c6:	78 85       	ldd	r23, Y+8	; 0x08
    21c8:	89 85       	ldd	r24, Y+9	; 0x09
    21ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    21cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	9e 83       	std	Y+6, r25	; 0x06
    21d6:	8d 83       	std	Y+5, r24	; 0x05
    21d8:	8d 81       	ldd	r24, Y+5	; 0x05
    21da:	9e 81       	ldd	r25, Y+6	; 0x06
    21dc:	9a 83       	std	Y+2, r25	; 0x02
    21de:	89 83       	std	Y+1, r24	; 0x01
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	9a 81       	ldd	r25, Y+2	; 0x02
    21e4:	01 97       	sbiw	r24, 0x01	; 1
    21e6:	f1 f7       	brne	.-4      	; 0x21e4 <main+0xba8>
    21e8:	9a 83       	std	Y+2, r25	; 0x02
    21ea:	89 83       	std	Y+1, r24	; 0x01
    21ec:	3f ca       	rjmp	.-2946   	; 0x166c <main+0x30>

000021ee <__prologue_saves__>:
    21ee:	2f 92       	push	r2
    21f0:	3f 92       	push	r3
    21f2:	4f 92       	push	r4
    21f4:	5f 92       	push	r5
    21f6:	6f 92       	push	r6
    21f8:	7f 92       	push	r7
    21fa:	8f 92       	push	r8
    21fc:	9f 92       	push	r9
    21fe:	af 92       	push	r10
    2200:	bf 92       	push	r11
    2202:	cf 92       	push	r12
    2204:	df 92       	push	r13
    2206:	ef 92       	push	r14
    2208:	ff 92       	push	r15
    220a:	0f 93       	push	r16
    220c:	1f 93       	push	r17
    220e:	cf 93       	push	r28
    2210:	df 93       	push	r29
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	ca 1b       	sub	r28, r26
    2218:	db 0b       	sbc	r29, r27
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	de bf       	out	0x3e, r29	; 62
    2220:	0f be       	out	0x3f, r0	; 63
    2222:	cd bf       	out	0x3d, r28	; 61
    2224:	09 94       	ijmp

00002226 <__epilogue_restores__>:
    2226:	2a 88       	ldd	r2, Y+18	; 0x12
    2228:	39 88       	ldd	r3, Y+17	; 0x11
    222a:	48 88       	ldd	r4, Y+16	; 0x10
    222c:	5f 84       	ldd	r5, Y+15	; 0x0f
    222e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2230:	7d 84       	ldd	r7, Y+13	; 0x0d
    2232:	8c 84       	ldd	r8, Y+12	; 0x0c
    2234:	9b 84       	ldd	r9, Y+11	; 0x0b
    2236:	aa 84       	ldd	r10, Y+10	; 0x0a
    2238:	b9 84       	ldd	r11, Y+9	; 0x09
    223a:	c8 84       	ldd	r12, Y+8	; 0x08
    223c:	df 80       	ldd	r13, Y+7	; 0x07
    223e:	ee 80       	ldd	r14, Y+6	; 0x06
    2240:	fd 80       	ldd	r15, Y+5	; 0x05
    2242:	0c 81       	ldd	r16, Y+4	; 0x04
    2244:	1b 81       	ldd	r17, Y+3	; 0x03
    2246:	aa 81       	ldd	r26, Y+2	; 0x02
    2248:	b9 81       	ldd	r27, Y+1	; 0x01
    224a:	ce 0f       	add	r28, r30
    224c:	d1 1d       	adc	r29, r1
    224e:	0f b6       	in	r0, 0x3f	; 63
    2250:	f8 94       	cli
    2252:	de bf       	out	0x3e, r29	; 62
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	cd bf       	out	0x3d, r28	; 61
    2258:	ed 01       	movw	r28, r26
    225a:	08 95       	ret

0000225c <_exit>:
    225c:	f8 94       	cli

0000225e <__stop_program>:
    225e:	ff cf       	rjmp	.-2      	; 0x225e <__stop_program>
