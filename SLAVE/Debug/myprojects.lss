
myprojects.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000aa  00800060  00003a26  00003aba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  0080010a  0080010a  00003b64  2**0
                  ALLOC
  3 .stab         00005064  00000000  00000000  00003b64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001cdc  00000000  00000000  00008bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a8a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000a9e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000ab54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000c79d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d688  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e438  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e598  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000e825  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000eff3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8c 0c 	jmp	0x1918	; 0x1918 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 f2 07 	jmp	0xfe4	; 0xfe4 <__vector_10>
      2c:	0c 94 8e 07 	jmp	0xf1c	; 0xf1c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e2       	ldi	r30, 0x26	; 38
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 30       	cpi	r26, 0x0A	; 10
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e0       	ldi	r26, 0x0A	; 10
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 31       	cpi	r26, 0x1F	; 31
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 77 1a 	call	0x34ee	; 0x34ee <main>
      8a:	0c 94 11 1d 	jmp	0x3a22	; 0x3a22 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d1 1c 	jmp	0x39a2	; 0x39a2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 ee       	ldi	r26, 0xE7	; 231
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ed 1c 	jmp	0x39da	; 0x39da <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 dd 1c 	jmp	0x39ba	; 0x39ba <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f9 1c 	jmp	0x39f2	; 0x39f2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 dd 1c 	jmp	0x39ba	; 0x39ba <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f9 1c 	jmp	0x39f2	; 0x39f2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d1 1c 	jmp	0x39a2	; 0x39a2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 ee       	ldi	r24, 0xE7	; 231
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ed 1c 	jmp	0x39da	; 0x39da <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 dd 1c 	jmp	0x39ba	; 0x39ba <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f9 1c 	jmp	0x39f2	; 0x39f2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 dd 1c 	jmp	0x39ba	; 0x39ba <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f9 1c 	jmp	0x39f2	; 0x39f2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 dd 1c 	jmp	0x39ba	; 0x39ba <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f9 1c 	jmp	0x39f2	; 0x39f2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e1 1c 	jmp	0x39c2	; 0x39c2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fd 1c 	jmp	0x39fa	; 0x39fa <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_enuInit>:
#include "UART_config.h"



ES_t UART_enuInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_enuInit+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <UART_enuInit+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_enuErrorState = ES_NOK;
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	8c 83       	std	Y+4, r24	; 0x04

#if SPEED_MODE == NORMAL
	UCSRA &=~(1<<1);
     b56:	ab e2       	ldi	r26, 0x2B	; 43
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	eb e2       	ldi	r30, 0x2B	; 43
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	8d 7f       	andi	r24, 0xFD	; 253
     b62:	8c 93       	st	X, r24
#endif

#if UART_MODE == TRANSCIEVER
	UCSRB |=(3<<3);
#elif UART_MODE == RECIEVER
	UCSRB |=(1<<4);
     b64:	aa e2       	ldi	r26, 0x2A	; 42
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	ea e2       	ldi	r30, 0x2A	; 42
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	80 61       	ori	r24, 0x10	; 16
     b70:	8c 93       	st	X, r24
#elif UART_MODE == TRANSMITTER
	UCSRB |=(1<<3);
#endif

	u8 Local_u8UCSRC=0;
     b72:	1b 82       	std	Y+3, r1	; 0x03
#if DATA_LEN == EIGHT
	Local_u8UCSRC |= (3<<1);
     b74:	8b 81       	ldd	r24, Y+3	; 0x03
     b76:	86 60       	ori	r24, 0x06	; 6
     b78:	8b 83       	std	Y+3, r24	; 0x03
#endif

#if PARITY_STATE == NO_PARITY
	Local_u8UCSRC &= ~ (3<<4);
     b7a:	8b 81       	ldd	r24, Y+3	; 0x03
     b7c:	8f 7c       	andi	r24, 0xCF	; 207
     b7e:	8b 83       	std	Y+3, r24	; 0x03
#endif

#if STOP_STATE == ONE_STOP_BIT
	Local_u8UCSRC |= (1<<3);
     b80:	8b 81       	ldd	r24, Y+3	; 0x03
     b82:	88 60       	ori	r24, 0x08	; 8
     b84:	8b 83       	std	Y+3, r24	; 0x03
#endif

#if CLOCK_MODE == ASYCH
	Local_u8UCSRC &=~(1<<6);
     b86:	8b 81       	ldd	r24, Y+3	; 0x03
     b88:	8f 7b       	andi	r24, 0xBF	; 191
     b8a:	8b 83       	std	Y+3, r24	; 0x03
#endif

	Local_u8UCSRC |=(1<<7);
     b8c:	8b 81       	ldd	r24, Y+3	; 0x03
     b8e:	80 68       	ori	r24, 0x80	; 128
     b90:	8b 83       	std	Y+3, r24	; 0x03
	UCSRC = Local_u8UCSRC;
     b92:	e0 e4       	ldi	r30, 0x40	; 64
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	8b 81       	ldd	r24, Y+3	; 0x03
     b98:	80 83       	st	Z, r24


	u16 Local_u16UBRR = BUAD(BAUDRATE);
     b9a:	87 e6       	ldi	r24, 0x67	; 103
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	9a 83       	std	Y+2, r25	; 0x02
     ba0:	89 83       	std	Y+1, r24	; 0x01

	Local_u16UBRR &=~(1<<15);
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	9a 81       	ldd	r25, Y+2	; 0x02
     ba6:	9f 77       	andi	r25, 0x7F	; 127
     ba8:	9a 83       	std	Y+2, r25	; 0x02
     baa:	89 83       	std	Y+1, r24	; 0x01

	UBRRL  = (u8)Local_u16UBRR;
     bac:	e9 e2       	ldi	r30, 0x29	; 41
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	89 81       	ldd	r24, Y+1	; 0x01
     bb2:	80 83       	st	Z, r24
	UBRRH  = (Local_u16UBRR>>8);
     bb4:	e0 e4       	ldi	r30, 0x40	; 64
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	9a 81       	ldd	r25, Y+2	; 0x02
     bbc:	89 2f       	mov	r24, r25
     bbe:	99 27       	eor	r25, r25
     bc0:	80 83       	st	Z, r24



	return Local_enuErrorState;
     bc2:	8c 81       	ldd	r24, Y+4	; 0x04
}
     bc4:	0f 90       	pop	r0
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	0f 90       	pop	r0
     bcc:	cf 91       	pop	r28
     bce:	df 91       	pop	r29
     bd0:	08 95       	ret

00000bd2 <UART_enuSendChar>:

ES_t UART_enuSendChar(u8 Copy_u8Data)
{
     bd2:	df 93       	push	r29
     bd4:	cf 93       	push	r28
     bd6:	00 d0       	rcall	.+0      	; 0xbd8 <UART_enuSendChar+0x6>
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
     bdc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	89 83       	std	Y+1, r24	; 0x01

	while (!((UCSRA>>UDRE)&1));
     be2:	eb e2       	ldi	r30, 0x2B	; 43
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	82 95       	swap	r24
     bea:	86 95       	lsr	r24
     bec:	87 70       	andi	r24, 0x07	; 7
     bee:	88 2f       	mov	r24, r24
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	81 70       	andi	r24, 0x01	; 1
     bf4:	90 70       	andi	r25, 0x00	; 0
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	a1 f3       	breq	.-24     	; 0xbe2 <UART_enuSendChar+0x10>
	UDR = Copy_u8Data;
     bfa:	ec e2       	ldi	r30, 0x2C	; 44
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	8a 81       	ldd	r24, Y+2	; 0x02
     c00:	80 83       	st	Z, r24
	 * UDR = Copy_u8Data;
	 * while (!((UCSRA>>TXC)&1));
	 * UCSRA |= (1<<TXC);
	 */

	return Local_enuErrorState;
     c02:	89 81       	ldd	r24, Y+1	; 0x01
}
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	cf 91       	pop	r28
     c0a:	df 91       	pop	r29
     c0c:	08 95       	ret

00000c0e <UART_enuRecieveChar>:

ES_t UART_enuRecieveChar(u8 *Copy_pu8Data)
{
     c0e:	df 93       	push	r29
     c10:	cf 93       	push	r28
     c12:	00 d0       	rcall	.+0      	; 0xc14 <UART_enuRecieveChar+0x6>
     c14:	0f 92       	push	r0
     c16:	cd b7       	in	r28, 0x3d	; 61
     c18:	de b7       	in	r29, 0x3e	; 62
     c1a:	9b 83       	std	Y+3, r25	; 0x03
     c1c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	89 83       	std	Y+1, r24	; 0x01

	while (!((UCSRA>>RXC)&1));
     c22:	eb e2       	ldi	r30, 0x2B	; 43
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	88 23       	and	r24, r24
     c2a:	dc f7       	brge	.-10     	; 0xc22 <UART_enuRecieveChar+0x14>
	*Copy_pu8Data = UDR;
     c2c:	ec e2       	ldi	r30, 0x2C	; 44
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	ea 81       	ldd	r30, Y+2	; 0x02
     c34:	fb 81       	ldd	r31, Y+3	; 0x03
     c36:	80 83       	st	Z, r24

	return Local_enuErrorState;
     c38:	89 81       	ldd	r24, Y+1	; 0x01
}
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	cf 91       	pop	r28
     c42:	df 91       	pop	r29
     c44:	08 95       	ret

00000c46 <UART_enuSendString>:

ES_t UART_enuSendString(const char* Copy_pcData)
{
     c46:	df 93       	push	r29
     c48:	cf 93       	push	r28
     c4a:	00 d0       	rcall	.+0      	; 0xc4c <UART_enuSendString+0x6>
     c4c:	0f 92       	push	r0
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
     c52:	9b 83       	std	Y+3, r25	; 0x03
     c54:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	89 83       	std	Y+1, r24	; 0x01
     c5a:	17 c0       	rjmp	.+46     	; 0xc8a <UART_enuSendString+0x44>

	while (*Copy_pcData != 0)
	{
		while (!((UCSRA>>UDRE)&1));
     c5c:	eb e2       	ldi	r30, 0x2B	; 43
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	82 95       	swap	r24
     c64:	86 95       	lsr	r24
     c66:	87 70       	andi	r24, 0x07	; 7
     c68:	88 2f       	mov	r24, r24
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	81 70       	andi	r24, 0x01	; 1
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	a1 f3       	breq	.-24     	; 0xc5c <UART_enuSendString+0x16>
		UDR = *Copy_pcData;
     c74:	ac e2       	ldi	r26, 0x2C	; 44
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	ea 81       	ldd	r30, Y+2	; 0x02
     c7a:	fb 81       	ldd	r31, Y+3	; 0x03
     c7c:	80 81       	ld	r24, Z
     c7e:	8c 93       	st	X, r24
		Copy_pcData++;
     c80:	8a 81       	ldd	r24, Y+2	; 0x02
     c82:	9b 81       	ldd	r25, Y+3	; 0x03
     c84:	01 96       	adiw	r24, 0x01	; 1
     c86:	9b 83       	std	Y+3, r25	; 0x03
     c88:	8a 83       	std	Y+2, r24	; 0x02

ES_t UART_enuSendString(const char* Copy_pcData)
{
	ES_t Local_enuErrorState = ES_NOK;

	while (*Copy_pcData != 0)
     c8a:	ea 81       	ldd	r30, Y+2	; 0x02
     c8c:	fb 81       	ldd	r31, Y+3	; 0x03
     c8e:	80 81       	ld	r24, Z
     c90:	88 23       	and	r24, r24
     c92:	21 f7       	brne	.-56     	; 0xc5c <UART_enuSendString+0x16>
		while (!((UCSRA>>UDRE)&1));
		UDR = *Copy_pcData;
		Copy_pcData++;
	}

	return Local_enuErrorState;
     c94:	89 81       	ldd	r24, Y+1	; 0x01
}
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	cf 91       	pop	r28
     c9e:	df 91       	pop	r29
     ca0:	08 95       	ret

00000ca2 <UART_enuRecieveString>:

/*ahmed*/
ES_t UART_enuRecieveString(char * Copy_pcData)
{
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <UART_enuRecieveString+0x6>
     ca8:	00 d0       	rcall	.+0      	; 0xcaa <UART_enuRecieveString+0x8>
     caa:	0f 92       	push	r0
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
     cb0:	9d 83       	std	Y+5, r25	; 0x05
     cb2:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	8b 83       	std	Y+3, r24	; 0x03

	u8 i=0;
     cb8:	1a 82       	std	Y+2, r1	; 0x02
	while (!((UCSRA>>RXC)&1));
     cba:	eb e2       	ldi	r30, 0x2B	; 43
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	88 23       	and	r24, r24
     cc2:	dc f7       	brge	.-10     	; 0xcba <UART_enuRecieveString+0x18>
	char RX = UDR;
     cc4:	ec e2       	ldi	r30, 0x2C	; 44
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	89 83       	std	Y+1, r24	; 0x01

	while (!((UCSRA>>UDRE)&1));
     ccc:	eb e2       	ldi	r30, 0x2B	; 43
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	82 95       	swap	r24
     cd4:	86 95       	lsr	r24
     cd6:	87 70       	andi	r24, 0x07	; 7
     cd8:	88 2f       	mov	r24, r24
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	81 70       	andi	r24, 0x01	; 1
     cde:	90 70       	andi	r25, 0x00	; 0
     ce0:	00 97       	sbiw	r24, 0x00	; 0
     ce2:	a1 f3       	breq	.-24     	; 0xccc <UART_enuRecieveString+0x2a>
		UDR = RX;
     ce4:	ec e2       	ldi	r30, 0x2C	; 44
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	80 83       	st	Z, r24
     cec:	26 c0       	rjmp	.+76     	; 0xd3a <UART_enuRecieveString+0x98>

	while (RX != '\r' && RX != '\n' && RX != '\0')
	{
		/*while (!((UCSRA>>UDRE)&1));
		UDR = RX;*/
		Copy_pcData[i++]= RX;
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	8c 81       	ldd	r24, Y+4	; 0x04
     cf6:	9d 81       	ldd	r25, Y+5	; 0x05
     cf8:	fc 01       	movw	r30, r24
     cfa:	e2 0f       	add	r30, r18
     cfc:	f3 1f       	adc	r31, r19
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	80 83       	st	Z, r24
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	8f 5f       	subi	r24, 0xFF	; 255
     d06:	8a 83       	std	Y+2, r24	; 0x02
		while (!((UCSRA>>RXC)&1));
     d08:	eb e2       	ldi	r30, 0x2B	; 43
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	88 23       	and	r24, r24
     d10:	dc f7       	brge	.-10     	; 0xd08 <UART_enuRecieveString+0x66>
		RX = UDR;
     d12:	ec e2       	ldi	r30, 0x2C	; 44
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	89 83       	std	Y+1, r24	; 0x01

		while (!((UCSRA>>UDRE)&1));
     d1a:	eb e2       	ldi	r30, 0x2B	; 43
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	82 95       	swap	r24
     d22:	86 95       	lsr	r24
     d24:	87 70       	andi	r24, 0x07	; 7
     d26:	88 2f       	mov	r24, r24
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	81 70       	andi	r24, 0x01	; 1
     d2c:	90 70       	andi	r25, 0x00	; 0
     d2e:	00 97       	sbiw	r24, 0x00	; 0
     d30:	a1 f3       	breq	.-24     	; 0xd1a <UART_enuRecieveString+0x78>
			UDR = RX;
     d32:	ec e2       	ldi	r30, 0x2C	; 44
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	80 83       	st	Z, r24
	char RX = UDR;

	while (!((UCSRA>>UDRE)&1));
		UDR = RX;

	while (RX != '\r' && RX != '\n' && RX != '\0')
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	8d 30       	cpi	r24, 0x0D	; 13
     d3e:	31 f0       	breq	.+12     	; 0xd4c <UART_enuRecieveString+0xaa>
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	8a 30       	cpi	r24, 0x0A	; 10
     d44:	19 f0       	breq	.+6      	; 0xd4c <UART_enuRecieveString+0xaa>
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	88 23       	and	r24, r24
     d4a:	89 f6       	brne	.-94     	; 0xcee <UART_enuRecieveString+0x4c>
		RX = UDR;

		while (!((UCSRA>>UDRE)&1));
			UDR = RX;
	}
	Copy_pcData[i]= '\0';
     d4c:	8a 81       	ldd	r24, Y+2	; 0x02
     d4e:	28 2f       	mov	r18, r24
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	8c 81       	ldd	r24, Y+4	; 0x04
     d54:	9d 81       	ldd	r25, Y+5	; 0x05
     d56:	fc 01       	movw	r30, r24
     d58:	e2 0f       	add	r30, r18
     d5a:	f3 1f       	adc	r31, r19
     d5c:	10 82       	st	Z, r1


	return Local_enuErrorState;
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03

}
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <TIMER_enuInit>:
u8  TIMER_0_u32Rem=0;
u32 TIMER0_u32CompareMatch= 0 ;

void(*callback)(void) =	NULL;

ES_t TIMER_enuInit(void){
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	0f 92       	push	r0
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState =ES_NOK;
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &=~(1<<6);
	//to enable overflow interrupt
	SREG |=(1<<7);
	TIMSK |=(1<<0);
#elif TIMER0_MODE == CTC_MODE
	TCCR0 |=(1<<3);
     d7e:	a3 e5       	ldi	r26, 0x53	; 83
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e3 e5       	ldi	r30, 0x53	; 83
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	88 60       	ori	r24, 0x08	; 8
     d8a:	8c 93       	st	X, r24
	TCCR0 &=~(1<<6);
     d8c:	a3 e5       	ldi	r26, 0x53	; 83
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e3 e5       	ldi	r30, 0x53	; 83
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	8f 7b       	andi	r24, 0xBF	; 191
     d98:	8c 93       	st	X, r24
	//to enable Compare Match Interrupt
	SREG |=(1<<7);
     d9a:	af e5       	ldi	r26, 0x5F	; 95
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	ef e5       	ldi	r30, 0x5F	; 95
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	80 68       	ori	r24, 0x80	; 128
     da6:	8c 93       	st	X, r24
	TIMSK |=(1<<1);
     da8:	a9 e5       	ldi	r26, 0x59	; 89
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	e9 e5       	ldi	r30, 0x59	; 89
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	82 60       	ori	r24, 0x02	; 2
     db4:	8c 93       	st	X, r24
#endif




	return Local_enuErrorState;
     db6:	89 81       	ldd	r24, Y+1	; 0x01

}
     db8:	0f 90       	pop	r0
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	08 95       	ret

00000dc0 <TIMER_enuSetDelay>:
ES_t TIMER_enuSetDelay(u32 Copy_u32ReservedTime){
     dc0:	df 93       	push	r29
     dc2:	cf 93       	push	r28
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
     dc8:	2e 97       	sbiw	r28, 0x0e	; 14
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	f8 94       	cli
     dce:	de bf       	out	0x3e, r29	; 62
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	cd bf       	out	0x3d, r28	; 61
     dd4:	6b 87       	std	Y+11, r22	; 0x0b
     dd6:	7c 87       	std	Y+12, r23	; 0x0c
     dd8:	8d 87       	std	Y+13, r24	; 0x0d
     dda:	9e 87       	std	Y+14, r25	; 0x0e
	ES_t Local_enuErrorState= ES_NOK;
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	8a 87       	std	Y+10, r24	; 0x0a
		if(TIMER_0_u32Rem != 0){
			TCNT0 = 265 - TIMER_0_u32Rem;
			TIMER0_u32OverFlow++;			//to calculate the added ticks in the  Local_u32Rem
		}
#elif TIMER0_MODE == CTC_MODE
		u32 Local_u32TickTime   = TIMER0_PRESCALER / F_OSC;
     de0:	80 e4       	ldi	r24, 0x40	; 64
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	a0 e0       	ldi	r26, 0x00	; 0
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	8e 83       	std	Y+6, r24	; 0x06
     dea:	9f 83       	std	Y+7, r25	; 0x07
     dec:	a8 87       	std	Y+8, r26	; 0x08
     dee:	b9 87       	std	Y+9, r27	; 0x09
		u32 Local_u32TotalTicks = (Copy_u32ReservedTime *1000)/ Local_u32TickTime ;
     df0:	8b 85       	ldd	r24, Y+11	; 0x0b
     df2:	9c 85       	ldd	r25, Y+12	; 0x0c
     df4:	ad 85       	ldd	r26, Y+13	; 0x0d
     df6:	be 85       	ldd	r27, Y+14	; 0x0e
     df8:	28 ee       	ldi	r18, 0xE8	; 232
     dfa:	33 e0       	ldi	r19, 0x03	; 3
     dfc:	40 e0       	ldi	r20, 0x00	; 0
     dfe:	50 e0       	ldi	r21, 0x00	; 0
     e00:	bc 01       	movw	r22, r24
     e02:	cd 01       	movw	r24, r26
     e04:	0e 94 4e 1c 	call	0x389c	; 0x389c <__mulsi3>
     e08:	dc 01       	movw	r26, r24
     e0a:	cb 01       	movw	r24, r22
     e0c:	2e 81       	ldd	r18, Y+6	; 0x06
     e0e:	3f 81       	ldd	r19, Y+7	; 0x07
     e10:	48 85       	ldd	r20, Y+8	; 0x08
     e12:	59 85       	ldd	r21, Y+9	; 0x09
     e14:	bc 01       	movw	r22, r24
     e16:	cd 01       	movw	r24, r26
     e18:	0e 94 80 1c 	call	0x3900	; 0x3900 <__udivmodsi4>
     e1c:	da 01       	movw	r26, r20
     e1e:	c9 01       	movw	r24, r18
     e20:	8a 83       	std	Y+2, r24	; 0x02
     e22:	9b 83       	std	Y+3, r25	; 0x03
     e24:	ac 83       	std	Y+4, r26	; 0x04
     e26:	bd 83       	std	Y+5, r27	; 0x05
		u8  Local_u8DividedNumber = 255;
     e28:	8f ef       	ldi	r24, 0xFF	; 255
     e2a:	89 83       	std	Y+1, r24	; 0x01
     e2c:	03 c0       	rjmp	.+6      	; 0xe34 <TIMER_enuSetDelay+0x74>
		while(Local_u32TotalTicks % Local_u8DividedNumber){
			Local_u8DividedNumber--;
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	81 50       	subi	r24, 0x01	; 1
     e32:	89 83       	std	Y+1, r24	; 0x01
		}
#elif TIMER0_MODE == CTC_MODE
		u32 Local_u32TickTime   = TIMER0_PRESCALER / F_OSC;
		u32 Local_u32TotalTicks = (Copy_u32ReservedTime *1000)/ Local_u32TickTime ;
		u8  Local_u8DividedNumber = 255;
		while(Local_u32TotalTicks % Local_u8DividedNumber){
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	40 e0       	ldi	r20, 0x00	; 0
     e3c:	50 e0       	ldi	r21, 0x00	; 0
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	9b 81       	ldd	r25, Y+3	; 0x03
     e42:	ac 81       	ldd	r26, Y+4	; 0x04
     e44:	bd 81       	ldd	r27, Y+5	; 0x05
     e46:	bc 01       	movw	r22, r24
     e48:	cd 01       	movw	r24, r26
     e4a:	0e 94 80 1c 	call	0x3900	; 0x3900 <__udivmodsi4>
     e4e:	dc 01       	movw	r26, r24
     e50:	cb 01       	movw	r24, r22
     e52:	00 97       	sbiw	r24, 0x00	; 0
     e54:	a1 05       	cpc	r26, r1
     e56:	b1 05       	cpc	r27, r1
     e58:	51 f7       	brne	.-44     	; 0xe2e <TIMER_enuSetDelay+0x6e>
			Local_u8DividedNumber--;
		}
		TIMER0_u32CompareMatch = Local_u32TotalTicks / Local_u8DividedNumber;
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	28 2f       	mov	r18, r24
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	40 e0       	ldi	r20, 0x00	; 0
     e62:	50 e0       	ldi	r21, 0x00	; 0
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	9b 81       	ldd	r25, Y+3	; 0x03
     e68:	ac 81       	ldd	r26, Y+4	; 0x04
     e6a:	bd 81       	ldd	r27, Y+5	; 0x05
     e6c:	bc 01       	movw	r22, r24
     e6e:	cd 01       	movw	r24, r26
     e70:	0e 94 80 1c 	call	0x3900	; 0x3900 <__udivmodsi4>
     e74:	da 01       	movw	r26, r20
     e76:	c9 01       	movw	r24, r18
     e78:	80 93 0f 01 	sts	0x010F, r24
     e7c:	90 93 10 01 	sts	0x0110, r25
     e80:	a0 93 11 01 	sts	0x0111, r26
     e84:	b0 93 12 01 	sts	0x0112, r27
		OCR0 = Local_u8DividedNumber-1;
     e88:	ec e5       	ldi	r30, 0x5C	; 92
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	81 50       	subi	r24, 0x01	; 1
     e90:	80 83       	st	Z, r24

#endif

		Local_enuErrorState= ES_OK;
     e92:	1a 86       	std	Y+10, r1	; 0x0a
	    return Local_enuErrorState;
     e94:	8a 85       	ldd	r24, Y+10	; 0x0a
}
     e96:	2e 96       	adiw	r28, 0x0e	; 14
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	de bf       	out	0x3e, r29	; 62
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	cd bf       	out	0x3d, r28	; 61
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	08 95       	ret

00000ea8 <TIMER0_Start>:

ES_t TIMER0_Start(void){
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	0f 92       	push	r0
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState= ES_NOK;
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	89 83       	std	Y+1, r24	; 0x01
#if TIMER0_PRESCALER == 1024
	TCCR0 |=(5<<0);
     eb6:	a3 e5       	ldi	r26, 0x53	; 83
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e3 e5       	ldi	r30, 0x53	; 83
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	85 60       	ori	r24, 0x05	; 5
     ec2:	8c 93       	st	X, r24
#elif TIMER0_PRESCALER == 8
	TCCR0 |=(2<<0);
#elif TIMER0_PRESCALER == No_prescaling
	TCCR0 &=~(1<<0);
#endif
	Local_enuErrorState= ES_OK;
     ec4:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ec8:	0f 90       	pop	r0
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	08 95       	ret

00000ed0 <TIMER0_Stop>:

ES_t TIMER0_Stop(void){
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	0f 92       	push	r0
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState= ES_NOK;
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &=~(7<<0);
     ede:	a3 e5       	ldi	r26, 0x53	; 83
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e3 e5       	ldi	r30, 0x53	; 83
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	88 7f       	andi	r24, 0xF8	; 248
     eea:	8c 93       	st	X, r24
	Local_enuErrorState= ES_OK;
     eec:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
     eee:	89 81       	ldd	r24, Y+1	; 0x01
}
     ef0:	0f 90       	pop	r0
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	08 95       	ret

00000ef8 <TIMER0_voidSetCallBack>:

void TIMER0_voidSetCallBack(void(*ptr)(void)){
     ef8:	df 93       	push	r29
     efa:	cf 93       	push	r28
     efc:	00 d0       	rcall	.+0      	; 0xefe <TIMER0_voidSetCallBack+0x6>
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	9a 83       	std	Y+2, r25	; 0x02
     f04:	89 83       	std	Y+1, r24	; 0x01
	callback = ptr;
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	9a 81       	ldd	r25, Y+2	; 0x02
     f0a:	90 93 14 01 	sts	0x0114, r25
     f0e:	80 93 13 01 	sts	0x0113, r24
}
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	08 95       	ret

00000f1c <__vector_11>:

void __vector_11(void)__attribute__((signal));
void __vector_11(void){
     f1c:	1f 92       	push	r1
     f1e:	0f 92       	push	r0
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	0f 92       	push	r0
     f24:	11 24       	eor	r1, r1
     f26:	2f 93       	push	r18
     f28:	3f 93       	push	r19
     f2a:	4f 93       	push	r20
     f2c:	5f 93       	push	r21
     f2e:	6f 93       	push	r22
     f30:	7f 93       	push	r23
     f32:	8f 93       	push	r24
     f34:	9f 93       	push	r25
     f36:	af 93       	push	r26
     f38:	bf 93       	push	r27
     f3a:	ef 93       	push	r30
     f3c:	ff 93       	push	r31
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_u32Counter =0;
			   Local_u32Counter++;
     f46:	80 91 15 01 	lds	r24, 0x0115
     f4a:	90 91 16 01 	lds	r25, 0x0116
     f4e:	a0 91 17 01 	lds	r26, 0x0117
     f52:	b0 91 18 01 	lds	r27, 0x0118
     f56:	01 96       	adiw	r24, 0x01	; 1
     f58:	a1 1d       	adc	r26, r1
     f5a:	b1 1d       	adc	r27, r1
     f5c:	80 93 15 01 	sts	0x0115, r24
     f60:	90 93 16 01 	sts	0x0116, r25
     f64:	a0 93 17 01 	sts	0x0117, r26
     f68:	b0 93 18 01 	sts	0x0118, r27
			   if(Local_u32Counter == TIMER0_u32OverFlow){
     f6c:	20 91 15 01 	lds	r18, 0x0115
     f70:	30 91 16 01 	lds	r19, 0x0116
     f74:	40 91 17 01 	lds	r20, 0x0117
     f78:	50 91 18 01 	lds	r21, 0x0118
     f7c:	80 91 0a 01 	lds	r24, 0x010A
     f80:	90 91 0b 01 	lds	r25, 0x010B
     f84:	a0 91 0c 01 	lds	r26, 0x010C
     f88:	b0 91 0d 01 	lds	r27, 0x010D
     f8c:	28 17       	cp	r18, r24
     f8e:	39 07       	cpc	r19, r25
     f90:	4a 07       	cpc	r20, r26
     f92:	5b 07       	cpc	r21, r27
     f94:	a1 f4       	brne	.+40     	; 0xfbe <__vector_11+0xa2>
				   callback();
     f96:	e0 91 13 01 	lds	r30, 0x0113
     f9a:	f0 91 14 01 	lds	r31, 0x0114
     f9e:	09 95       	icall
				   Local_u32Counter =0;
     fa0:	10 92 15 01 	sts	0x0115, r1
     fa4:	10 92 16 01 	sts	0x0116, r1
     fa8:	10 92 17 01 	sts	0x0117, r1
     fac:	10 92 18 01 	sts	0x0118, r1
				   TCNT0 = 265 - TIMER_0_u32Rem;
     fb0:	e2 e5       	ldi	r30, 0x52	; 82
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	90 91 0e 01 	lds	r25, 0x010E
     fb8:	89 e0       	ldi	r24, 0x09	; 9
     fba:	89 1b       	sub	r24, r25
     fbc:	80 83       	st	Z, r24

			   }


}
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	ff 91       	pop	r31
     fc4:	ef 91       	pop	r30
     fc6:	bf 91       	pop	r27
     fc8:	af 91       	pop	r26
     fca:	9f 91       	pop	r25
     fcc:	8f 91       	pop	r24
     fce:	7f 91       	pop	r23
     fd0:	6f 91       	pop	r22
     fd2:	5f 91       	pop	r21
     fd4:	4f 91       	pop	r20
     fd6:	3f 91       	pop	r19
     fd8:	2f 91       	pop	r18
     fda:	0f 90       	pop	r0
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	0f 90       	pop	r0
     fe0:	1f 90       	pop	r1
     fe2:	18 95       	reti

00000fe4 <__vector_10>:
void __vector_10(void)__attribute__((signal));
void __vector_10(void){
     fe4:	1f 92       	push	r1
     fe6:	0f 92       	push	r0
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	0f 92       	push	r0
     fec:	11 24       	eor	r1, r1
     fee:	2f 93       	push	r18
     ff0:	3f 93       	push	r19
     ff2:	4f 93       	push	r20
     ff4:	5f 93       	push	r21
     ff6:	6f 93       	push	r22
     ff8:	7f 93       	push	r23
     ffa:	8f 93       	push	r24
     ffc:	9f 93       	push	r25
     ffe:	af 93       	push	r26
    1000:	bf 93       	push	r27
    1002:	ef 93       	push	r30
    1004:	ff 93       	push	r31
    1006:	df 93       	push	r29
    1008:	cf 93       	push	r28
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_u32Counter =0;
			   Local_u32Counter++;
    100e:	80 91 19 01 	lds	r24, 0x0119
    1012:	90 91 1a 01 	lds	r25, 0x011A
    1016:	a0 91 1b 01 	lds	r26, 0x011B
    101a:	b0 91 1c 01 	lds	r27, 0x011C
    101e:	01 96       	adiw	r24, 0x01	; 1
    1020:	a1 1d       	adc	r26, r1
    1022:	b1 1d       	adc	r27, r1
    1024:	80 93 19 01 	sts	0x0119, r24
    1028:	90 93 1a 01 	sts	0x011A, r25
    102c:	a0 93 1b 01 	sts	0x011B, r26
    1030:	b0 93 1c 01 	sts	0x011C, r27
			   if(Local_u32Counter == TIMER0_u32CompareMatch){
    1034:	20 91 19 01 	lds	r18, 0x0119
    1038:	30 91 1a 01 	lds	r19, 0x011A
    103c:	40 91 1b 01 	lds	r20, 0x011B
    1040:	50 91 1c 01 	lds	r21, 0x011C
    1044:	80 91 0f 01 	lds	r24, 0x010F
    1048:	90 91 10 01 	lds	r25, 0x0110
    104c:	a0 91 11 01 	lds	r26, 0x0111
    1050:	b0 91 12 01 	lds	r27, 0x0112
    1054:	28 17       	cp	r18, r24
    1056:	39 07       	cpc	r19, r25
    1058:	4a 07       	cpc	r20, r26
    105a:	5b 07       	cpc	r21, r27
    105c:	69 f4       	brne	.+26     	; 0x1078 <__vector_10+0x94>
				   callback();
    105e:	e0 91 13 01 	lds	r30, 0x0113
    1062:	f0 91 14 01 	lds	r31, 0x0114
    1066:	09 95       	icall
				   Local_u32Counter =0;
    1068:	10 92 19 01 	sts	0x0119, r1
    106c:	10 92 1a 01 	sts	0x011A, r1
    1070:	10 92 1b 01 	sts	0x011B, r1
    1074:	10 92 1c 01 	sts	0x011C, r1


			   }


}
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	ff 91       	pop	r31
    107e:	ef 91       	pop	r30
    1080:	bf 91       	pop	r27
    1082:	af 91       	pop	r26
    1084:	9f 91       	pop	r25
    1086:	8f 91       	pop	r24
    1088:	7f 91       	pop	r23
    108a:	6f 91       	pop	r22
    108c:	5f 91       	pop	r21
    108e:	4f 91       	pop	r20
    1090:	3f 91       	pop	r19
    1092:	2f 91       	pop	r18
    1094:	0f 90       	pop	r0
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	0f 90       	pop	r0
    109a:	1f 90       	pop	r1
    109c:	18 95       	reti

0000109e <PWM1_enuInit>:

#include "../PWM1/PWM1_Config.h"
#include "../PWM1/PWM1_Priv.h"


ES_t PWM1_enuInit(void){
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	0f 92       	push	r0
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62

#if PWM1_MODE ==Fast_PWM
	#if PWM1_TOP_MODE == ICR1
		DDRD |=(1<<5);
    10a8:	a1 e3       	ldi	r26, 0x31	; 49
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e1 e3       	ldi	r30, 0x31	; 49
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	80 62       	ori	r24, 0x20	; 32
    10b4:	8c 93       	st	X, r24
		TCCR1A &=~(1<<0);
    10b6:	af e4       	ldi	r26, 0x4F	; 79
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	ef e4       	ldi	r30, 0x4F	; 79
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	8e 7f       	andi	r24, 0xFE	; 254
    10c2:	8c 93       	st	X, r24
		TCCR1A |=(1<<1);
    10c4:	af e4       	ldi	r26, 0x4F	; 79
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	ef e4       	ldi	r30, 0x4F	; 79
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	82 60       	ori	r24, 0x02	; 2
    10d0:	8c 93       	st	X, r24
		TCCR1B |=(1<<3);
    10d2:	ae e4       	ldi	r26, 0x4E	; 78
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	ee e4       	ldi	r30, 0x4E	; 78
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	88 60       	ori	r24, 0x08	; 8
    10de:	8c 93       	st	X, r24
		TCCR1B |=(1<<4);
    10e0:	ae e4       	ldi	r26, 0x4E	; 78
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	ee e4       	ldi	r30, 0x4E	; 78
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	80 61       	ori	r24, 0x10	; 16
    10ec:	8c 93       	st	X, r24
		#if Compare_Output_Mode == NON_INVERTED
			TCCR1A &=~(1<<6);
    10ee:	af e4       	ldi	r26, 0x4F	; 79
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	ef e4       	ldi	r30, 0x4F	; 79
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	8f 7b       	andi	r24, 0xBF	; 191
    10fa:	8c 93       	st	X, r24
			TCCR1A |=(1<<7);
    10fc:	af e4       	ldi	r26, 0x4F	; 79
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	ef e4       	ldi	r30, 0x4F	; 79
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	80 68       	ori	r24, 0x80	; 128
    1108:	8c 93       	st	X, r24
	#elif PWM1_TOP_MODE == OCR1A1
			DDRD |=(1<<4);
	#endif
#elif PWM1_MODE == PHASE_CORRECT_PWM
#endif
}
    110a:	0f 90       	pop	r0
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	08 95       	ret

00001112 <PWM1_enuSetFrequency>:

ES_t PWM1_enuSetFrequency(u32 Copy_u8Frequency){
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	00 d0       	rcall	.+0      	; 0x1118 <PWM1_enuSetFrequency+0x6>
    1118:	00 d0       	rcall	.+0      	; 0x111a <PWM1_enuSetFrequency+0x8>
    111a:	0f 92       	push	r0
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
    1120:	69 83       	std	Y+1, r22	; 0x01
    1122:	7a 83       	std	Y+2, r23	; 0x02
    1124:	8b 83       	std	Y+3, r24	; 0x03
    1126:	9c 83       	std	Y+4, r25	; 0x04
//	ICR1 = ((F_OSC *1000000 / TIMER1_PRESCALER) / Copy_u8Frequency);
}
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <PWM1_enuSetDutyCycle>:

ES_t PWM1_enuSetDutyCycle(u8 Copy_u8DutyCycle){
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <PWM1_enuSetDutyCycle+0x6>
    113e:	0f 92       	push	r0
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState =ES_NOK;
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	89 83       	std	Y+1, r24	; 0x01
}
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	08 95       	ret

00001156 <PWM0_enuInit>:

#include "../PWM0/PWM_Config.h"
#include "../PWM0/PWM_Priv.h"


ES_t PWM0_enuInit(void){
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	0f 92       	push	r0
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState =ES_NOK;
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	89 83       	std	Y+1, r24	; 0x01
	DDRB |=(1<<3);		//set OC0 as PWM output
    1164:	a7 e3       	ldi	r26, 0x37	; 55
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e7 e3       	ldi	r30, 0x37	; 55
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	88 60       	ori	r24, 0x08	; 8
    1170:	8c 93       	st	X, r24
#if PWM_MODE == Fast_PWM
	TCCR0 |=(1<<3);
    1172:	a3 e5       	ldi	r26, 0x53	; 83
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e3 e5       	ldi	r30, 0x53	; 83
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	88 60       	ori	r24, 0x08	; 8
    117e:	8c 93       	st	X, r24
	TCCR0 |=(1<<6);
    1180:	a3 e5       	ldi	r26, 0x53	; 83
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e3 e5       	ldi	r30, 0x53	; 83
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	80 64       	ori	r24, 0x40	; 64
    118c:	8c 93       	st	X, r24
	TCCR0 &=~(1<<3);
	TCCR0 |=(1<<6);

#endif
#if Compare_Output_Mode == NON_INVERTED
		TCCR0 &=~(1<<4);
    118e:	a3 e5       	ldi	r26, 0x53	; 83
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e3 e5       	ldi	r30, 0x53	; 83
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	8f 7e       	andi	r24, 0xEF	; 239
    119a:	8c 93       	st	X, r24
		TCCR0 |=(1<<5);
    119c:	a3 e5       	ldi	r26, 0x53	; 83
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e3 e5       	ldi	r30, 0x53	; 83
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	80 62       	ori	r24, 0x20	; 32
    11a8:	8c 93       	st	X, r24
#elif Compare_Output_Mode == INVERTED
		TCCR0 |=(1<<4);
		TCCR0 |=(1<<5);
#endif
	return Local_enuErrorState;
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ac:	0f 90       	pop	r0
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <PWM0_enuSetDutyCycle>:

ES_t PWM0_enuSetDutyCycle(u8 Copy_u8DutyCycle){
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <PWM0_enuSetDutyCycle+0x6>
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState =ES_NOK;
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	89 83       	std	Y+1, r24	; 0x01
#if PWM_MODE == Fast_PWM

	#if Compare_Output_Mode == NON_INVERTED
		if(Copy_u8DutyCycle <= 100 && Copy_u8DutyCycle >0){
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	85 36       	cpi	r24, 0x65	; 101
    11c8:	f0 f4       	brcc	.+60     	; 0x1206 <PWM0_enuSetDutyCycle+0x52>
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	88 23       	and	r24, r24
    11ce:	d9 f0       	breq	.+54     	; 0x1206 <PWM0_enuSetDutyCycle+0x52>
			OCR0=(((Copy_u8DutyCycle *255)/100)-1);
    11d0:	ec e5       	ldi	r30, 0x5C	; 92
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	48 2f       	mov	r20, r24
    11d8:	50 e0       	ldi	r21, 0x00	; 0
    11da:	ca 01       	movw	r24, r20
    11dc:	9c 01       	movw	r18, r24
    11de:	22 0f       	add	r18, r18
    11e0:	33 1f       	adc	r19, r19
    11e2:	c9 01       	movw	r24, r18
    11e4:	96 95       	lsr	r25
    11e6:	98 2f       	mov	r25, r24
    11e8:	88 27       	eor	r24, r24
    11ea:	97 95       	ror	r25
    11ec:	87 95       	ror	r24
    11ee:	82 1b       	sub	r24, r18
    11f0:	93 0b       	sbc	r25, r19
    11f2:	84 0f       	add	r24, r20
    11f4:	95 1f       	adc	r25, r21
    11f6:	24 e6       	ldi	r18, 0x64	; 100
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	b9 01       	movw	r22, r18
    11fc:	0e 94 6d 1c 	call	0x38da	; 0x38da <__divmodhi4>
    1200:	cb 01       	movw	r24, r22
    1202:	81 50       	subi	r24, 0x01	; 1
    1204:	80 83       	st	Z, r24
		}
	#endif

#endif

	Local_enuErrorState =ES_OK;
    1206:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    1208:	89 81       	ldd	r24, Y+1	; 0x01
}
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <PWM0_Start>:

ES_t PWM0_Start(void){
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	0f 92       	push	r0
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState =ES_NOK;
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	89 83       	std	Y+1, r24	; 0x01
#if TIMER0_PRESCALER == 1024
	TCCR0 |=(5<<0);
    1222:	a3 e5       	ldi	r26, 0x53	; 83
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e3 e5       	ldi	r30, 0x53	; 83
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	85 60       	ori	r24, 0x05	; 5
    122e:	8c 93       	st	X, r24
#elif TIMER0_PRESCALER == 8
	TCCR0 |=(2<<0);
#elif TIMER0_PRESCALER == No_prescaling
	TCCR0 &=~(1<<0);
#endif
	Local_enuErrorState =ES_OK;
    1230:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    1232:	89 81       	ldd	r24, Y+1	; 0x01
}
    1234:	0f 90       	pop	r0
    1236:	cf 91       	pop	r28
    1238:	df 91       	pop	r29
    123a:	08 95       	ret

0000123c <PWM0_Stop>:

ES_t PWM0_Stop(void){
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	0f 92       	push	r0
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState =ES_NOK;
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &=~(7<<0);
    124a:	a3 e5       	ldi	r26, 0x53	; 83
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e3 e5       	ldi	r30, 0x53	; 83
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	88 7f       	andi	r24, 0xF8	; 248
    1256:	8c 93       	st	X, r24
	Local_enuErrorState =ES_OK;
    1258:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    125a:	89 81       	ldd	r24, Y+1	; 0x01
}
    125c:	0f 90       	pop	r0
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <GIE_enuInit>:




ES_t GIE_enuInit(void)
{
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	0f 92       	push	r0
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	89 83       	std	Y+1, r24	; 0x01
	SREG &=~(1<<7);
    1272:	af e5       	ldi	r26, 0x5F	; 95
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	ef e5       	ldi	r30, 0x5F	; 95
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	8f 77       	andi	r24, 0x7F	; 127
    127e:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    1280:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    1282:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1284:	0f 90       	pop	r0
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	08 95       	ret

0000128c <GIE_enuEnable>:
ES_t GIE_enuEnable(void){
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	0f 92       	push	r0
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	89 83       	std	Y+1, r24	; 0x01
	SREG |=(1<<7);
    129a:	af e5       	ldi	r26, 0x5F	; 95
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	ef e5       	ldi	r30, 0x5F	; 95
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	80 68       	ori	r24, 0x80	; 128
    12a6:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    12a8:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ac:	0f 90       	pop	r0
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	08 95       	ret

000012b4 <GIE_enuDisable>:
ES_t GIE_enuDisable(void){
    12b4:	df 93       	push	r29
    12b6:	cf 93       	push	r28
    12b8:	0f 92       	push	r0
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	89 83       	std	Y+1, r24	; 0x01
	SREG &=~(1<<7);
    12c2:	af e5       	ldi	r26, 0x5F	; 95
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	ef e5       	ldi	r30, 0x5F	; 95
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	8f 77       	andi	r24, 0x7F	; 127
    12ce:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    12d0:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d4:	0f 90       	pop	r0
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	08 95       	ret

000012dc <EXTI_enuInit>:
#include"EXTI_Config.h"
#include"EXTI_Priv.h"

extern u8 EXTI_u8InterNumber;
void(*callbac)(void) =	NULL;
ES_t EXTI_enuInit(EXTI_t * Copy_pAstrEXTIConfig){
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
    12e4:	2a 97       	sbiw	r28, 0x0a	; 10
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	f8 94       	cli
    12ea:	de bf       	out	0x3e, r29	; 62
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	cd bf       	out	0x3d, r28	; 61
    12f0:	9c 83       	std	Y+4, r25	; 0x04
    12f2:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	8a 83       	std	Y+2, r24	; 0x02
	if (Copy_pAstrEXTIConfig !=NULL){
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	9c 81       	ldd	r25, Y+4	; 0x04
    12fc:	00 97       	sbiw	r24, 0x00	; 0
    12fe:	09 f4       	brne	.+2      	; 0x1302 <EXTI_enuInit+0x26>
    1300:	9a c1       	rjmp	.+820    	; 0x1636 <EXTI_enuInit+0x35a>
		u8 Local_u8Iter=0;
    1302:	19 82       	std	Y+1, r1	; 0x01
    1304:	90 c1       	rjmp	.+800    	; 0x1626 <EXTI_enuInit+0x34a>
		for(;Local_u8Iter<EXTI_u8InterNumber;Local_u8Iter++){
			if(Copy_pAstrEXTIConfig[Local_u8Iter].IntPin == INT0){
    1306:	89 81       	ldd	r24, Y+1	; 0x01
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	c9 01       	movw	r24, r18
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	28 0f       	add	r18, r24
    1314:	39 1f       	adc	r19, r25
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	9c 81       	ldd	r25, Y+4	; 0x04
    131a:	fc 01       	movw	r30, r24
    131c:	e2 0f       	add	r30, r18
    131e:	f3 1f       	adc	r31, r19
    1320:	80 81       	ld	r24, Z
    1322:	88 23       	and	r24, r24
    1324:	09 f0       	breq	.+2      	; 0x1328 <EXTI_enuInit+0x4c>
    1326:	7e c0       	rjmp	.+252    	; 0x1424 <EXTI_enuInit+0x148>
				if(Copy_pAstrEXTIConfig[Local_u8Iter].InterruptState == Enable){
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	c9 01       	movw	r24, r18
    1330:	88 0f       	add	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	28 0f       	add	r18, r24
    1336:	39 1f       	adc	r19, r25
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	9c 81       	ldd	r25, Y+4	; 0x04
    133c:	fc 01       	movw	r30, r24
    133e:	e2 0f       	add	r30, r18
    1340:	f3 1f       	adc	r31, r19
    1342:	81 81       	ldd	r24, Z+1	; 0x01
    1344:	81 30       	cpi	r24, 0x01	; 1
    1346:	41 f4       	brne	.+16     	; 0x1358 <EXTI_enuInit+0x7c>
					GICR|=(1<<6);
    1348:	ab e5       	ldi	r26, 0x5B	; 91
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	eb e5       	ldi	r30, 0x5B	; 91
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	80 64       	ori	r24, 0x40	; 64
    1354:	8c 93       	st	X, r24
    1356:	17 c0       	rjmp	.+46     	; 0x1386 <EXTI_enuInit+0xaa>
				}
				else if(Copy_pAstrEXTIConfig[Local_u8Iter].InterruptState == Disable){
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	c9 01       	movw	r24, r18
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	28 0f       	add	r18, r24
    1366:	39 1f       	adc	r19, r25
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	9c 81       	ldd	r25, Y+4	; 0x04
    136c:	fc 01       	movw	r30, r24
    136e:	e2 0f       	add	r30, r18
    1370:	f3 1f       	adc	r31, r19
    1372:	81 81       	ldd	r24, Z+1	; 0x01
    1374:	88 23       	and	r24, r24
    1376:	39 f4       	brne	.+14     	; 0x1386 <EXTI_enuInit+0xaa>
					GICR &=~(1<<6);
    1378:	ab e5       	ldi	r26, 0x5B	; 91
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	eb e5       	ldi	r30, 0x5B	; 91
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	8f 7b       	andi	r24, 0xBF	; 191
    1384:	8c 93       	st	X, r24
				}
				switch(Copy_pAstrEXTIConfig[Local_u8Iter].SenseLevel){
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	c9 01       	movw	r24, r18
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	28 0f       	add	r18, r24
    1394:	39 1f       	adc	r19, r25
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	9c 81       	ldd	r25, Y+4	; 0x04
    139a:	fc 01       	movw	r30, r24
    139c:	e2 0f       	add	r30, r18
    139e:	f3 1f       	adc	r31, r19
    13a0:	82 81       	ldd	r24, Z+2	; 0x02
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	3a 87       	std	Y+10, r19	; 0x0a
    13a8:	29 87       	std	Y+9, r18	; 0x09
    13aa:	89 85       	ldd	r24, Y+9	; 0x09
    13ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ae:	81 30       	cpi	r24, 0x01	; 1
    13b0:	91 05       	cpc	r25, r1
    13b2:	e9 f0       	breq	.+58     	; 0x13ee <EXTI_enuInit+0x112>
    13b4:	29 85       	ldd	r18, Y+9	; 0x09
    13b6:	3a 85       	ldd	r19, Y+10	; 0x0a
    13b8:	22 30       	cpi	r18, 0x02	; 2
    13ba:	31 05       	cpc	r19, r1
    13bc:	2c f4       	brge	.+10     	; 0x13c8 <EXTI_enuInit+0xec>
    13be:	89 85       	ldd	r24, Y+9	; 0x09
    13c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    13c4:	61 f0       	breq	.+24     	; 0x13de <EXTI_enuInit+0x102>
    13c6:	2b c0       	rjmp	.+86     	; 0x141e <EXTI_enuInit+0x142>
    13c8:	29 85       	ldd	r18, Y+9	; 0x09
    13ca:	3a 85       	ldd	r19, Y+10	; 0x0a
    13cc:	22 30       	cpi	r18, 0x02	; 2
    13ce:	31 05       	cpc	r19, r1
    13d0:	b1 f0       	breq	.+44     	; 0x13fe <EXTI_enuInit+0x122>
    13d2:	89 85       	ldd	r24, Y+9	; 0x09
    13d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d6:	83 30       	cpi	r24, 0x03	; 3
    13d8:	91 05       	cpc	r25, r1
    13da:	c9 f0       	breq	.+50     	; 0x140e <EXTI_enuInit+0x132>
    13dc:	20 c0       	rjmp	.+64     	; 0x141e <EXTI_enuInit+0x142>
				case Low_level:
					MCUCR &= ~(3<<0);
    13de:	a5 e5       	ldi	r26, 0x55	; 85
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e5 e5       	ldi	r30, 0x55	; 85
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	8c 7f       	andi	r24, 0xFC	; 252
    13ea:	8c 93       	st	X, r24
    13ec:	19 c1       	rjmp	.+562    	; 0x1620 <EXTI_enuInit+0x344>
					break;
				case AnyLogic:
					MCUCR |= (1<<0);
    13ee:	a5 e5       	ldi	r26, 0x55	; 85
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e5 e5       	ldi	r30, 0x55	; 85
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	81 60       	ori	r24, 0x01	; 1
    13fa:	8c 93       	st	X, r24
    13fc:	11 c1       	rjmp	.+546    	; 0x1620 <EXTI_enuInit+0x344>
					break;
				case Rising:
					MCUCR |=(3<<0);
    13fe:	a5 e5       	ldi	r26, 0x55	; 85
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e5 e5       	ldi	r30, 0x55	; 85
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	83 60       	ori	r24, 0x03	; 3
    140a:	8c 93       	st	X, r24
    140c:	09 c1       	rjmp	.+530    	; 0x1620 <EXTI_enuInit+0x344>
					break;
				case Falling:
					MCUCR |=(2<<0);
    140e:	a5 e5       	ldi	r26, 0x55	; 85
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e5 e5       	ldi	r30, 0x55	; 85
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	82 60       	ori	r24, 0x02	; 2
    141a:	8c 93       	st	X, r24
    141c:	01 c1       	rjmp	.+514    	; 0x1620 <EXTI_enuInit+0x344>
					break;
				default:
					Local_enuErrorState = ES_OUT_OF_RANGE;
    141e:	82 e0       	ldi	r24, 0x02	; 2
    1420:	8a 83       	std	Y+2, r24	; 0x02
    1422:	fe c0       	rjmp	.+508    	; 0x1620 <EXTI_enuInit+0x344>

				}
			}
			else if(Copy_pAstrEXTIConfig[Local_u8Iter].IntPin == INT1){
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	c9 01       	movw	r24, r18
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	28 0f       	add	r18, r24
    1432:	39 1f       	adc	r19, r25
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	9c 81       	ldd	r25, Y+4	; 0x04
    1438:	fc 01       	movw	r30, r24
    143a:	e2 0f       	add	r30, r18
    143c:	f3 1f       	adc	r31, r19
    143e:	80 81       	ld	r24, Z
    1440:	81 30       	cpi	r24, 0x01	; 1
    1442:	09 f0       	breq	.+2      	; 0x1446 <EXTI_enuInit+0x16a>
    1444:	7e c0       	rjmp	.+252    	; 0x1542 <EXTI_enuInit+0x266>
				if (Copy_pAstrEXTIConfig[Local_u8Iter].InterruptState == Enable){
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	c9 01       	movw	r24, r18
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	28 0f       	add	r18, r24
    1454:	39 1f       	adc	r19, r25
    1456:	8b 81       	ldd	r24, Y+3	; 0x03
    1458:	9c 81       	ldd	r25, Y+4	; 0x04
    145a:	fc 01       	movw	r30, r24
    145c:	e2 0f       	add	r30, r18
    145e:	f3 1f       	adc	r31, r19
    1460:	81 81       	ldd	r24, Z+1	; 0x01
    1462:	81 30       	cpi	r24, 0x01	; 1
    1464:	41 f4       	brne	.+16     	; 0x1476 <EXTI_enuInit+0x19a>
					GICR|=(1<<7);
    1466:	ab e5       	ldi	r26, 0x5B	; 91
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	eb e5       	ldi	r30, 0x5B	; 91
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	80 68       	ori	r24, 0x80	; 128
    1472:	8c 93       	st	X, r24
    1474:	17 c0       	rjmp	.+46     	; 0x14a4 <EXTI_enuInit+0x1c8>
				}
				else if (Copy_pAstrEXTIConfig[Local_u8Iter].InterruptState == Disable){
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	c9 01       	movw	r24, r18
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	28 0f       	add	r18, r24
    1484:	39 1f       	adc	r19, r25
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	9c 81       	ldd	r25, Y+4	; 0x04
    148a:	fc 01       	movw	r30, r24
    148c:	e2 0f       	add	r30, r18
    148e:	f3 1f       	adc	r31, r19
    1490:	81 81       	ldd	r24, Z+1	; 0x01
    1492:	88 23       	and	r24, r24
    1494:	39 f4       	brne	.+14     	; 0x14a4 <EXTI_enuInit+0x1c8>
					GICR &=~(1<<7);
    1496:	ab e5       	ldi	r26, 0x5B	; 91
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	eb e5       	ldi	r30, 0x5B	; 91
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	8f 77       	andi	r24, 0x7F	; 127
    14a2:	8c 93       	st	X, r24

				}
				switch(Copy_pAstrEXTIConfig[Local_u8Iter].SenseLevel){
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	c9 01       	movw	r24, r18
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	28 0f       	add	r18, r24
    14b2:	39 1f       	adc	r19, r25
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	9c 81       	ldd	r25, Y+4	; 0x04
    14b8:	fc 01       	movw	r30, r24
    14ba:	e2 0f       	add	r30, r18
    14bc:	f3 1f       	adc	r31, r19
    14be:	82 81       	ldd	r24, Z+2	; 0x02
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	38 87       	std	Y+8, r19	; 0x08
    14c6:	2f 83       	std	Y+7, r18	; 0x07
    14c8:	8f 81       	ldd	r24, Y+7	; 0x07
    14ca:	98 85       	ldd	r25, Y+8	; 0x08
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	91 05       	cpc	r25, r1
    14d0:	e9 f0       	breq	.+58     	; 0x150c <EXTI_enuInit+0x230>
    14d2:	2f 81       	ldd	r18, Y+7	; 0x07
    14d4:	38 85       	ldd	r19, Y+8	; 0x08
    14d6:	22 30       	cpi	r18, 0x02	; 2
    14d8:	31 05       	cpc	r19, r1
    14da:	2c f4       	brge	.+10     	; 0x14e6 <EXTI_enuInit+0x20a>
    14dc:	8f 81       	ldd	r24, Y+7	; 0x07
    14de:	98 85       	ldd	r25, Y+8	; 0x08
    14e0:	00 97       	sbiw	r24, 0x00	; 0
    14e2:	61 f0       	breq	.+24     	; 0x14fc <EXTI_enuInit+0x220>
    14e4:	2b c0       	rjmp	.+86     	; 0x153c <EXTI_enuInit+0x260>
    14e6:	2f 81       	ldd	r18, Y+7	; 0x07
    14e8:	38 85       	ldd	r19, Y+8	; 0x08
    14ea:	22 30       	cpi	r18, 0x02	; 2
    14ec:	31 05       	cpc	r19, r1
    14ee:	b1 f0       	breq	.+44     	; 0x151c <EXTI_enuInit+0x240>
    14f0:	8f 81       	ldd	r24, Y+7	; 0x07
    14f2:	98 85       	ldd	r25, Y+8	; 0x08
    14f4:	83 30       	cpi	r24, 0x03	; 3
    14f6:	91 05       	cpc	r25, r1
    14f8:	c9 f0       	breq	.+50     	; 0x152c <EXTI_enuInit+0x250>
    14fa:	20 c0       	rjmp	.+64     	; 0x153c <EXTI_enuInit+0x260>
				case Low_level:
					MCUCR &=~(3<<2);
    14fc:	a5 e5       	ldi	r26, 0x55	; 85
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	e5 e5       	ldi	r30, 0x55	; 85
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	83 7f       	andi	r24, 0xF3	; 243
    1508:	8c 93       	st	X, r24
    150a:	8a c0       	rjmp	.+276    	; 0x1620 <EXTI_enuInit+0x344>
					break;
				case AnyLogic:
					MCUCR &=~(2<<2);
    150c:	a5 e5       	ldi	r26, 0x55	; 85
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e5 e5       	ldi	r30, 0x55	; 85
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	87 7f       	andi	r24, 0xF7	; 247
    1518:	8c 93       	st	X, r24
    151a:	82 c0       	rjmp	.+260    	; 0x1620 <EXTI_enuInit+0x344>
					break;
				case Rising:
					MCUCR |=(3<<2);
    151c:	a5 e5       	ldi	r26, 0x55	; 85
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e5 e5       	ldi	r30, 0x55	; 85
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	8c 60       	ori	r24, 0x0C	; 12
    1528:	8c 93       	st	X, r24
    152a:	7a c0       	rjmp	.+244    	; 0x1620 <EXTI_enuInit+0x344>
					break;
				case Falling:
					MCUCR |=(2<<2);
    152c:	a5 e5       	ldi	r26, 0x55	; 85
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e5 e5       	ldi	r30, 0x55	; 85
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	88 60       	ori	r24, 0x08	; 8
    1538:	8c 93       	st	X, r24
    153a:	72 c0       	rjmp	.+228    	; 0x1620 <EXTI_enuInit+0x344>
					break;
				default:
					Local_enuErrorState = ES_OUT_OF_RANGE;
    153c:	82 e0       	ldi	r24, 0x02	; 2
    153e:	8a 83       	std	Y+2, r24	; 0x02
    1540:	6f c0       	rjmp	.+222    	; 0x1620 <EXTI_enuInit+0x344>

				}


			}
			else if(Copy_pAstrEXTIConfig[Local_u8Iter].IntPin == INT2){
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	c9 01       	movw	r24, r18
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	28 0f       	add	r18, r24
    1550:	39 1f       	adc	r19, r25
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	9c 81       	ldd	r25, Y+4	; 0x04
    1556:	fc 01       	movw	r30, r24
    1558:	e2 0f       	add	r30, r18
    155a:	f3 1f       	adc	r31, r19
    155c:	80 81       	ld	r24, Z
    155e:	82 30       	cpi	r24, 0x02	; 2
    1560:	09 f0       	breq	.+2      	; 0x1564 <EXTI_enuInit+0x288>
    1562:	5e c0       	rjmp	.+188    	; 0x1620 <EXTI_enuInit+0x344>
				if (Copy_pAstrEXTIConfig[Local_u8Iter].InterruptState == Enable){
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	c9 01       	movw	r24, r18
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	28 0f       	add	r18, r24
    1572:	39 1f       	adc	r19, r25
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	9c 81       	ldd	r25, Y+4	; 0x04
    1578:	fc 01       	movw	r30, r24
    157a:	e2 0f       	add	r30, r18
    157c:	f3 1f       	adc	r31, r19
    157e:	81 81       	ldd	r24, Z+1	; 0x01
    1580:	81 30       	cpi	r24, 0x01	; 1
    1582:	41 f4       	brne	.+16     	; 0x1594 <EXTI_enuInit+0x2b8>
					GICR |=(1<<5);
    1584:	ab e5       	ldi	r26, 0x5B	; 91
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	eb e5       	ldi	r30, 0x5B	; 91
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	80 62       	ori	r24, 0x20	; 32
    1590:	8c 93       	st	X, r24
    1592:	17 c0       	rjmp	.+46     	; 0x15c2 <EXTI_enuInit+0x2e6>
				}
				else if (Copy_pAstrEXTIConfig[Local_u8Iter].InterruptState == Disable){
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	c9 01       	movw	r24, r18
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	28 0f       	add	r18, r24
    15a2:	39 1f       	adc	r19, r25
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	9c 81       	ldd	r25, Y+4	; 0x04
    15a8:	fc 01       	movw	r30, r24
    15aa:	e2 0f       	add	r30, r18
    15ac:	f3 1f       	adc	r31, r19
    15ae:	81 81       	ldd	r24, Z+1	; 0x01
    15b0:	88 23       	and	r24, r24
    15b2:	39 f4       	brne	.+14     	; 0x15c2 <EXTI_enuInit+0x2e6>
					GICR&=~(1<<5);
    15b4:	ab e5       	ldi	r26, 0x5B	; 91
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	eb e5       	ldi	r30, 0x5B	; 91
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	8f 7d       	andi	r24, 0xDF	; 223
    15c0:	8c 93       	st	X, r24
				}
				switch(Copy_pAstrEXTIConfig[Local_u8Iter].SenseLevel){
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	c9 01       	movw	r24, r18
    15ca:	88 0f       	add	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	28 0f       	add	r18, r24
    15d0:	39 1f       	adc	r19, r25
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	9c 81       	ldd	r25, Y+4	; 0x04
    15d6:	fc 01       	movw	r30, r24
    15d8:	e2 0f       	add	r30, r18
    15da:	f3 1f       	adc	r31, r19
    15dc:	82 81       	ldd	r24, Z+2	; 0x02
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	3e 83       	std	Y+6, r19	; 0x06
    15e4:	2d 83       	std	Y+5, r18	; 0x05
    15e6:	8d 81       	ldd	r24, Y+5	; 0x05
    15e8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ea:	82 30       	cpi	r24, 0x02	; 2
    15ec:	91 05       	cpc	r25, r1
    15ee:	31 f0       	breq	.+12     	; 0x15fc <EXTI_enuInit+0x320>
    15f0:	2d 81       	ldd	r18, Y+5	; 0x05
    15f2:	3e 81       	ldd	r19, Y+6	; 0x06
    15f4:	23 30       	cpi	r18, 0x03	; 3
    15f6:	31 05       	cpc	r19, r1
    15f8:	49 f0       	breq	.+18     	; 0x160c <EXTI_enuInit+0x330>
    15fa:	10 c0       	rjmp	.+32     	; 0x161c <EXTI_enuInit+0x340>
				case Rising:
					MCUCSR |=(1<<6);
    15fc:	a4 e5       	ldi	r26, 0x54	; 84
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e4 e5       	ldi	r30, 0x54	; 84
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	80 64       	ori	r24, 0x40	; 64
    1608:	8c 93       	st	X, r24
    160a:	0a c0       	rjmp	.+20     	; 0x1620 <EXTI_enuInit+0x344>
					break;
				case Falling:
					MCUCSR &=~(1<<6);
    160c:	a4 e5       	ldi	r26, 0x54	; 84
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e4 e5       	ldi	r30, 0x54	; 84
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	8f 7b       	andi	r24, 0xBF	; 191
    1618:	8c 93       	st	X, r24
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <EXTI_enuInit+0x344>
					break;
				default:
					Local_enuErrorState = ES_OUT_OF_RANGE;
    161c:	82 e0       	ldi	r24, 0x02	; 2
    161e:	8a 83       	std	Y+2, r24	; 0x02
void(*callbac)(void) =	NULL;
ES_t EXTI_enuInit(EXTI_t * Copy_pAstrEXTIConfig){
	ES_t Local_enuErrorState = ES_NOK;
	if (Copy_pAstrEXTIConfig !=NULL){
		u8 Local_u8Iter=0;
		for(;Local_u8Iter<EXTI_u8InterNumber;Local_u8Iter++){
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	8f 5f       	subi	r24, 0xFF	; 255
    1624:	89 83       	std	Y+1, r24	; 0x01
    1626:	90 91 ef 00 	lds	r25, 0x00EF
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	89 17       	cp	r24, r25
    162e:	08 f4       	brcc	.+2      	; 0x1632 <EXTI_enuInit+0x356>
    1630:	6a ce       	rjmp	.-812    	; 0x1306 <EXTI_enuInit+0x2a>
				}
			}


		}
		Local_enuErrorState=ES_OK;
    1632:	1a 82       	std	Y+2, r1	; 0x02
    1634:	02 c0       	rjmp	.+4      	; 0x163a <EXTI_enuInit+0x35e>
	}
	else{
		Local_enuErrorState=ES_NULL_POINTER;
    1636:	83 e0       	ldi	r24, 0x03	; 3
    1638:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    163a:	8a 81       	ldd	r24, Y+2	; 0x02

}
    163c:	2a 96       	adiw	r28, 0x0a	; 10
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61
    1648:	cf 91       	pop	r28
    164a:	df 91       	pop	r29
    164c:	08 95       	ret

0000164e <EXTI_enuSenseLevel>:
ES_t EXTI_enuSenseLevel(EXTI_t *Copy_pstrInteNumber,u8 Copy_u8SenseLevel){
    164e:	df 93       	push	r29
    1650:	cf 93       	push	r28
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
    1656:	2a 97       	sbiw	r28, 0x0a	; 10
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	f8 94       	cli
    165c:	de bf       	out	0x3e, r29	; 62
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	cd bf       	out	0x3d, r28	; 61
    1662:	9b 83       	std	Y+3, r25	; 0x03
    1664:	8a 83       	std	Y+2, r24	; 0x02
    1666:	6c 83       	std	Y+4, r22	; 0x04

	ES_t Local_enuErrorState=ES_NOK;
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	89 83       	std	Y+1, r24	; 0x01
	if(!Local_enuErrorState){
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	88 23       	and	r24, r24
    1670:	09 f0       	breq	.+2      	; 0x1674 <EXTI_enuSenseLevel+0x26>
    1672:	b9 c0       	rjmp	.+370    	; 0x17e6 <EXTI_enuSenseLevel+0x198>
		if(Copy_pstrInteNumber ->IntPin == INT0){
    1674:	ea 81       	ldd	r30, Y+2	; 0x02
    1676:	fb 81       	ldd	r31, Y+3	; 0x03
    1678:	80 81       	ld	r24, Z
    167a:	88 23       	and	r24, r24
    167c:	09 f0       	breq	.+2      	; 0x1680 <EXTI_enuSenseLevel+0x32>
    167e:	42 c0       	rjmp	.+132    	; 0x1704 <EXTI_enuSenseLevel+0xb6>

			switch(Copy_u8SenseLevel){
    1680:	8c 81       	ldd	r24, Y+4	; 0x04
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	3a 87       	std	Y+10, r19	; 0x0a
    1688:	29 87       	std	Y+9, r18	; 0x09
    168a:	89 85       	ldd	r24, Y+9	; 0x09
    168c:	9a 85       	ldd	r25, Y+10	; 0x0a
    168e:	81 30       	cpi	r24, 0x01	; 1
    1690:	91 05       	cpc	r25, r1
    1692:	e9 f0       	breq	.+58     	; 0x16ce <EXTI_enuSenseLevel+0x80>
    1694:	29 85       	ldd	r18, Y+9	; 0x09
    1696:	3a 85       	ldd	r19, Y+10	; 0x0a
    1698:	22 30       	cpi	r18, 0x02	; 2
    169a:	31 05       	cpc	r19, r1
    169c:	2c f4       	brge	.+10     	; 0x16a8 <EXTI_enuSenseLevel+0x5a>
    169e:	89 85       	ldd	r24, Y+9	; 0x09
    16a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a2:	00 97       	sbiw	r24, 0x00	; 0
    16a4:	61 f0       	breq	.+24     	; 0x16be <EXTI_enuSenseLevel+0x70>
    16a6:	2b c0       	rjmp	.+86     	; 0x16fe <EXTI_enuSenseLevel+0xb0>
    16a8:	29 85       	ldd	r18, Y+9	; 0x09
    16aa:	3a 85       	ldd	r19, Y+10	; 0x0a
    16ac:	22 30       	cpi	r18, 0x02	; 2
    16ae:	31 05       	cpc	r19, r1
    16b0:	b1 f0       	breq	.+44     	; 0x16de <EXTI_enuSenseLevel+0x90>
    16b2:	89 85       	ldd	r24, Y+9	; 0x09
    16b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b6:	83 30       	cpi	r24, 0x03	; 3
    16b8:	91 05       	cpc	r25, r1
    16ba:	c9 f0       	breq	.+50     	; 0x16ee <EXTI_enuSenseLevel+0xa0>
    16bc:	20 c0       	rjmp	.+64     	; 0x16fe <EXTI_enuSenseLevel+0xb0>
			case Low_level:
				MCUCR &= ~(3<<0);
    16be:	a5 e5       	ldi	r26, 0x55	; 85
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e5 e5       	ldi	r30, 0x55	; 85
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	8c 7f       	andi	r24, 0xFC	; 252
    16ca:	8c 93       	st	X, r24
    16cc:	8a c0       	rjmp	.+276    	; 0x17e2 <EXTI_enuSenseLevel+0x194>
				break;
			case AnyLogic:
				MCUCR |= (1<<0);
    16ce:	a5 e5       	ldi	r26, 0x55	; 85
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	e5 e5       	ldi	r30, 0x55	; 85
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	81 60       	ori	r24, 0x01	; 1
    16da:	8c 93       	st	X, r24
    16dc:	82 c0       	rjmp	.+260    	; 0x17e2 <EXTI_enuSenseLevel+0x194>
				break;
			case Rising:
				MCUCR |=(3<<0);
    16de:	a5 e5       	ldi	r26, 0x55	; 85
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	e5 e5       	ldi	r30, 0x55	; 85
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	83 60       	ori	r24, 0x03	; 3
    16ea:	8c 93       	st	X, r24
    16ec:	7a c0       	rjmp	.+244    	; 0x17e2 <EXTI_enuSenseLevel+0x194>
				break;
			case Falling:
				MCUCR |=(2<<0);
    16ee:	a5 e5       	ldi	r26, 0x55	; 85
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e5 e5       	ldi	r30, 0x55	; 85
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	82 60       	ori	r24, 0x02	; 2
    16fa:	8c 93       	st	X, r24
    16fc:	72 c0       	rjmp	.+228    	; 0x17e2 <EXTI_enuSenseLevel+0x194>
				break;
			default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    16fe:	82 e0       	ldi	r24, 0x02	; 2
    1700:	89 83       	std	Y+1, r24	; 0x01
    1702:	6f c0       	rjmp	.+222    	; 0x17e2 <EXTI_enuSenseLevel+0x194>

			}
		}
		else if(Copy_pstrInteNumber ->IntPin == INT1 ){
    1704:	ea 81       	ldd	r30, Y+2	; 0x02
    1706:	fb 81       	ldd	r31, Y+3	; 0x03
    1708:	80 81       	ld	r24, Z
    170a:	81 30       	cpi	r24, 0x01	; 1
    170c:	09 f0       	breq	.+2      	; 0x1710 <EXTI_enuSenseLevel+0xc2>
    170e:	42 c0       	rjmp	.+132    	; 0x1794 <EXTI_enuSenseLevel+0x146>

			switch(Copy_u8SenseLevel){
    1710:	8c 81       	ldd	r24, Y+4	; 0x04
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	38 87       	std	Y+8, r19	; 0x08
    1718:	2f 83       	std	Y+7, r18	; 0x07
    171a:	8f 81       	ldd	r24, Y+7	; 0x07
    171c:	98 85       	ldd	r25, Y+8	; 0x08
    171e:	81 30       	cpi	r24, 0x01	; 1
    1720:	91 05       	cpc	r25, r1
    1722:	e9 f0       	breq	.+58     	; 0x175e <EXTI_enuSenseLevel+0x110>
    1724:	2f 81       	ldd	r18, Y+7	; 0x07
    1726:	38 85       	ldd	r19, Y+8	; 0x08
    1728:	22 30       	cpi	r18, 0x02	; 2
    172a:	31 05       	cpc	r19, r1
    172c:	2c f4       	brge	.+10     	; 0x1738 <EXTI_enuSenseLevel+0xea>
    172e:	8f 81       	ldd	r24, Y+7	; 0x07
    1730:	98 85       	ldd	r25, Y+8	; 0x08
    1732:	00 97       	sbiw	r24, 0x00	; 0
    1734:	61 f0       	breq	.+24     	; 0x174e <EXTI_enuSenseLevel+0x100>
    1736:	2b c0       	rjmp	.+86     	; 0x178e <EXTI_enuSenseLevel+0x140>
    1738:	2f 81       	ldd	r18, Y+7	; 0x07
    173a:	38 85       	ldd	r19, Y+8	; 0x08
    173c:	22 30       	cpi	r18, 0x02	; 2
    173e:	31 05       	cpc	r19, r1
    1740:	b1 f0       	breq	.+44     	; 0x176e <EXTI_enuSenseLevel+0x120>
    1742:	8f 81       	ldd	r24, Y+7	; 0x07
    1744:	98 85       	ldd	r25, Y+8	; 0x08
    1746:	83 30       	cpi	r24, 0x03	; 3
    1748:	91 05       	cpc	r25, r1
    174a:	c9 f0       	breq	.+50     	; 0x177e <EXTI_enuSenseLevel+0x130>
    174c:	20 c0       	rjmp	.+64     	; 0x178e <EXTI_enuSenseLevel+0x140>
			case Low_level:
				MCUCR &=~(3<<2);
    174e:	a5 e5       	ldi	r26, 0x55	; 85
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	e5 e5       	ldi	r30, 0x55	; 85
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	83 7f       	andi	r24, 0xF3	; 243
    175a:	8c 93       	st	X, r24
    175c:	42 c0       	rjmp	.+132    	; 0x17e2 <EXTI_enuSenseLevel+0x194>
				break;
			case AnyLogic:
				MCUCR &=~(2<<2);
    175e:	a5 e5       	ldi	r26, 0x55	; 85
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e5 e5       	ldi	r30, 0x55	; 85
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	87 7f       	andi	r24, 0xF7	; 247
    176a:	8c 93       	st	X, r24
    176c:	3a c0       	rjmp	.+116    	; 0x17e2 <EXTI_enuSenseLevel+0x194>
				break;
			case Rising:
				MCUCR |=(3<<2);
    176e:	a5 e5       	ldi	r26, 0x55	; 85
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e5 e5       	ldi	r30, 0x55	; 85
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	8c 60       	ori	r24, 0x0C	; 12
    177a:	8c 93       	st	X, r24
    177c:	32 c0       	rjmp	.+100    	; 0x17e2 <EXTI_enuSenseLevel+0x194>
				break;
			case Falling:
				MCUCR |=(2<<2);
    177e:	a5 e5       	ldi	r26, 0x55	; 85
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e5 e5       	ldi	r30, 0x55	; 85
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	88 60       	ori	r24, 0x08	; 8
    178a:	8c 93       	st	X, r24
    178c:	2a c0       	rjmp	.+84     	; 0x17e2 <EXTI_enuSenseLevel+0x194>
				break;
			default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    178e:	82 e0       	ldi	r24, 0x02	; 2
    1790:	89 83       	std	Y+1, r24	; 0x01
    1792:	27 c0       	rjmp	.+78     	; 0x17e2 <EXTI_enuSenseLevel+0x194>


			}
		}
		else if(Copy_pstrInteNumber ->IntPin == INT2){
    1794:	ea 81       	ldd	r30, Y+2	; 0x02
    1796:	fb 81       	ldd	r31, Y+3	; 0x03
    1798:	80 81       	ld	r24, Z
    179a:	82 30       	cpi	r24, 0x02	; 2
    179c:	11 f5       	brne	.+68     	; 0x17e2 <EXTI_enuSenseLevel+0x194>

			switch(Copy_u8SenseLevel){
    179e:	8c 81       	ldd	r24, Y+4	; 0x04
    17a0:	28 2f       	mov	r18, r24
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	3e 83       	std	Y+6, r19	; 0x06
    17a6:	2d 83       	std	Y+5, r18	; 0x05
    17a8:	8d 81       	ldd	r24, Y+5	; 0x05
    17aa:	9e 81       	ldd	r25, Y+6	; 0x06
    17ac:	82 30       	cpi	r24, 0x02	; 2
    17ae:	91 05       	cpc	r25, r1
    17b0:	31 f0       	breq	.+12     	; 0x17be <EXTI_enuSenseLevel+0x170>
    17b2:	2d 81       	ldd	r18, Y+5	; 0x05
    17b4:	3e 81       	ldd	r19, Y+6	; 0x06
    17b6:	23 30       	cpi	r18, 0x03	; 3
    17b8:	31 05       	cpc	r19, r1
    17ba:	49 f0       	breq	.+18     	; 0x17ce <EXTI_enuSenseLevel+0x180>
    17bc:	10 c0       	rjmp	.+32     	; 0x17de <EXTI_enuSenseLevel+0x190>
			case Rising:
				MCUCSR |=(1<<6);
    17be:	a4 e5       	ldi	r26, 0x54	; 84
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e4 e5       	ldi	r30, 0x54	; 84
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	80 64       	ori	r24, 0x40	; 64
    17ca:	8c 93       	st	X, r24
    17cc:	0a c0       	rjmp	.+20     	; 0x17e2 <EXTI_enuSenseLevel+0x194>
				break;
			case Falling:
				MCUCSR &=~(1<<6);
    17ce:	a4 e5       	ldi	r26, 0x54	; 84
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e4 e5       	ldi	r30, 0x54	; 84
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	8f 7b       	andi	r24, 0xBF	; 191
    17da:	8c 93       	st	X, r24
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <EXTI_enuSenseLevel+0x194>
				break;
			default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    17de:	82 e0       	ldi	r24, 0x02	; 2
    17e0:	89 83       	std	Y+1, r24	; 0x01

			}
		}

		Local_enuErrorState=ES_OK;
    17e2:	19 82       	std	Y+1, r1	; 0x01
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <EXTI_enuSenseLevel+0x19c>

	}
	else{
		Local_enuErrorState=ES_NULL_POINTER;
    17e6:	83 e0       	ldi	r24, 0x03	; 3
    17e8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    17ea:	89 81       	ldd	r24, Y+1	; 0x01



}
    17ec:	2a 96       	adiw	r28, 0x0a	; 10
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	f8 94       	cli
    17f2:	de bf       	out	0x3e, r29	; 62
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	cd bf       	out	0x3d, r28	; 61
    17f8:	cf 91       	pop	r28
    17fa:	df 91       	pop	r29
    17fc:	08 95       	ret

000017fe <EXTI_enuEnableInterrupt>:
ES_t EXTI_enuEnableInterrupt(EXTI_t *Copy_pstrInteNumber){
    17fe:	df 93       	push	r29
    1800:	cf 93       	push	r28
    1802:	00 d0       	rcall	.+0      	; 0x1804 <EXTI_enuEnableInterrupt+0x6>
    1804:	0f 92       	push	r0
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    180a:	9b 83       	std	Y+3, r25	; 0x03
    180c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	89 83       	std	Y+1, r24	; 0x01
	if(!Copy_pstrInteNumber){
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	9b 81       	ldd	r25, Y+3	; 0x03
    1816:	00 97       	sbiw	r24, 0x00	; 0
    1818:	41 f5       	brne	.+80     	; 0x186a <EXTI_enuEnableInterrupt+0x6c>
		if(Copy_pstrInteNumber ->IntPin == INT0){
    181a:	ea 81       	ldd	r30, Y+2	; 0x02
    181c:	fb 81       	ldd	r31, Y+3	; 0x03
    181e:	80 81       	ld	r24, Z
    1820:	88 23       	and	r24, r24
    1822:	41 f4       	brne	.+16     	; 0x1834 <EXTI_enuEnableInterrupt+0x36>
			GICR|=(1<<6);
    1824:	ab e5       	ldi	r26, 0x5B	; 91
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	eb e5       	ldi	r30, 0x5B	; 91
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	80 64       	ori	r24, 0x40	; 64
    1830:	8c 93       	st	X, r24
    1832:	19 c0       	rjmp	.+50     	; 0x1866 <EXTI_enuEnableInterrupt+0x68>
		}
		else if(Copy_pstrInteNumber ->IntPin == INT1){
    1834:	ea 81       	ldd	r30, Y+2	; 0x02
    1836:	fb 81       	ldd	r31, Y+3	; 0x03
    1838:	80 81       	ld	r24, Z
    183a:	81 30       	cpi	r24, 0x01	; 1
    183c:	41 f4       	brne	.+16     	; 0x184e <EXTI_enuEnableInterrupt+0x50>
			GICR|=(1<<7);
    183e:	ab e5       	ldi	r26, 0x5B	; 91
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	eb e5       	ldi	r30, 0x5B	; 91
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	80 68       	ori	r24, 0x80	; 128
    184a:	8c 93       	st	X, r24
    184c:	0c c0       	rjmp	.+24     	; 0x1866 <EXTI_enuEnableInterrupt+0x68>
		}
		else if(Copy_pstrInteNumber ->IntPin == INT2){
    184e:	ea 81       	ldd	r30, Y+2	; 0x02
    1850:	fb 81       	ldd	r31, Y+3	; 0x03
    1852:	80 81       	ld	r24, Z
    1854:	82 30       	cpi	r24, 0x02	; 2
    1856:	39 f4       	brne	.+14     	; 0x1866 <EXTI_enuEnableInterrupt+0x68>
			GICR|=(1<<5);
    1858:	ab e5       	ldi	r26, 0x5B	; 91
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	eb e5       	ldi	r30, 0x5B	; 91
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	80 62       	ori	r24, 0x20	; 32
    1864:	8c 93       	st	X, r24
		}
		Local_enuErrorState=ES_OK;
    1866:	19 82       	std	Y+1, r1	; 0x01
    1868:	02 c0       	rjmp	.+4      	; 0x186e <EXTI_enuEnableInterrupt+0x70>
	}
	else{
		Local_enuErrorState=ES_NULL_POINTER;
    186a:	83 e0       	ldi	r24, 0x03	; 3
    186c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    186e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	cf 91       	pop	r28
    1878:	df 91       	pop	r29
    187a:	08 95       	ret

0000187c <EXTI_enuDisableInterrupt>:
ES_t EXTI_enuDisableInterrupt(EXTI_t *Copy_pstrInteNumber){
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	00 d0       	rcall	.+0      	; 0x1882 <EXTI_enuDisableInterrupt+0x6>
    1882:	0f 92       	push	r0
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	9b 83       	std	Y+3, r25	; 0x03
    188a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	89 83       	std	Y+1, r24	; 0x01
	if(!Copy_pstrInteNumber){
    1890:	8a 81       	ldd	r24, Y+2	; 0x02
    1892:	9b 81       	ldd	r25, Y+3	; 0x03
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	29 f5       	brne	.+74     	; 0x18e2 <EXTI_enuDisableInterrupt+0x66>
		if(Copy_pstrInteNumber ->IntPin == INT0){
    1898:	ea 81       	ldd	r30, Y+2	; 0x02
    189a:	fb 81       	ldd	r31, Y+3	; 0x03
    189c:	80 81       	ld	r24, Z
    189e:	88 23       	and	r24, r24
    18a0:	39 f4       	brne	.+14     	; 0x18b0 <EXTI_enuDisableInterrupt+0x34>
			GICR|=(0<<6);
    18a2:	eb e5       	ldi	r30, 0x5B	; 91
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	ab e5       	ldi	r26, 0x5B	; 91
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	8c 91       	ld	r24, X
    18ac:	80 83       	st	Z, r24
    18ae:	17 c0       	rjmp	.+46     	; 0x18de <EXTI_enuDisableInterrupt+0x62>
		}
		else if(Copy_pstrInteNumber ->IntPin == INT1){
    18b0:	ea 81       	ldd	r30, Y+2	; 0x02
    18b2:	fb 81       	ldd	r31, Y+3	; 0x03
    18b4:	80 81       	ld	r24, Z
    18b6:	81 30       	cpi	r24, 0x01	; 1
    18b8:	39 f4       	brne	.+14     	; 0x18c8 <EXTI_enuDisableInterrupt+0x4c>
			GICR|=(0<<7);
    18ba:	eb e5       	ldi	r30, 0x5B	; 91
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	ab e5       	ldi	r26, 0x5B	; 91
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	8c 91       	ld	r24, X
    18c4:	80 83       	st	Z, r24
    18c6:	0b c0       	rjmp	.+22     	; 0x18de <EXTI_enuDisableInterrupt+0x62>
		}
		else if(Copy_pstrInteNumber ->IntPin == INT2){
    18c8:	ea 81       	ldd	r30, Y+2	; 0x02
    18ca:	fb 81       	ldd	r31, Y+3	; 0x03
    18cc:	80 81       	ld	r24, Z
    18ce:	82 30       	cpi	r24, 0x02	; 2
    18d0:	31 f4       	brne	.+12     	; 0x18de <EXTI_enuDisableInterrupt+0x62>
			GICR|=(0<<5);
    18d2:	eb e5       	ldi	r30, 0x5B	; 91
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	ab e5       	ldi	r26, 0x5B	; 91
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	8c 91       	ld	r24, X
    18dc:	80 83       	st	Z, r24
		}
		Local_enuErrorState=ES_OK;
    18de:	19 82       	std	Y+1, r1	; 0x01
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <EXTI_enuDisableInterrupt+0x6a>
	}
	else{
		Local_enuErrorState=ES_NULL_POINTER;
    18e2:	83 e0       	ldi	r24, 0x03	; 3
    18e4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    18e6:	89 81       	ldd	r24, Y+1	; 0x01

}
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <EXTI_voidSetCallBack>:

void EXTI_voidSetCallBack(void(*ptr)(void)){
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	00 d0       	rcall	.+0      	; 0x18fa <EXTI_voidSetCallBack+0x6>
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	9a 83       	std	Y+2, r25	; 0x02
    1900:	89 83       	std	Y+1, r24	; 0x01
	callbac = ptr;
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	9a 81       	ldd	r25, Y+2	; 0x02
    1906:	90 93 1e 01 	sts	0x011E, r25
    190a:	80 93 1d 01 	sts	0x011D, r24
}
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	08 95       	ret

00001918 <__vector_1>:

void __vector_1(void)__attribute__((signal));
void __vector_2(void)__attribute__((signal));
void __vector_3(void)__attribute__((signal));

void __vector_1(void){
    1918:	1f 92       	push	r1
    191a:	0f 92       	push	r0
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	0f 92       	push	r0
    1920:	11 24       	eor	r1, r1
    1922:	2f 93       	push	r18
    1924:	3f 93       	push	r19
    1926:	4f 93       	push	r20
    1928:	5f 93       	push	r21
    192a:	6f 93       	push	r22
    192c:	7f 93       	push	r23
    192e:	8f 93       	push	r24
    1930:	9f 93       	push	r25
    1932:	af 93       	push	r26
    1934:	bf 93       	push	r27
    1936:	ef 93       	push	r30
    1938:	ff 93       	push	r31
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
	callbac();
    1942:	e0 91 1d 01 	lds	r30, 0x011D
    1946:	f0 91 1e 01 	lds	r31, 0x011E
    194a:	09 95       	icall
}
    194c:	cf 91       	pop	r28
    194e:	df 91       	pop	r29
    1950:	ff 91       	pop	r31
    1952:	ef 91       	pop	r30
    1954:	bf 91       	pop	r27
    1956:	af 91       	pop	r26
    1958:	9f 91       	pop	r25
    195a:	8f 91       	pop	r24
    195c:	7f 91       	pop	r23
    195e:	6f 91       	pop	r22
    1960:	5f 91       	pop	r21
    1962:	4f 91       	pop	r20
    1964:	3f 91       	pop	r19
    1966:	2f 91       	pop	r18
    1968:	0f 90       	pop	r0
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	0f 90       	pop	r0
    196e:	1f 90       	pop	r1
    1970:	18 95       	reti

00001972 <DIO_enuInit>:

//own libraries
#include "DIO_priv.h"
#include "DIO_config.h"

ES_t DIO_enuInit(void){
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	0f 92       	push	r0
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK ;
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	89 83       	std	Y+1, r24	; 0x01
#if DIO_u8PA0DIR == DIO_u8INPUT
	DDRA&=~(1<<0);
    1980:	aa e3       	ldi	r26, 0x3A	; 58
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	ea e3       	ldi	r30, 0x3A	; 58
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	8e 7f       	andi	r24, 0xFE	; 254
    198c:	8c 93       	st	X, r24
#endif

#if DIO_u8PA1DIR == DIO_u8OUTPUT
	DDRA|=(1<<1);
#elif DIO_u8PA1DIR == DIO_u8INPUT
	DDRA&=~(1<<1);
    198e:	aa e3       	ldi	r26, 0x3A	; 58
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	ea e3       	ldi	r30, 0x3A	; 58
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	8d 7f       	andi	r24, 0xFD	; 253
    199a:	8c 93       	st	X, r24
#endif

#if DIO_u8PA2DIR == DIO_u8OUTPUT
	DDRA|=(1<<2);
#elif DIO_u8PA2DIR == DIO_u8INPUT
	DDRA&=~(1<<2);
    199c:	aa e3       	ldi	r26, 0x3A	; 58
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	ea e3       	ldi	r30, 0x3A	; 58
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	8b 7f       	andi	r24, 0xFB	; 251
    19a8:	8c 93       	st	X, r24
#else
#error "Direction of pin A is wrong !!"
#endif

#if DIO_u8PA3DIR == DIO_u8OUTPUT
	DDRA|=(1<<3);
    19aa:	aa e3       	ldi	r26, 0x3A	; 58
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	ea e3       	ldi	r30, 0x3A	; 58
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	88 60       	ori	r24, 0x08	; 8
    19b6:	8c 93       	st	X, r24
#endif

#if DIO_u8PA4DIR == DIO_u8OUTPUT
	DDRA|=(1<<4);
#elif DIO_u8PA4DIR == DIO_u8INPUT
	DDRA&=~(1<<4);
    19b8:	aa e3       	ldi	r26, 0x3A	; 58
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	ea e3       	ldi	r30, 0x3A	; 58
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	8f 7e       	andi	r24, 0xEF	; 239
    19c4:	8c 93       	st	X, r24
#endif

#if DIO_u8PA5DIR == DIO_u8OUTPUT
	DDRA|=(1<<5);
#elif DIO_u8PA5DIR == DIO_u8INPUT
	DDRA&=~(1<<5);
    19c6:	aa e3       	ldi	r26, 0x3A	; 58
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	ea e3       	ldi	r30, 0x3A	; 58
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	8f 7d       	andi	r24, 0xDF	; 223
    19d2:	8c 93       	st	X, r24
#else
#error "Direction of pin A is wrong !!"
#endif

#if DIO_u8PA6DIR == DIO_u8OUTPUT
	DDRA|=(1<<6);
    19d4:	aa e3       	ldi	r26, 0x3A	; 58
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	ea e3       	ldi	r30, 0x3A	; 58
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	80 64       	ori	r24, 0x40	; 64
    19e0:	8c 93       	st	X, r24
#else
#error "Direction of pin A is wrong !!"
#endif

#if DIO_u8PA7DIR == DIO_u8OUTPUT
	DDRA|=(1<<7);
    19e2:	aa e3       	ldi	r26, 0x3A	; 58
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	ea e3       	ldi	r30, 0x3A	; 58
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	80 68       	ori	r24, 0x80	; 128
    19ee:	8c 93       	st	X, r24

//    B pins
#if DIO_u8PB0DIR == DIO_u8OUTPUT
	DDRB|=(1<<0);
#elif DIO_u8PB0DIR == DIO_u8INPUT
	DDRB&=~(1<<0);
    19f0:	a7 e3       	ldi	r26, 0x37	; 55
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	e7 e3       	ldi	r30, 0x37	; 55
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	8e 7f       	andi	r24, 0xFE	; 254
    19fc:	8c 93       	st	X, r24
#endif

#if DIO_u8PB1DIR == DIO_u8OUTPUT
	DDRB|=(1<<1);
#elif DIO_u8PB1DIR == DIO_u8INPUT
	DDRB&=~(1<<1);
    19fe:	a7 e3       	ldi	r26, 0x37	; 55
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	e7 e3       	ldi	r30, 0x37	; 55
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	8d 7f       	andi	r24, 0xFD	; 253
    1a0a:	8c 93       	st	X, r24
#endif

#if DIO_u8PB2DIR == DIO_u8OUTPUT
	DDRB|=(1<<2);
#elif DIO_u8PB2DIR == DIO_u8INPUT
	DDRB&=~(1<<2);
    1a0c:	a7 e3       	ldi	r26, 0x37	; 55
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	e7 e3       	ldi	r30, 0x37	; 55
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	8b 7f       	andi	r24, 0xFB	; 251
    1a18:	8c 93       	st	X, r24
#else
#error "Direction of pin B is wrong !!"
#endif

#if DIO_u8PB3DIR == DIO_u8OUTPUT
	DDRB|=(1<<3);
    1a1a:	a7 e3       	ldi	r26, 0x37	; 55
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e7 e3       	ldi	r30, 0x37	; 55
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	88 60       	ori	r24, 0x08	; 8
    1a26:	8c 93       	st	X, r24
#endif

#if DIO_u8PB4DIR == DIO_u8OUTPUT
	DDRB|=(1<<4);
#elif DIO_u8PB4DIR == DIO_u8INPUT
	DDRB&=~(1<<4);
    1a28:	a7 e3       	ldi	r26, 0x37	; 55
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	e7 e3       	ldi	r30, 0x37	; 55
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	8f 7e       	andi	r24, 0xEF	; 239
    1a34:	8c 93       	st	X, r24
#endif

#if DIO_u8PB5DIR == DIO_u8OUTPUT
	DDRB|=(1<<5);
#elif DIO_u8PB5DIR == DIO_u8INPUT
	DDRB&=~(1<<5);
    1a36:	a7 e3       	ldi	r26, 0x37	; 55
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	e7 e3       	ldi	r30, 0x37	; 55
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	8f 7d       	andi	r24, 0xDF	; 223
    1a42:	8c 93       	st	X, r24
#else
#error "Direction of pin B is wrong !!"
#endif

#if DIO_u8PB6DIR == DIO_u8OUTPUT
	DDRB|=(1<<6);
    1a44:	a7 e3       	ldi	r26, 0x37	; 55
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	e7 e3       	ldi	r30, 0x37	; 55
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	80 64       	ori	r24, 0x40	; 64
    1a50:	8c 93       	st	X, r24
#else
#error "Direction of pin B is wrong !!"
#endif

#if DIO_u8PB7DIR == DIO_u8OUTPUT
	DDRB|=(1<<7);
    1a52:	a7 e3       	ldi	r26, 0x37	; 55
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e7 e3       	ldi	r30, 0x37	; 55
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	80 68       	ori	r24, 0x80	; 128
    1a5e:	8c 93       	st	X, r24

//    C pins
#if DIO_u8PC0DIR == DIO_u8OUTPUT
	DDRC|=(1<<0);
#elif DIO_u8PC0DIR == DIO_u8INPUT
	DDRC&=~(1<<0);
    1a60:	a4 e3       	ldi	r26, 0x34	; 52
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e4 e3       	ldi	r30, 0x34	; 52
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	8e 7f       	andi	r24, 0xFE	; 254
    1a6c:	8c 93       	st	X, r24
#endif

#if DIO_u8PC1DIR == DIO_u8OUTPUT
	DDRC|=(1<<1);
#elif DIO_u8PC1DIR == DIO_u8INPUT
	DDRC&=~(1<<1);
    1a6e:	a4 e3       	ldi	r26, 0x34	; 52
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	e4 e3       	ldi	r30, 0x34	; 52
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	8d 7f       	andi	r24, 0xFD	; 253
    1a7a:	8c 93       	st	X, r24
#endif

#if DIO_u8PC2DIR == DIO_u8OUTPUT
	DDRC|=(1<<2);
#elif DIO_u8PC2DIR == DIO_u8INPUT
	DDRC&=~(1<<2);
    1a7c:	a4 e3       	ldi	r26, 0x34	; 52
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e4 e3       	ldi	r30, 0x34	; 52
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	8b 7f       	andi	r24, 0xFB	; 251
    1a88:	8c 93       	st	X, r24
#else
#error "Direction of pin C is wrong !!"
#endif

#if DIO_u8PC3DIR == DIO_u8OUTPUT
	DDRC|=(1<<3);
    1a8a:	a4 e3       	ldi	r26, 0x34	; 52
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e4 e3       	ldi	r30, 0x34	; 52
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	88 60       	ori	r24, 0x08	; 8
    1a96:	8c 93       	st	X, r24
#endif

#if DIO_u8PC4DIR == DIO_u8OUTPUT
	DDRC|=(1<<4);
#elif DIO_u8PC4DIR == DIO_u8INPUT
	DDRC&=~(1<<4);
    1a98:	a4 e3       	ldi	r26, 0x34	; 52
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	e4 e3       	ldi	r30, 0x34	; 52
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	8f 7e       	andi	r24, 0xEF	; 239
    1aa4:	8c 93       	st	X, r24
#endif

#if DIO_u8PC5DIR == DIO_u8OUTPUT
	DDRC|=(1<<5);
#elif DIO_u8PC5DIR == DIO_u8INPUT
	DDRC&=~(1<<5);
    1aa6:	a4 e3       	ldi	r26, 0x34	; 52
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	e4 e3       	ldi	r30, 0x34	; 52
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	8f 7d       	andi	r24, 0xDF	; 223
    1ab2:	8c 93       	st	X, r24
#else
#error "Direction of pin C is wrong !!"
#endif

#if DIO_u8PC6DIR == DIO_u8OUTPUT
	DDRC|=(1<<6);
    1ab4:	a4 e3       	ldi	r26, 0x34	; 52
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e4 e3       	ldi	r30, 0x34	; 52
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	80 64       	ori	r24, 0x40	; 64
    1ac0:	8c 93       	st	X, r24
#else
#error "Direction of pin C is wrong !!"
#endif

#if DIO_u8PC7DIR == DIO_u8OUTPUT
	DDRC|=(1<<7);
    1ac2:	a4 e3       	ldi	r26, 0x34	; 52
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e4 e3       	ldi	r30, 0x34	; 52
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	80 68       	ori	r24, 0x80	; 128
    1ace:	8c 93       	st	X, r24

// D pins
#if DIO_u8PD0DIR == DIO_u8OUTPUT
	DDRD|=(1<<0);
#elif DIO_u8PD0DIR == DIO_u8INPUT
	DDRD&=~(1<<0);
    1ad0:	a1 e3       	ldi	r26, 0x31	; 49
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	e1 e3       	ldi	r30, 0x31	; 49
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	8e 7f       	andi	r24, 0xFE	; 254
    1adc:	8c 93       	st	X, r24
#endif

#if DIO_u8PD1DIR == DIO_u8OUTPUT
	DDRD|=(1<<1);
#elif DIO_u8PD1DIR == DIO_u8INPUT
	DDRD&=~(1<<1);
    1ade:	a1 e3       	ldi	r26, 0x31	; 49
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e1 e3       	ldi	r30, 0x31	; 49
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	8d 7f       	andi	r24, 0xFD	; 253
    1aea:	8c 93       	st	X, r24
#endif

#if DIO_u8PD2DIR == DIO_u8OUTPUT
	DDRD|=(1<<2);
#elif DIO_u8PD2DIR == DIO_u8INPUT
	DDRD&=~(1<<2);
    1aec:	a1 e3       	ldi	r26, 0x31	; 49
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	e1 e3       	ldi	r30, 0x31	; 49
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	8b 7f       	andi	r24, 0xFB	; 251
    1af8:	8c 93       	st	X, r24
#else
#error "Direction of pin D is wrong !!"
#endif

#if DIO_u8PD3DIR == DIO_u8OUTPUT
	DDRD|=(1<<3);
    1afa:	a1 e3       	ldi	r26, 0x31	; 49
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	e1 e3       	ldi	r30, 0x31	; 49
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	88 60       	ori	r24, 0x08	; 8
    1b06:	8c 93       	st	X, r24
#endif

#if DIO_u8PD4DIR == DIO_u8OUTPUT
	DDRD|=(1<<4);
#elif DIO_u8PD4DIR == DIO_u8INPUT
	DDRD&=~(1<<4);
    1b08:	a1 e3       	ldi	r26, 0x31	; 49
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e1 e3       	ldi	r30, 0x31	; 49
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	8f 7e       	andi	r24, 0xEF	; 239
    1b14:	8c 93       	st	X, r24
#endif

#if DIO_u8PD5DIR == DIO_u8OUTPUT
	DDRD|=(1<<5);
#elif DIO_u8PD5DIR == DIO_u8INPUT
	DDRD&=~(1<<5);
    1b16:	a1 e3       	ldi	r26, 0x31	; 49
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	e1 e3       	ldi	r30, 0x31	; 49
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	8f 7d       	andi	r24, 0xDF	; 223
    1b22:	8c 93       	st	X, r24
#else
#error "Direction of pin D is wrong !!"
#endif

#if DIO_u8PD6DIR == DIO_u8OUTPUT
	DDRD|=(1<<6);
    1b24:	a1 e3       	ldi	r26, 0x31	; 49
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	e1 e3       	ldi	r30, 0x31	; 49
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	80 64       	ori	r24, 0x40	; 64
    1b30:	8c 93       	st	X, r24
#else
#error "Direction of pin D is wrong !!"
#endif

#if DIO_u8PD7DIR == DIO_u8OUTPUT
	DDRD|=(1<<7);
    1b32:	a1 e3       	ldi	r26, 0x31	; 49
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	e1 e3       	ldi	r30, 0x31	; 49
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	80 68       	ori	r24, 0x80	; 128
    1b3e:	8c 93       	st	X, r24
	DDRD&=~(1<<7);

#else
#error "Direction of pin A is wrong !!"
#endif
	Local_enuErrorState=ES_OK;
    1b40:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b44:	0f 90       	pop	r0
    1b46:	cf 91       	pop	r28
    1b48:	df 91       	pop	r29
    1b4a:	08 95       	ret

00001b4c <DIO_enuSetPinDirection>:
ES_t DIO_enuSetPinDirection(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 Copy_u8Direction){     //  set input or output pin
    1b4c:	df 93       	push	r29
    1b4e:	cf 93       	push	r28
    1b50:	00 d0       	rcall	.+0      	; 0x1b52 <DIO_enuSetPinDirection+0x6>
    1b52:	00 d0       	rcall	.+0      	; 0x1b54 <DIO_enuSetPinDirection+0x8>
    1b54:	00 d0       	rcall	.+0      	; 0x1b56 <DIO_enuSetPinDirection+0xa>
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	8a 83       	std	Y+2, r24	; 0x02
    1b5c:	6b 83       	std	Y+3, r22	; 0x03
    1b5e:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8GroupID <= DIO_u8GROUP_D && Copy_u8PinID<=DIO_u8PIN7 && Copy_u8Direction<=DIO_u8OUTPUT){
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	84 30       	cpi	r24, 0x04	; 4
    1b68:	08 f0       	brcs	.+2      	; 0x1b6c <DIO_enuSetPinDirection+0x20>
    1b6a:	d0 c0       	rjmp	.+416    	; 0x1d0c <DIO_enuSetPinDirection+0x1c0>
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	88 30       	cpi	r24, 0x08	; 8
    1b70:	08 f0       	brcs	.+2      	; 0x1b74 <DIO_enuSetPinDirection+0x28>
    1b72:	cc c0       	rjmp	.+408    	; 0x1d0c <DIO_enuSetPinDirection+0x1c0>
    1b74:	8c 81       	ldd	r24, Y+4	; 0x04
    1b76:	82 30       	cpi	r24, 0x02	; 2
    1b78:	08 f0       	brcs	.+2      	; 0x1b7c <DIO_enuSetPinDirection+0x30>
    1b7a:	c8 c0       	rjmp	.+400    	; 0x1d0c <DIO_enuSetPinDirection+0x1c0>
		switch(Copy_u8GroupID){
    1b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7e:	28 2f       	mov	r18, r24
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	3e 83       	std	Y+6, r19	; 0x06
    1b84:	2d 83       	std	Y+5, r18	; 0x05
    1b86:	6d 81       	ldd	r22, Y+5	; 0x05
    1b88:	7e 81       	ldd	r23, Y+6	; 0x06
    1b8a:	61 30       	cpi	r22, 0x01	; 1
    1b8c:	71 05       	cpc	r23, r1
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <DIO_enuSetPinDirection+0x46>
    1b90:	41 c0       	rjmp	.+130    	; 0x1c14 <DIO_enuSetPinDirection+0xc8>
    1b92:	8d 81       	ldd	r24, Y+5	; 0x05
    1b94:	9e 81       	ldd	r25, Y+6	; 0x06
    1b96:	82 30       	cpi	r24, 0x02	; 2
    1b98:	91 05       	cpc	r25, r1
    1b9a:	34 f4       	brge	.+12     	; 0x1ba8 <DIO_enuSetPinDirection+0x5c>
    1b9c:	2d 81       	ldd	r18, Y+5	; 0x05
    1b9e:	3e 81       	ldd	r19, Y+6	; 0x06
    1ba0:	21 15       	cp	r18, r1
    1ba2:	31 05       	cpc	r19, r1
    1ba4:	71 f0       	breq	.+28     	; 0x1bc2 <DIO_enuSetPinDirection+0x76>
    1ba6:	b0 c0       	rjmp	.+352    	; 0x1d08 <DIO_enuSetPinDirection+0x1bc>
    1ba8:	6d 81       	ldd	r22, Y+5	; 0x05
    1baa:	7e 81       	ldd	r23, Y+6	; 0x06
    1bac:	62 30       	cpi	r22, 0x02	; 2
    1bae:	71 05       	cpc	r23, r1
    1bb0:	09 f4       	brne	.+2      	; 0x1bb4 <DIO_enuSetPinDirection+0x68>
    1bb2:	59 c0       	rjmp	.+178    	; 0x1c66 <DIO_enuSetPinDirection+0x11a>
    1bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb8:	83 30       	cpi	r24, 0x03	; 3
    1bba:	91 05       	cpc	r25, r1
    1bbc:	09 f4       	brne	.+2      	; 0x1bc0 <DIO_enuSetPinDirection+0x74>
    1bbe:	7c c0       	rjmp	.+248    	; 0x1cb8 <DIO_enuSetPinDirection+0x16c>
    1bc0:	a3 c0       	rjmp	.+326    	; 0x1d08 <DIO_enuSetPinDirection+0x1bc>
		case DIO_u8GROUP_A :
			DDRA &=~(DIO_BIT_MASK<<Copy_u8PinID);
    1bc2:	aa e3       	ldi	r26, 0x3A	; 58
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	ea e3       	ldi	r30, 0x3A	; 58
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	48 2f       	mov	r20, r24
    1bce:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd0:	28 2f       	mov	r18, r24
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	02 c0       	rjmp	.+4      	; 0x1bde <DIO_enuSetPinDirection+0x92>
    1bda:	88 0f       	add	r24, r24
    1bdc:	99 1f       	adc	r25, r25
    1bde:	2a 95       	dec	r18
    1be0:	e2 f7       	brpl	.-8      	; 0x1bda <DIO_enuSetPinDirection+0x8e>
    1be2:	80 95       	com	r24
    1be4:	84 23       	and	r24, r20
    1be6:	8c 93       	st	X, r24
			DDRA |=(Copy_u8Direction<<Copy_u8PinID);  //SET OR CLEAR
    1be8:	aa e3       	ldi	r26, 0x3A	; 58
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	ea e3       	ldi	r30, 0x3A	; 58
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	48 2f       	mov	r20, r24
    1bf4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfc:	88 2f       	mov	r24, r24
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	b9 01       	movw	r22, r18
    1c02:	02 c0       	rjmp	.+4      	; 0x1c08 <DIO_enuSetPinDirection+0xbc>
    1c04:	66 0f       	add	r22, r22
    1c06:	77 1f       	adc	r23, r23
    1c08:	8a 95       	dec	r24
    1c0a:	e2 f7       	brpl	.-8      	; 0x1c04 <DIO_enuSetPinDirection+0xb8>
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	84 2b       	or	r24, r20
    1c10:	8c 93       	st	X, r24
    1c12:	7a c0       	rjmp	.+244    	; 0x1d08 <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_B :
			DDRB &=~(DIO_BIT_MASK<<Copy_u8PinID);
    1c14:	a7 e3       	ldi	r26, 0x37	; 55
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	e7 e3       	ldi	r30, 0x37	; 55
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	48 2f       	mov	r20, r24
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	28 2f       	mov	r18, r24
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <DIO_enuSetPinDirection+0xe4>
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	2a 95       	dec	r18
    1c32:	e2 f7       	brpl	.-8      	; 0x1c2c <DIO_enuSetPinDirection+0xe0>
    1c34:	80 95       	com	r24
    1c36:	84 23       	and	r24, r20
    1c38:	8c 93       	st	X, r24
			DDRB |=(Copy_u8Direction<<Copy_u8PinID);  //SET OR CLEAR
    1c3a:	a7 e3       	ldi	r26, 0x37	; 55
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	e7 e3       	ldi	r30, 0x37	; 55
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	48 2f       	mov	r20, r24
    1c46:	8c 81       	ldd	r24, Y+4	; 0x04
    1c48:	28 2f       	mov	r18, r24
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	88 2f       	mov	r24, r24
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	b9 01       	movw	r22, r18
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <DIO_enuSetPinDirection+0x10e>
    1c56:	66 0f       	add	r22, r22
    1c58:	77 1f       	adc	r23, r23
    1c5a:	8a 95       	dec	r24
    1c5c:	e2 f7       	brpl	.-8      	; 0x1c56 <DIO_enuSetPinDirection+0x10a>
    1c5e:	cb 01       	movw	r24, r22
    1c60:	84 2b       	or	r24, r20
    1c62:	8c 93       	st	X, r24
    1c64:	51 c0       	rjmp	.+162    	; 0x1d08 <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_C :
			DDRC &=~(DIO_BIT_MASK<<Copy_u8PinID);
    1c66:	a4 e3       	ldi	r26, 0x34	; 52
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	e4 e3       	ldi	r30, 0x34	; 52
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	48 2f       	mov	r20, r24
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	28 2f       	mov	r18, r24
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <DIO_enuSetPinDirection+0x136>
    1c7e:	88 0f       	add	r24, r24
    1c80:	99 1f       	adc	r25, r25
    1c82:	2a 95       	dec	r18
    1c84:	e2 f7       	brpl	.-8      	; 0x1c7e <DIO_enuSetPinDirection+0x132>
    1c86:	80 95       	com	r24
    1c88:	84 23       	and	r24, r20
    1c8a:	8c 93       	st	X, r24
			DDRC |=(Copy_u8Direction<<Copy_u8PinID);  //SET OR CLEAR
    1c8c:	a4 e3       	ldi	r26, 0x34	; 52
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	e4 e3       	ldi	r30, 0x34	; 52
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	48 2f       	mov	r20, r24
    1c98:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9a:	28 2f       	mov	r18, r24
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca0:	88 2f       	mov	r24, r24
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	b9 01       	movw	r22, r18
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <DIO_enuSetPinDirection+0x160>
    1ca8:	66 0f       	add	r22, r22
    1caa:	77 1f       	adc	r23, r23
    1cac:	8a 95       	dec	r24
    1cae:	e2 f7       	brpl	.-8      	; 0x1ca8 <DIO_enuSetPinDirection+0x15c>
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	84 2b       	or	r24, r20
    1cb4:	8c 93       	st	X, r24
    1cb6:	28 c0       	rjmp	.+80     	; 0x1d08 <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_D :
			DDRD &=~(DIO_BIT_MASK<<Copy_u8PinID);
    1cb8:	a1 e3       	ldi	r26, 0x31	; 49
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	e1 e3       	ldi	r30, 0x31	; 49
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	48 2f       	mov	r20, r24
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	28 2f       	mov	r18, r24
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <DIO_enuSetPinDirection+0x188>
    1cd0:	88 0f       	add	r24, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	2a 95       	dec	r18
    1cd6:	e2 f7       	brpl	.-8      	; 0x1cd0 <DIO_enuSetPinDirection+0x184>
    1cd8:	80 95       	com	r24
    1cda:	84 23       	and	r24, r20
    1cdc:	8c 93       	st	X, r24
			DDRD |=(Copy_u8Direction<<Copy_u8PinID);  //SET OR CLEAR
    1cde:	a1 e3       	ldi	r26, 0x31	; 49
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	e1 e3       	ldi	r30, 0x31	; 49
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	48 2f       	mov	r20, r24
    1cea:	8c 81       	ldd	r24, Y+4	; 0x04
    1cec:	28 2f       	mov	r18, r24
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	88 2f       	mov	r24, r24
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	b9 01       	movw	r22, r18
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <DIO_enuSetPinDirection+0x1b2>
    1cfa:	66 0f       	add	r22, r22
    1cfc:	77 1f       	adc	r23, r23
    1cfe:	8a 95       	dec	r24
    1d00:	e2 f7       	brpl	.-8      	; 0x1cfa <DIO_enuSetPinDirection+0x1ae>
    1d02:	cb 01       	movw	r24, r22
    1d04:	84 2b       	or	r24, r20
    1d06:	8c 93       	st	X, r24
			break;

		}
		Local_enuErrorState=ES_OK;
    1d08:	19 82       	std	Y+1, r1	; 0x01
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <DIO_enuSetPinDirection+0x1c4>

	}
	else{
		Local_enuErrorState=ES_OUT_OF_RANGE;
    1d0c:	82 e0       	ldi	r24, 0x02	; 2
    1d0e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1d10:	89 81       	ldd	r24, Y+1	; 0x01

}
    1d12:	26 96       	adiw	r28, 0x06	; 6
    1d14:	0f b6       	in	r0, 0x3f	; 63
    1d16:	f8 94       	cli
    1d18:	de bf       	out	0x3e, r29	; 62
    1d1a:	0f be       	out	0x3f, r0	; 63
    1d1c:	cd bf       	out	0x3d, r28	; 61
    1d1e:	cf 91       	pop	r28
    1d20:	df 91       	pop	r29
    1d22:	08 95       	ret

00001d24 <DIO_enuSetPinValue>:
ES_t DIO_enuSetPinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 Copy_u8Value){				//  set or clear pin
    1d24:	df 93       	push	r29
    1d26:	cf 93       	push	r28
    1d28:	00 d0       	rcall	.+0      	; 0x1d2a <DIO_enuSetPinValue+0x6>
    1d2a:	00 d0       	rcall	.+0      	; 0x1d2c <DIO_enuSetPinValue+0x8>
    1d2c:	00 d0       	rcall	.+0      	; 0x1d2e <DIO_enuSetPinValue+0xa>
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
    1d32:	8a 83       	std	Y+2, r24	; 0x02
    1d34:	6b 83       	std	Y+3, r22	; 0x03
    1d36:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8GroupID <= DIO_u8GROUP_D && Copy_u8PinID<=DIO_u8PIN7 && Copy_u8Value <=DIO_u8OUTPUT){
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	84 30       	cpi	r24, 0x04	; 4
    1d40:	08 f0       	brcs	.+2      	; 0x1d44 <DIO_enuSetPinValue+0x20>
    1d42:	d0 c0       	rjmp	.+416    	; 0x1ee4 <DIO_enuSetPinValue+0x1c0>
    1d44:	8b 81       	ldd	r24, Y+3	; 0x03
    1d46:	88 30       	cpi	r24, 0x08	; 8
    1d48:	08 f0       	brcs	.+2      	; 0x1d4c <DIO_enuSetPinValue+0x28>
    1d4a:	cc c0       	rjmp	.+408    	; 0x1ee4 <DIO_enuSetPinValue+0x1c0>
    1d4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4e:	82 30       	cpi	r24, 0x02	; 2
    1d50:	08 f0       	brcs	.+2      	; 0x1d54 <DIO_enuSetPinValue+0x30>
    1d52:	c8 c0       	rjmp	.+400    	; 0x1ee4 <DIO_enuSetPinValue+0x1c0>
		switch(Copy_u8GroupID){
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	3e 83       	std	Y+6, r19	; 0x06
    1d5c:	2d 83       	std	Y+5, r18	; 0x05
    1d5e:	6d 81       	ldd	r22, Y+5	; 0x05
    1d60:	7e 81       	ldd	r23, Y+6	; 0x06
    1d62:	61 30       	cpi	r22, 0x01	; 1
    1d64:	71 05       	cpc	r23, r1
    1d66:	09 f4       	brne	.+2      	; 0x1d6a <DIO_enuSetPinValue+0x46>
    1d68:	41 c0       	rjmp	.+130    	; 0x1dec <DIO_enuSetPinValue+0xc8>
    1d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6e:	82 30       	cpi	r24, 0x02	; 2
    1d70:	91 05       	cpc	r25, r1
    1d72:	34 f4       	brge	.+12     	; 0x1d80 <DIO_enuSetPinValue+0x5c>
    1d74:	2d 81       	ldd	r18, Y+5	; 0x05
    1d76:	3e 81       	ldd	r19, Y+6	; 0x06
    1d78:	21 15       	cp	r18, r1
    1d7a:	31 05       	cpc	r19, r1
    1d7c:	71 f0       	breq	.+28     	; 0x1d9a <DIO_enuSetPinValue+0x76>
    1d7e:	b0 c0       	rjmp	.+352    	; 0x1ee0 <DIO_enuSetPinValue+0x1bc>
    1d80:	6d 81       	ldd	r22, Y+5	; 0x05
    1d82:	7e 81       	ldd	r23, Y+6	; 0x06
    1d84:	62 30       	cpi	r22, 0x02	; 2
    1d86:	71 05       	cpc	r23, r1
    1d88:	09 f4       	brne	.+2      	; 0x1d8c <DIO_enuSetPinValue+0x68>
    1d8a:	59 c0       	rjmp	.+178    	; 0x1e3e <DIO_enuSetPinValue+0x11a>
    1d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d90:	83 30       	cpi	r24, 0x03	; 3
    1d92:	91 05       	cpc	r25, r1
    1d94:	09 f4       	brne	.+2      	; 0x1d98 <DIO_enuSetPinValue+0x74>
    1d96:	7c c0       	rjmp	.+248    	; 0x1e90 <DIO_enuSetPinValue+0x16c>
    1d98:	a3 c0       	rjmp	.+326    	; 0x1ee0 <DIO_enuSetPinValue+0x1bc>
		case DIO_u8GROUP_A:
			PORTA &=~(DIO_BIT_MASK<<Copy_u8PinID);
    1d9a:	ab e3       	ldi	r26, 0x3B	; 59
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	eb e3       	ldi	r30, 0x3B	; 59
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	48 2f       	mov	r20, r24
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	28 2f       	mov	r18, r24
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	02 c0       	rjmp	.+4      	; 0x1db6 <DIO_enuSetPinValue+0x92>
    1db2:	88 0f       	add	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	2a 95       	dec	r18
    1db8:	e2 f7       	brpl	.-8      	; 0x1db2 <DIO_enuSetPinValue+0x8e>
    1dba:	80 95       	com	r24
    1dbc:	84 23       	and	r24, r20
    1dbe:	8c 93       	st	X, r24
			PORTA |=(Copy_u8Value<<Copy_u8PinID);
    1dc0:	ab e3       	ldi	r26, 0x3B	; 59
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	eb e3       	ldi	r30, 0x3B	; 59
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	48 2f       	mov	r20, r24
    1dcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	88 2f       	mov	r24, r24
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	b9 01       	movw	r22, r18
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <DIO_enuSetPinValue+0xbc>
    1ddc:	66 0f       	add	r22, r22
    1dde:	77 1f       	adc	r23, r23
    1de0:	8a 95       	dec	r24
    1de2:	e2 f7       	brpl	.-8      	; 0x1ddc <DIO_enuSetPinValue+0xb8>
    1de4:	cb 01       	movw	r24, r22
    1de6:	84 2b       	or	r24, r20
    1de8:	8c 93       	st	X, r24
    1dea:	7a c0       	rjmp	.+244    	; 0x1ee0 <DIO_enuSetPinValue+0x1bc>
			break;
		case DIO_u8GROUP_B:
			PORTB &=~(DIO_BIT_MASK<<Copy_u8PinID);
    1dec:	a8 e3       	ldi	r26, 0x38	; 56
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e8 e3       	ldi	r30, 0x38	; 56
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	48 2f       	mov	r20, r24
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	28 2f       	mov	r18, r24
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	02 c0       	rjmp	.+4      	; 0x1e08 <DIO_enuSetPinValue+0xe4>
    1e04:	88 0f       	add	r24, r24
    1e06:	99 1f       	adc	r25, r25
    1e08:	2a 95       	dec	r18
    1e0a:	e2 f7       	brpl	.-8      	; 0x1e04 <DIO_enuSetPinValue+0xe0>
    1e0c:	80 95       	com	r24
    1e0e:	84 23       	and	r24, r20
    1e10:	8c 93       	st	X, r24
			PORTB |=(Copy_u8Value<<Copy_u8PinID);
    1e12:	a8 e3       	ldi	r26, 0x38	; 56
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	e8 e3       	ldi	r30, 0x38	; 56
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	48 2f       	mov	r20, r24
    1e1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e20:	28 2f       	mov	r18, r24
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	88 2f       	mov	r24, r24
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	b9 01       	movw	r22, r18
    1e2c:	02 c0       	rjmp	.+4      	; 0x1e32 <DIO_enuSetPinValue+0x10e>
    1e2e:	66 0f       	add	r22, r22
    1e30:	77 1f       	adc	r23, r23
    1e32:	8a 95       	dec	r24
    1e34:	e2 f7       	brpl	.-8      	; 0x1e2e <DIO_enuSetPinValue+0x10a>
    1e36:	cb 01       	movw	r24, r22
    1e38:	84 2b       	or	r24, r20
    1e3a:	8c 93       	st	X, r24
    1e3c:	51 c0       	rjmp	.+162    	; 0x1ee0 <DIO_enuSetPinValue+0x1bc>
			break;
		case DIO_u8GROUP_C:
			PORTC &=~(DIO_BIT_MASK<<Copy_u8PinID);
    1e3e:	a5 e3       	ldi	r26, 0x35	; 53
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	e5 e3       	ldi	r30, 0x35	; 53
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	48 2f       	mov	r20, r24
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	28 2f       	mov	r18, r24
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	02 c0       	rjmp	.+4      	; 0x1e5a <DIO_enuSetPinValue+0x136>
    1e56:	88 0f       	add	r24, r24
    1e58:	99 1f       	adc	r25, r25
    1e5a:	2a 95       	dec	r18
    1e5c:	e2 f7       	brpl	.-8      	; 0x1e56 <DIO_enuSetPinValue+0x132>
    1e5e:	80 95       	com	r24
    1e60:	84 23       	and	r24, r20
    1e62:	8c 93       	st	X, r24
			PORTC |=(Copy_u8Value<<Copy_u8PinID);
    1e64:	a5 e3       	ldi	r26, 0x35	; 53
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	e5 e3       	ldi	r30, 0x35	; 53
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	48 2f       	mov	r20, r24
    1e70:	8c 81       	ldd	r24, Y+4	; 0x04
    1e72:	28 2f       	mov	r18, r24
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	8b 81       	ldd	r24, Y+3	; 0x03
    1e78:	88 2f       	mov	r24, r24
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	b9 01       	movw	r22, r18
    1e7e:	02 c0       	rjmp	.+4      	; 0x1e84 <DIO_enuSetPinValue+0x160>
    1e80:	66 0f       	add	r22, r22
    1e82:	77 1f       	adc	r23, r23
    1e84:	8a 95       	dec	r24
    1e86:	e2 f7       	brpl	.-8      	; 0x1e80 <DIO_enuSetPinValue+0x15c>
    1e88:	cb 01       	movw	r24, r22
    1e8a:	84 2b       	or	r24, r20
    1e8c:	8c 93       	st	X, r24
    1e8e:	28 c0       	rjmp	.+80     	; 0x1ee0 <DIO_enuSetPinValue+0x1bc>
			break;
		case DIO_u8GROUP_D:
			PORTD &=~(DIO_BIT_MASK<<Copy_u8PinID);
    1e90:	a2 e3       	ldi	r26, 0x32	; 50
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	e2 e3       	ldi	r30, 0x32	; 50
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	48 2f       	mov	r20, r24
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	28 2f       	mov	r18, r24
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <DIO_enuSetPinValue+0x188>
    1ea8:	88 0f       	add	r24, r24
    1eaa:	99 1f       	adc	r25, r25
    1eac:	2a 95       	dec	r18
    1eae:	e2 f7       	brpl	.-8      	; 0x1ea8 <DIO_enuSetPinValue+0x184>
    1eb0:	80 95       	com	r24
    1eb2:	84 23       	and	r24, r20
    1eb4:	8c 93       	st	X, r24
			PORTD |=(Copy_u8Value<<Copy_u8PinID);
    1eb6:	a2 e3       	ldi	r26, 0x32	; 50
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e2 e3       	ldi	r30, 0x32	; 50
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	48 2f       	mov	r20, r24
    1ec2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec4:	28 2f       	mov	r18, r24
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	88 2f       	mov	r24, r24
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	b9 01       	movw	r22, r18
    1ed0:	02 c0       	rjmp	.+4      	; 0x1ed6 <DIO_enuSetPinValue+0x1b2>
    1ed2:	66 0f       	add	r22, r22
    1ed4:	77 1f       	adc	r23, r23
    1ed6:	8a 95       	dec	r24
    1ed8:	e2 f7       	brpl	.-8      	; 0x1ed2 <DIO_enuSetPinValue+0x1ae>
    1eda:	cb 01       	movw	r24, r22
    1edc:	84 2b       	or	r24, r20
    1ede:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1ee0:	19 82       	std	Y+1, r1	; 0x01
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <DIO_enuSetPinValue+0x1c4>
	}
	else{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1ee4:	82 e0       	ldi	r24, 0x02	; 2
    1ee6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState ;
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eea:	26 96       	adiw	r28, 0x06	; 6
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	f8 94       	cli
    1ef0:	de bf       	out	0x3e, r29	; 62
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	cd bf       	out	0x3d, r28	; 61
    1ef6:	cf 91       	pop	r28
    1ef8:	df 91       	pop	r29
    1efa:	08 95       	ret

00001efc <DIO_enuTogglePinValue>:
ES_t DIO_enuTogglePinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID){
    1efc:	df 93       	push	r29
    1efe:	cf 93       	push	r28
    1f00:	00 d0       	rcall	.+0      	; 0x1f02 <DIO_enuTogglePinValue+0x6>
    1f02:	00 d0       	rcall	.+0      	; 0x1f04 <DIO_enuTogglePinValue+0x8>
    1f04:	0f 92       	push	r0
    1f06:	cd b7       	in	r28, 0x3d	; 61
    1f08:	de b7       	in	r29, 0x3e	; 62
    1f0a:	8a 83       	std	Y+2, r24	; 0x02
    1f0c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    1f12:	8a 81       	ldd	r24, Y+2	; 0x02
    1f14:	84 30       	cpi	r24, 0x04	; 4
    1f16:	08 f0       	brcs	.+2      	; 0x1f1a <DIO_enuTogglePinValue+0x1e>
    1f18:	74 c0       	rjmp	.+232    	; 0x2002 <DIO_enuTogglePinValue+0x106>
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	88 30       	cpi	r24, 0x08	; 8
    1f1e:	08 f0       	brcs	.+2      	; 0x1f22 <DIO_enuTogglePinValue+0x26>
    1f20:	70 c0       	rjmp	.+224    	; 0x2002 <DIO_enuTogglePinValue+0x106>
			Copy_u8PinID <= DIO_u8PIN7 )
	{
		switch (Copy_u8GroupID)
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	28 2f       	mov	r18, r24
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	3d 83       	std	Y+5, r19	; 0x05
    1f2a:	2c 83       	std	Y+4, r18	; 0x04
    1f2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f30:	81 30       	cpi	r24, 0x01	; 1
    1f32:	91 05       	cpc	r25, r1
    1f34:	49 f1       	breq	.+82     	; 0x1f88 <DIO_enuTogglePinValue+0x8c>
    1f36:	2c 81       	ldd	r18, Y+4	; 0x04
    1f38:	3d 81       	ldd	r19, Y+5	; 0x05
    1f3a:	22 30       	cpi	r18, 0x02	; 2
    1f3c:	31 05       	cpc	r19, r1
    1f3e:	2c f4       	brge	.+10     	; 0x1f4a <DIO_enuTogglePinValue+0x4e>
    1f40:	8c 81       	ldd	r24, Y+4	; 0x04
    1f42:	9d 81       	ldd	r25, Y+5	; 0x05
    1f44:	00 97       	sbiw	r24, 0x00	; 0
    1f46:	61 f0       	breq	.+24     	; 0x1f60 <DIO_enuTogglePinValue+0x64>
    1f48:	5a c0       	rjmp	.+180    	; 0x1ffe <DIO_enuTogglePinValue+0x102>
    1f4a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f4c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f4e:	22 30       	cpi	r18, 0x02	; 2
    1f50:	31 05       	cpc	r19, r1
    1f52:	71 f1       	breq	.+92     	; 0x1fb0 <DIO_enuTogglePinValue+0xb4>
    1f54:	8c 81       	ldd	r24, Y+4	; 0x04
    1f56:	9d 81       	ldd	r25, Y+5	; 0x05
    1f58:	83 30       	cpi	r24, 0x03	; 3
    1f5a:	91 05       	cpc	r25, r1
    1f5c:	e9 f1       	breq	.+122    	; 0x1fd8 <DIO_enuTogglePinValue+0xdc>
    1f5e:	4f c0       	rjmp	.+158    	; 0x1ffe <DIO_enuTogglePinValue+0x102>
		{
		case DIO_u8GROUP_A:
			PORTA ^=  (DIO_BIT_MASK << Copy_u8PinID);
    1f60:	ab e3       	ldi	r26, 0x3B	; 59
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	eb e3       	ldi	r30, 0x3B	; 59
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	48 2f       	mov	r20, r24
    1f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6e:	28 2f       	mov	r18, r24
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	02 2e       	mov	r0, r18
    1f78:	02 c0       	rjmp	.+4      	; 0x1f7e <DIO_enuTogglePinValue+0x82>
    1f7a:	88 0f       	add	r24, r24
    1f7c:	99 1f       	adc	r25, r25
    1f7e:	0a 94       	dec	r0
    1f80:	e2 f7       	brpl	.-8      	; 0x1f7a <DIO_enuTogglePinValue+0x7e>
    1f82:	84 27       	eor	r24, r20
    1f84:	8c 93       	st	X, r24
    1f86:	3b c0       	rjmp	.+118    	; 0x1ffe <DIO_enuTogglePinValue+0x102>
			break;

		case DIO_u8GROUP_B:
			PORTB ^=  (DIO_BIT_MASK << Copy_u8PinID);
    1f88:	a8 e3       	ldi	r26, 0x38	; 56
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	e8 e3       	ldi	r30, 0x38	; 56
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	48 2f       	mov	r20, r24
    1f94:	8b 81       	ldd	r24, Y+3	; 0x03
    1f96:	28 2f       	mov	r18, r24
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	02 2e       	mov	r0, r18
    1fa0:	02 c0       	rjmp	.+4      	; 0x1fa6 <DIO_enuTogglePinValue+0xaa>
    1fa2:	88 0f       	add	r24, r24
    1fa4:	99 1f       	adc	r25, r25
    1fa6:	0a 94       	dec	r0
    1fa8:	e2 f7       	brpl	.-8      	; 0x1fa2 <DIO_enuTogglePinValue+0xa6>
    1faa:	84 27       	eor	r24, r20
    1fac:	8c 93       	st	X, r24
    1fae:	27 c0       	rjmp	.+78     	; 0x1ffe <DIO_enuTogglePinValue+0x102>

			break;

		case DIO_u8GROUP_C:
			PORTC ^=  (DIO_BIT_MASK << Copy_u8PinID);
    1fb0:	a5 e3       	ldi	r26, 0x35	; 53
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	e5 e3       	ldi	r30, 0x35	; 53
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	48 2f       	mov	r20, r24
    1fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbe:	28 2f       	mov	r18, r24
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	02 2e       	mov	r0, r18
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <DIO_enuTogglePinValue+0xd2>
    1fca:	88 0f       	add	r24, r24
    1fcc:	99 1f       	adc	r25, r25
    1fce:	0a 94       	dec	r0
    1fd0:	e2 f7       	brpl	.-8      	; 0x1fca <DIO_enuTogglePinValue+0xce>
    1fd2:	84 27       	eor	r24, r20
    1fd4:	8c 93       	st	X, r24
    1fd6:	13 c0       	rjmp	.+38     	; 0x1ffe <DIO_enuTogglePinValue+0x102>

			break;

		case DIO_u8GROUP_D:
			PORTD ^=  (DIO_BIT_MASK << Copy_u8PinID);
    1fd8:	a2 e3       	ldi	r26, 0x32	; 50
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e2 e3       	ldi	r30, 0x32	; 50
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	48 2f       	mov	r20, r24
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe6:	28 2f       	mov	r18, r24
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	02 2e       	mov	r0, r18
    1ff0:	02 c0       	rjmp	.+4      	; 0x1ff6 <DIO_enuTogglePinValue+0xfa>
    1ff2:	88 0f       	add	r24, r24
    1ff4:	99 1f       	adc	r25, r25
    1ff6:	0a 94       	dec	r0
    1ff8:	e2 f7       	brpl	.-8      	; 0x1ff2 <DIO_enuTogglePinValue+0xf6>
    1ffa:	84 27       	eor	r24, r20
    1ffc:	8c 93       	st	X, r24

			break;

		}

		Local_enuErrorState = ES_OK;
    1ffe:	19 82       	std	Y+1, r1	; 0x01
    2000:	02 c0       	rjmp	.+4      	; 0x2006 <DIO_enuTogglePinValue+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    2002:	82 e0       	ldi	r24, 0x02	; 2
    2004:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    2006:	89 81       	ldd	r24, Y+1	; 0x01
}
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	cf 91       	pop	r28
    2014:	df 91       	pop	r29
    2016:	08 95       	ret

00002018 <DIO_enuGetPinValue>:
ES_t DIO_enuGetPinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 * Copy_u8PinValue){       // get the value of the input pin(0/1)
    2018:	df 93       	push	r29
    201a:	cf 93       	push	r28
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	27 97       	sbiw	r28, 0x07	; 7
    2022:	0f b6       	in	r0, 0x3f	; 63
    2024:	f8 94       	cli
    2026:	de bf       	out	0x3e, r29	; 62
    2028:	0f be       	out	0x3f, r0	; 63
    202a:	cd bf       	out	0x3d, r28	; 61
    202c:	8a 83       	std	Y+2, r24	; 0x02
    202e:	6b 83       	std	Y+3, r22	; 0x03
    2030:	5d 83       	std	Y+5, r21	; 0x05
    2032:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	89 83       	std	Y+1, r24	; 0x01
	if( Copy_u8PinValue != '\0'){
    2038:	8c 81       	ldd	r24, Y+4	; 0x04
    203a:	9d 81       	ldd	r25, Y+5	; 0x05
    203c:	00 97       	sbiw	r24, 0x00	; 0
    203e:	09 f4       	brne	.+2      	; 0x2042 <DIO_enuGetPinValue+0x2a>
    2040:	7d c0       	rjmp	.+250    	; 0x213c <DIO_enuGetPinValue+0x124>
		if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    2042:	8a 81       	ldd	r24, Y+2	; 0x02
    2044:	84 30       	cpi	r24, 0x04	; 4
    2046:	08 f0       	brcs	.+2      	; 0x204a <DIO_enuGetPinValue+0x32>
    2048:	76 c0       	rjmp	.+236    	; 0x2136 <DIO_enuGetPinValue+0x11e>
    204a:	8b 81       	ldd	r24, Y+3	; 0x03
    204c:	88 30       	cpi	r24, 0x08	; 8
    204e:	08 f0       	brcs	.+2      	; 0x2052 <DIO_enuGetPinValue+0x3a>
    2050:	72 c0       	rjmp	.+228    	; 0x2136 <DIO_enuGetPinValue+0x11e>
					Copy_u8PinID <= DIO_u8PIN7 )
			{
				switch (Copy_u8GroupID)
    2052:	8a 81       	ldd	r24, Y+2	; 0x02
    2054:	28 2f       	mov	r18, r24
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	3f 83       	std	Y+7, r19	; 0x07
    205a:	2e 83       	std	Y+6, r18	; 0x06
    205c:	4e 81       	ldd	r20, Y+6	; 0x06
    205e:	5f 81       	ldd	r21, Y+7	; 0x07
    2060:	41 30       	cpi	r20, 0x01	; 1
    2062:	51 05       	cpc	r21, r1
    2064:	59 f1       	breq	.+86     	; 0x20bc <DIO_enuGetPinValue+0xa4>
    2066:	8e 81       	ldd	r24, Y+6	; 0x06
    2068:	9f 81       	ldd	r25, Y+7	; 0x07
    206a:	82 30       	cpi	r24, 0x02	; 2
    206c:	91 05       	cpc	r25, r1
    206e:	34 f4       	brge	.+12     	; 0x207c <DIO_enuGetPinValue+0x64>
    2070:	2e 81       	ldd	r18, Y+6	; 0x06
    2072:	3f 81       	ldd	r19, Y+7	; 0x07
    2074:	21 15       	cp	r18, r1
    2076:	31 05       	cpc	r19, r1
    2078:	69 f0       	breq	.+26     	; 0x2094 <DIO_enuGetPinValue+0x7c>
    207a:	5b c0       	rjmp	.+182    	; 0x2132 <DIO_enuGetPinValue+0x11a>
    207c:	4e 81       	ldd	r20, Y+6	; 0x06
    207e:	5f 81       	ldd	r21, Y+7	; 0x07
    2080:	42 30       	cpi	r20, 0x02	; 2
    2082:	51 05       	cpc	r21, r1
    2084:	79 f1       	breq	.+94     	; 0x20e4 <DIO_enuGetPinValue+0xcc>
    2086:	8e 81       	ldd	r24, Y+6	; 0x06
    2088:	9f 81       	ldd	r25, Y+7	; 0x07
    208a:	83 30       	cpi	r24, 0x03	; 3
    208c:	91 05       	cpc	r25, r1
    208e:	09 f4       	brne	.+2      	; 0x2092 <DIO_enuGetPinValue+0x7a>
    2090:	3d c0       	rjmp	.+122    	; 0x210c <DIO_enuGetPinValue+0xf4>
    2092:	4f c0       	rjmp	.+158    	; 0x2132 <DIO_enuGetPinValue+0x11a>
				{
				case DIO_u8GROUP_A:
					* Copy_u8PinValue =  ( (PINA>>Copy_u8PinID)& DIO_BIT_MASK);
    2094:	e9 e3       	ldi	r30, 0x39	; 57
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	28 2f       	mov	r18, r24
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	8b 81       	ldd	r24, Y+3	; 0x03
    20a0:	88 2f       	mov	r24, r24
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	a9 01       	movw	r20, r18
    20a6:	02 c0       	rjmp	.+4      	; 0x20ac <DIO_enuGetPinValue+0x94>
    20a8:	55 95       	asr	r21
    20aa:	47 95       	ror	r20
    20ac:	8a 95       	dec	r24
    20ae:	e2 f7       	brpl	.-8      	; 0x20a8 <DIO_enuGetPinValue+0x90>
    20b0:	ca 01       	movw	r24, r20
    20b2:	81 70       	andi	r24, 0x01	; 1
    20b4:	ec 81       	ldd	r30, Y+4	; 0x04
    20b6:	fd 81       	ldd	r31, Y+5	; 0x05
    20b8:	80 83       	st	Z, r24
    20ba:	3b c0       	rjmp	.+118    	; 0x2132 <DIO_enuGetPinValue+0x11a>
					break;

				case DIO_u8GROUP_B:
					* Copy_u8PinValue =  ( (PINB>>Copy_u8PinID)& DIO_BIT_MASK);
    20bc:	e6 e3       	ldi	r30, 0x36	; 54
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	28 2f       	mov	r18, r24
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	8b 81       	ldd	r24, Y+3	; 0x03
    20c8:	88 2f       	mov	r24, r24
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	a9 01       	movw	r20, r18
    20ce:	02 c0       	rjmp	.+4      	; 0x20d4 <DIO_enuGetPinValue+0xbc>
    20d0:	55 95       	asr	r21
    20d2:	47 95       	ror	r20
    20d4:	8a 95       	dec	r24
    20d6:	e2 f7       	brpl	.-8      	; 0x20d0 <DIO_enuGetPinValue+0xb8>
    20d8:	ca 01       	movw	r24, r20
    20da:	81 70       	andi	r24, 0x01	; 1
    20dc:	ec 81       	ldd	r30, Y+4	; 0x04
    20de:	fd 81       	ldd	r31, Y+5	; 0x05
    20e0:	80 83       	st	Z, r24
    20e2:	27 c0       	rjmp	.+78     	; 0x2132 <DIO_enuGetPinValue+0x11a>

					break;

				case DIO_u8GROUP_C:
					* Copy_u8PinValue =  ( (PINC>>Copy_u8PinID)& DIO_BIT_MASK);
    20e4:	e3 e3       	ldi	r30, 0x33	; 51
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	80 81       	ld	r24, Z
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	88 2f       	mov	r24, r24
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	a9 01       	movw	r20, r18
    20f6:	02 c0       	rjmp	.+4      	; 0x20fc <DIO_enuGetPinValue+0xe4>
    20f8:	55 95       	asr	r21
    20fa:	47 95       	ror	r20
    20fc:	8a 95       	dec	r24
    20fe:	e2 f7       	brpl	.-8      	; 0x20f8 <DIO_enuGetPinValue+0xe0>
    2100:	ca 01       	movw	r24, r20
    2102:	81 70       	andi	r24, 0x01	; 1
    2104:	ec 81       	ldd	r30, Y+4	; 0x04
    2106:	fd 81       	ldd	r31, Y+5	; 0x05
    2108:	80 83       	st	Z, r24
    210a:	13 c0       	rjmp	.+38     	; 0x2132 <DIO_enuGetPinValue+0x11a>

					break;

				case DIO_u8GROUP_D:
					* Copy_u8PinValue =  ( (PIND>>Copy_u8PinID)& DIO_BIT_MASK);
    210c:	e0 e3       	ldi	r30, 0x30	; 48
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	28 2f       	mov	r18, r24
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	88 2f       	mov	r24, r24
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	a9 01       	movw	r20, r18
    211e:	02 c0       	rjmp	.+4      	; 0x2124 <DIO_enuGetPinValue+0x10c>
    2120:	55 95       	asr	r21
    2122:	47 95       	ror	r20
    2124:	8a 95       	dec	r24
    2126:	e2 f7       	brpl	.-8      	; 0x2120 <DIO_enuGetPinValue+0x108>
    2128:	ca 01       	movw	r24, r20
    212a:	81 70       	andi	r24, 0x01	; 1
    212c:	ec 81       	ldd	r30, Y+4	; 0x04
    212e:	fd 81       	ldd	r31, Y+5	; 0x05
    2130:	80 83       	st	Z, r24

					break;

				}

				Local_enuErrorState = ES_OK;
    2132:	19 82       	std	Y+1, r1	; 0x01
    2134:	05 c0       	rjmp	.+10     	; 0x2140 <DIO_enuGetPinValue+0x128>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    2136:	82 e0       	ldi	r24, 0x02	; 2
    2138:	89 83       	std	Y+1, r24	; 0x01
    213a:	02 c0       	rjmp	.+4      	; 0x2140 <DIO_enuGetPinValue+0x128>
			}
	}
	else{
		Local_enuErrorState = ES_NULL_POINTER;
    213c:	83 e0       	ldi	r24, 0x03	; 3
    213e:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    2140:	89 81       	ldd	r24, Y+1	; 0x01
}
    2142:	27 96       	adiw	r28, 0x07	; 7
    2144:	0f b6       	in	r0, 0x3f	; 63
    2146:	f8 94       	cli
    2148:	de bf       	out	0x3e, r29	; 62
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	cd bf       	out	0x3d, r28	; 61
    214e:	cf 91       	pop	r28
    2150:	df 91       	pop	r29
    2152:	08 95       	ret

00002154 <ADC_enuInit>:
#include"../../Libraries/stdTypes.h"

#include"ADC_Config.h"
#include"ADC_Priv.h"

ES_t ADC_enuInit(void){
    2154:	df 93       	push	r29
    2156:	cf 93       	push	r28
    2158:	0f 92       	push	r0
    215a:	cd b7       	in	r28, 0x3d	; 61
    215c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	89 83       	std	Y+1, r24	; 0x01
	//for selecting VoltageReference
#if VoltageReference == AREF
	ADMUX|=(0<<6);
#elif VoltageReference == AVCC
	ADMUX|=(1<<6);
    2162:	a7 e2       	ldi	r26, 0x27	; 39
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	e7 e2       	ldi	r30, 0x27	; 39
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	80 64       	ori	r24, 0x40	; 64
    216e:	8c 93       	st	X, r24
	ADMUX|=(2<<6);
#endif

	//for the direction adjust
#if ADC_Adjust == RightAdjust
	ADMUX|=(0<<5);
    2170:	a7 e2       	ldi	r26, 0x27	; 39
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	e7 e2       	ldi	r30, 0x27	; 39
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	8c 93       	st	X, r24
#elif ADC_ChannelNum == ADC1
	ADMUX|=(1<<0);
#elif ADC_ChannelNum == ADC2
	ADMUX|=(2<<0);
#elif ADC_ChannelNum == ADC3
	ADMUX|=(3<<0);
    217c:	a7 e2       	ldi	r26, 0x27	; 39
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e7 e2       	ldi	r30, 0x27	; 39
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	83 60       	ori	r24, 0x03	; 3
    2188:	8c 93       	st	X, r24
#elif ADC_ChannelNum == ADC7
	ADMUX|=(7<<1);
#endif

	// for prescaler Bit
	ADCSRA|=(7<<0);
    218a:	a6 e2       	ldi	r26, 0x26	; 38
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	e6 e2       	ldi	r30, 0x26	; 38
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	87 60       	ori	r24, 0x07	; 7
    2196:	8c 93       	st	X, r24
	// Auto Trigger Enable
	ADCSRA|=(1<<5);
    2198:	a6 e2       	ldi	r26, 0x26	; 38
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	e6 e2       	ldi	r30, 0x26	; 38
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	80 62       	ori	r24, 0x20	; 32
    21a4:	8c 93       	st	X, r24
	//Enable ADC
	ADCSRA|=(1<<7);
    21a6:	a6 e2       	ldi	r26, 0x26	; 38
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	e6 e2       	ldi	r30, 0x26	; 38
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	80 68       	ori	r24, 0x80	; 128
    21b2:	8c 93       	st	X, r24

	Local_enuErrorState=ES_OK;
    21b4:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    21b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    21b8:	0f 90       	pop	r0
    21ba:	cf 91       	pop	r28
    21bc:	df 91       	pop	r29
    21be:	08 95       	ret

000021c0 <ADC_enuRead>:

ES_t ADC_enuRead(u16* Copy_Pu16ReadValue){
    21c0:	df 93       	push	r29
    21c2:	cf 93       	push	r28
    21c4:	00 d0       	rcall	.+0      	; 0x21c6 <ADC_enuRead+0x6>
    21c6:	0f 92       	push	r0
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
    21cc:	9b 83       	std	Y+3, r25	; 0x03
    21ce:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Pu16ReadValue!=NULL){
    21d4:	8a 81       	ldd	r24, Y+2	; 0x02
    21d6:	9b 81       	ldd	r25, Y+3	; 0x03
    21d8:	00 97       	sbiw	r24, 0x00	; 0
    21da:	a9 f1       	breq	.+106    	; 0x2246 <ADC_enuRead+0x86>
		//Start Conversion
		ADCSRA|=(1<<6);
    21dc:	a6 e2       	ldi	r26, 0x26	; 38
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	e6 e2       	ldi	r30, 0x26	; 38
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	80 64       	ori	r24, 0x40	; 64
    21e8:	8c 93       	st	X, r24
		while(((ADCSRA>>4)&1)==0);
    21ea:	e6 e2       	ldi	r30, 0x26	; 38
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	80 81       	ld	r24, Z
    21f0:	82 95       	swap	r24
    21f2:	8f 70       	andi	r24, 0x0F	; 15
    21f4:	88 2f       	mov	r24, r24
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	81 70       	andi	r24, 0x01	; 1
    21fa:	90 70       	andi	r25, 0x00	; 0
    21fc:	00 97       	sbiw	r24, 0x00	; 0
    21fe:	a9 f3       	breq	.-22     	; 0x21ea <ADC_enuRead+0x2a>
#if ADC_Adjust == RightAdjust
		*Copy_Pu16ReadValue= ADCL + ((ADCH>>0)&1)*256 + ((ADCH>>1)&1)*512;
    2200:	e4 e2       	ldi	r30, 0x24	; 36
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	48 2f       	mov	r20, r24
    2208:	50 e0       	ldi	r21, 0x00	; 0
    220a:	e5 e2       	ldi	r30, 0x25	; 37
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	86 95       	lsr	r24
    2212:	88 2f       	mov	r24, r24
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	81 70       	andi	r24, 0x01	; 1
    2218:	90 70       	andi	r25, 0x00	; 0
    221a:	9c 01       	movw	r18, r24
    221c:	22 0f       	add	r18, r18
    221e:	33 1f       	adc	r19, r19
    2220:	e5 e2       	ldi	r30, 0x25	; 37
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	88 2f       	mov	r24, r24
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	81 70       	andi	r24, 0x01	; 1
    222c:	90 70       	andi	r25, 0x00	; 0
    222e:	82 0f       	add	r24, r18
    2230:	93 1f       	adc	r25, r19
    2232:	98 2f       	mov	r25, r24
    2234:	88 27       	eor	r24, r24
    2236:	84 0f       	add	r24, r20
    2238:	95 1f       	adc	r25, r21
    223a:	ea 81       	ldd	r30, Y+2	; 0x02
    223c:	fb 81       	ldd	r31, Y+3	; 0x03
    223e:	91 83       	std	Z+1, r25	; 0x01
    2240:	80 83       	st	Z, r24
#elif ADC_Adjust == LeftAdjust
		*Copy_Pu16ReadValue= ADCH + ((ADCL>>0)&7)*128 + ((ADCL>>6)&1)*64;
#endif

		Local_enuErrorState=ES_OK;
    2242:	19 82       	std	Y+1, r1	; 0x01
    2244:	02 c0       	rjmp	.+4      	; 0x224a <ADC_enuRead+0x8a>
	}
	else{
		Local_enuErrorState=ES_NULL_POINTER;
    2246:	83 e0       	ldi	r24, 0x03	; 3
    2248:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    224a:	89 81       	ldd	r24, Y+1	; 0x01
}
    224c:	0f 90       	pop	r0
    224e:	0f 90       	pop	r0
    2250:	0f 90       	pop	r0
    2252:	cf 91       	pop	r28
    2254:	df 91       	pop	r29
    2256:	08 95       	ret

00002258 <ADC_enuDisableADC>:
ES_t ADC_enuDisableADC(void){
    2258:	df 93       	push	r29
    225a:	cf 93       	push	r28
    225c:	0f 92       	push	r0
    225e:	cd b7       	in	r28, 0x3d	; 61
    2260:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA &=~(1<<7);
    2266:	a6 e2       	ldi	r26, 0x26	; 38
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	e6 e2       	ldi	r30, 0x26	; 38
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	8f 77       	andi	r24, 0x7F	; 127
    2272:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    2274:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    2276:	89 81       	ldd	r24, Y+1	; 0x01
}
    2278:	0f 90       	pop	r0
    227a:	cf 91       	pop	r28
    227c:	df 91       	pop	r29
    227e:	08 95       	ret

00002280 <ADC_enuEnableADC>:
ES_t ADC_enuEnableADC(void){
    2280:	df 93       	push	r29
    2282:	cf 93       	push	r28
    2284:	0f 92       	push	r0
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA |=(1<<7);
    228e:	a6 e2       	ldi	r26, 0x26	; 38
    2290:	b0 e0       	ldi	r27, 0x00	; 0
    2292:	e6 e2       	ldi	r30, 0x26	; 38
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	80 81       	ld	r24, Z
    2298:	80 68       	ori	r24, 0x80	; 128
    229a:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    229c:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    229e:	89 81       	ldd	r24, Y+1	; 0x01
}
    22a0:	0f 90       	pop	r0
    22a2:	cf 91       	pop	r28
    22a4:	df 91       	pop	r29
    22a6:	08 95       	ret

000022a8 <Temp_enuInit>:
#include "../../MCAL/ADC/ADC_Int.h"

#include"Temp_Config.h"
#include"Temp_Priv.h"

ES_t Temp_enuInit(void){
    22a8:	df 93       	push	r29
    22aa:	cf 93       	push	r28
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
	ADC_enuInit();
    22b0:	0e 94 aa 10 	call	0x2154	; 0x2154 <ADC_enuInit>
	return ES_OK;
    22b4:	80 e0       	ldi	r24, 0x00	; 0
}
    22b6:	cf 91       	pop	r28
    22b8:	df 91       	pop	r29
    22ba:	08 95       	ret

000022bc <Temp_enuRead>:

ES_t Temp_enuRead(u16* Copy_Pu16ReadValue){
    22bc:	df 93       	push	r29
    22be:	cf 93       	push	r28
    22c0:	00 d0       	rcall	.+0      	; 0x22c2 <Temp_enuRead+0x6>
    22c2:	00 d0       	rcall	.+0      	; 0x22c4 <Temp_enuRead+0x8>
    22c4:	cd b7       	in	r28, 0x3d	; 61
    22c6:	de b7       	in	r29, 0x3e	; 62
    22c8:	9c 83       	std	Y+4, r25	; 0x04
    22ca:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_u16AdcValue;
	ADC_enuRead(&Local_u16AdcValue);
    22cc:	ce 01       	movw	r24, r28
    22ce:	01 96       	adiw	r24, 0x01	; 1
    22d0:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <ADC_enuRead>
	*Copy_Pu16ReadValue = ((u32)Local_u16AdcValue * 500)/1023;
    22d4:	89 81       	ldd	r24, Y+1	; 0x01
    22d6:	9a 81       	ldd	r25, Y+2	; 0x02
    22d8:	cc 01       	movw	r24, r24
    22da:	a0 e0       	ldi	r26, 0x00	; 0
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	24 ef       	ldi	r18, 0xF4	; 244
    22e0:	31 e0       	ldi	r19, 0x01	; 1
    22e2:	40 e0       	ldi	r20, 0x00	; 0
    22e4:	50 e0       	ldi	r21, 0x00	; 0
    22e6:	bc 01       	movw	r22, r24
    22e8:	cd 01       	movw	r24, r26
    22ea:	0e 94 4e 1c 	call	0x389c	; 0x389c <__mulsi3>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	2f ef       	ldi	r18, 0xFF	; 255
    22f4:	33 e0       	ldi	r19, 0x03	; 3
    22f6:	40 e0       	ldi	r20, 0x00	; 0
    22f8:	50 e0       	ldi	r21, 0x00	; 0
    22fa:	bc 01       	movw	r22, r24
    22fc:	cd 01       	movw	r24, r26
    22fe:	0e 94 80 1c 	call	0x3900	; 0x3900 <__udivmodsi4>
    2302:	da 01       	movw	r26, r20
    2304:	c9 01       	movw	r24, r18
    2306:	eb 81       	ldd	r30, Y+3	; 0x03
    2308:	fc 81       	ldd	r31, Y+4	; 0x04
    230a:	91 83       	std	Z+1, r25	; 0x01
    230c:	80 83       	st	Z, r24
	return ES_OK;
    230e:	80 e0       	ldi	r24, 0x00	; 0
}
    2310:	0f 90       	pop	r0
    2312:	0f 90       	pop	r0
    2314:	0f 90       	pop	r0
    2316:	0f 90       	pop	r0
    2318:	cf 91       	pop	r28
    231a:	df 91       	pop	r29
    231c:	08 95       	ret

0000231e <Temp_enuEnableTemp>:
ES_t Temp_enuEnableTemp(void){
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
	ADC_enuEnableADC();
    2326:	0e 94 40 11 	call	0x2280	; 0x2280 <ADC_enuEnableADC>
	return ES_OK;
    232a:	80 e0       	ldi	r24, 0x00	; 0
}
    232c:	cf 91       	pop	r28
    232e:	df 91       	pop	r29
    2330:	08 95       	ret

00002332 <Temp_enuDisableTemp>:

ES_t Temp_enuDisableTemp(void){
    2332:	df 93       	push	r29
    2334:	cf 93       	push	r28
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
	ADC_enuDisableADC();
    233a:	0e 94 2c 11 	call	0x2258	; 0x2258 <ADC_enuDisableADC>
	return ES_OK;
    233e:	80 e0       	ldi	r24, 0x00	; 0
}
    2340:	cf 91       	pop	r28
    2342:	df 91       	pop	r29
    2344:	08 95       	ret

00002346 <LED_enuInit>:





ES_t LED_enuInit(void){
    2346:	df 93       	push	r29
    2348:	cf 93       	push	r28
    234a:	00 d0       	rcall	.+0      	; 0x234c <LED_enuInit+0x6>
    234c:	00 d0       	rcall	.+0      	; 0x234e <LED_enuInit+0x8>
    234e:	cd b7       	in	r28, 0x3d	; 61
    2350:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Loca_AenuReturnError[2];
	Loca_AenuReturnError[0]=DIO_enuSetPinDirection(LED_u8GROUB, LED_u8PIN, DIO_u8OUTPUT);
    2356:	83 e0       	ldi	r24, 0x03	; 3
    2358:	63 e0       	ldi	r22, 0x03	; 3
    235a:	41 e0       	ldi	r20, 0x01	; 1
    235c:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <DIO_enuSetPinDirection>
    2360:	8b 83       	std	Y+3, r24	; 0x03
	Loca_AenuReturnError[1]=DIO_enuSetPinValue(LED_u8GROUB, LED_u8PIN, LED_u8state);
    2362:	83 e0       	ldi	r24, 0x03	; 3
    2364:	63 e0       	ldi	r22, 0x03	; 3
    2366:	41 e0       	ldi	r20, 0x01	; 1
    2368:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
    236c:	8c 83       	std	Y+4, r24	; 0x04
	for(u8 i=0;i<2;i++){
    236e:	19 82       	std	Y+1, r1	; 0x01
    2370:	1b c0       	rjmp	.+54     	; 0x23a8 <LED_enuInit+0x62>
		if(Loca_AenuReturnError[i]==ES_OK){
    2372:	89 81       	ldd	r24, Y+1	; 0x01
    2374:	28 2f       	mov	r18, r24
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	ce 01       	movw	r24, r28
    237a:	03 96       	adiw	r24, 0x03	; 3
    237c:	fc 01       	movw	r30, r24
    237e:	e2 0f       	add	r30, r18
    2380:	f3 1f       	adc	r31, r19
    2382:	80 81       	ld	r24, Z
    2384:	88 23       	and	r24, r24
    2386:	29 f4       	brne	.+10     	; 0x2392 <LED_enuInit+0x4c>
			Local_enuErrorState = ES_OK;
    2388:	1a 82       	std	Y+2, r1	; 0x02
	ES_t Local_enuErrorState = ES_NOK;

	ES_t Loca_AenuReturnError[2];
	Loca_AenuReturnError[0]=DIO_enuSetPinDirection(LED_u8GROUB, LED_u8PIN, DIO_u8OUTPUT);
	Loca_AenuReturnError[1]=DIO_enuSetPinValue(LED_u8GROUB, LED_u8PIN, LED_u8state);
	for(u8 i=0;i<2;i++){
    238a:	89 81       	ldd	r24, Y+1	; 0x01
    238c:	8f 5f       	subi	r24, 0xFF	; 255
    238e:	89 83       	std	Y+1, r24	; 0x01
    2390:	0b c0       	rjmp	.+22     	; 0x23a8 <LED_enuInit+0x62>
		if(Loca_AenuReturnError[i]==ES_OK){
			Local_enuErrorState = ES_OK;
		}
		else{
			Local_enuErrorState=Loca_AenuReturnError[i];
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	28 2f       	mov	r18, r24
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	ce 01       	movw	r24, r28
    239a:	03 96       	adiw	r24, 0x03	; 3
    239c:	fc 01       	movw	r30, r24
    239e:	e2 0f       	add	r30, r18
    23a0:	f3 1f       	adc	r31, r19
    23a2:	80 81       	ld	r24, Z
    23a4:	8a 83       	std	Y+2, r24	; 0x02
    23a6:	03 c0       	rjmp	.+6      	; 0x23ae <LED_enuInit+0x68>
	ES_t Local_enuErrorState = ES_NOK;

	ES_t Loca_AenuReturnError[2];
	Loca_AenuReturnError[0]=DIO_enuSetPinDirection(LED_u8GROUB, LED_u8PIN, DIO_u8OUTPUT);
	Loca_AenuReturnError[1]=DIO_enuSetPinValue(LED_u8GROUB, LED_u8PIN, LED_u8state);
	for(u8 i=0;i<2;i++){
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	82 30       	cpi	r24, 0x02	; 2
    23ac:	10 f3       	brcs	.-60     	; 0x2372 <LED_enuInit+0x2c>
		else{
			Local_enuErrorState=Loca_AenuReturnError[i];
			break;
		}
	}
	return Local_enuErrorState;
    23ae:	8a 81       	ldd	r24, Y+2	; 0x02
}
    23b0:	0f 90       	pop	r0
    23b2:	0f 90       	pop	r0
    23b4:	0f 90       	pop	r0
    23b6:	0f 90       	pop	r0
    23b8:	cf 91       	pop	r28
    23ba:	df 91       	pop	r29
    23bc:	08 95       	ret

000023be <LED_enuSetLed>:
ES_t LED_enuSetLed(){
    23be:	df 93       	push	r29
    23c0:	cf 93       	push	r28
    23c2:	0f 92       	push	r0
    23c4:	cd b7       	in	r28, 0x3d	; 61
    23c6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuSetPinValue(LED_u8GROUB, LED_u8PIN, LED_u8state);
    23cc:	83 e0       	ldi	r24, 0x03	; 3
    23ce:	63 e0       	ldi	r22, 0x03	; 3
    23d0:	41 e0       	ldi	r20, 0x01	; 1
    23d2:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
	Local_enuErrorState = ES_OK;
    23d6:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    23d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    23da:	0f 90       	pop	r0
    23dc:	cf 91       	pop	r28
    23de:	df 91       	pop	r29
    23e0:	08 95       	ret

000023e2 <LCD_enuInit>:

#include <util/delay.h>


ES_t LCD_enuInit(void)
{
    23e2:	df 93       	push	r29
    23e4:	cf 93       	push	r28
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
    23ea:	ab 97       	sbiw	r28, 0x2b	; 43
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	8b a7       	std	Y+43, r24	; 0x2b
    23fa:	80 e0       	ldi	r24, 0x00	; 0
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	ac e0       	ldi	r26, 0x0C	; 12
    2400:	b2 e4       	ldi	r27, 0x42	; 66
    2402:	8f a3       	std	Y+39, r24	; 0x27
    2404:	98 a7       	std	Y+40, r25	; 0x28
    2406:	a9 a7       	std	Y+41, r26	; 0x29
    2408:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    240a:	6f a1       	ldd	r22, Y+39	; 0x27
    240c:	78 a5       	ldd	r23, Y+40	; 0x28
    240e:	89 a5       	ldd	r24, Y+41	; 0x29
    2410:	9a a5       	ldd	r25, Y+42	; 0x2a
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	4a e7       	ldi	r20, 0x7A	; 122
    2418:	55 e4       	ldi	r21, 0x45	; 69
    241a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	8b a3       	std	Y+35, r24	; 0x23
    2424:	9c a3       	std	Y+36, r25	; 0x24
    2426:	ad a3       	std	Y+37, r26	; 0x25
    2428:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    242a:	6b a1       	ldd	r22, Y+35	; 0x23
    242c:	7c a1       	ldd	r23, Y+36	; 0x24
    242e:	8d a1       	ldd	r24, Y+37	; 0x25
    2430:	9e a1       	ldd	r25, Y+38	; 0x26
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	40 e8       	ldi	r20, 0x80	; 128
    2438:	5f e3       	ldi	r21, 0x3F	; 63
    243a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    243e:	88 23       	and	r24, r24
    2440:	2c f4       	brge	.+10     	; 0x244c <LCD_enuInit+0x6a>
		__ticks = 1;
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	9a a3       	std	Y+34, r25	; 0x22
    2448:	89 a3       	std	Y+33, r24	; 0x21
    244a:	3f c0       	rjmp	.+126    	; 0x24ca <LCD_enuInit+0xe8>
	else if (__tmp > 65535)
    244c:	6b a1       	ldd	r22, Y+35	; 0x23
    244e:	7c a1       	ldd	r23, Y+36	; 0x24
    2450:	8d a1       	ldd	r24, Y+37	; 0x25
    2452:	9e a1       	ldd	r25, Y+38	; 0x26
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	3f ef       	ldi	r19, 0xFF	; 255
    2458:	4f e7       	ldi	r20, 0x7F	; 127
    245a:	57 e4       	ldi	r21, 0x47	; 71
    245c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2460:	18 16       	cp	r1, r24
    2462:	4c f5       	brge	.+82     	; 0x24b6 <LCD_enuInit+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2464:	6f a1       	ldd	r22, Y+39	; 0x27
    2466:	78 a5       	ldd	r23, Y+40	; 0x28
    2468:	89 a5       	ldd	r24, Y+41	; 0x29
    246a:	9a a5       	ldd	r25, Y+42	; 0x2a
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	40 e2       	ldi	r20, 0x20	; 32
    2472:	51 e4       	ldi	r21, 0x41	; 65
    2474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	bc 01       	movw	r22, r24
    247e:	cd 01       	movw	r24, r26
    2480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	9a a3       	std	Y+34, r25	; 0x22
    248a:	89 a3       	std	Y+33, r24	; 0x21
    248c:	0f c0       	rjmp	.+30     	; 0x24ac <LCD_enuInit+0xca>
    248e:	80 e9       	ldi	r24, 0x90	; 144
    2490:	91 e0       	ldi	r25, 0x01	; 1
    2492:	98 a3       	std	Y+32, r25	; 0x20
    2494:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2496:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2498:	98 a1       	ldd	r25, Y+32	; 0x20
    249a:	01 97       	sbiw	r24, 0x01	; 1
    249c:	f1 f7       	brne	.-4      	; 0x249a <LCD_enuInit+0xb8>
    249e:	98 a3       	std	Y+32, r25	; 0x20
    24a0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a2:	89 a1       	ldd	r24, Y+33	; 0x21
    24a4:	9a a1       	ldd	r25, Y+34	; 0x22
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	9a a3       	std	Y+34, r25	; 0x22
    24aa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ac:	89 a1       	ldd	r24, Y+33	; 0x21
    24ae:	9a a1       	ldd	r25, Y+34	; 0x22
    24b0:	00 97       	sbiw	r24, 0x00	; 0
    24b2:	69 f7       	brne	.-38     	; 0x248e <LCD_enuInit+0xac>
    24b4:	14 c0       	rjmp	.+40     	; 0x24de <LCD_enuInit+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b6:	6b a1       	ldd	r22, Y+35	; 0x23
    24b8:	7c a1       	ldd	r23, Y+36	; 0x24
    24ba:	8d a1       	ldd	r24, Y+37	; 0x25
    24bc:	9e a1       	ldd	r25, Y+38	; 0x26
    24be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	9a a3       	std	Y+34, r25	; 0x22
    24c8:	89 a3       	std	Y+33, r24	; 0x21
    24ca:	89 a1       	ldd	r24, Y+33	; 0x21
    24cc:	9a a1       	ldd	r25, Y+34	; 0x22
    24ce:	9e 8f       	std	Y+30, r25	; 0x1e
    24d0:	8d 8f       	std	Y+29, r24	; 0x1d
    24d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	f1 f7       	brne	.-4      	; 0x24d6 <LCD_enuInit+0xf4>
    24da:	9e 8f       	std	Y+30, r25	; 0x1e
    24dc:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(35);
	DIO_enuSetPinDirection(RS_GRP , RS_PIN , DIO_u8OUTPUT);
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	61 e0       	ldi	r22, 0x01	; 1
    24e2:	41 e0       	ldi	r20, 0x01	; 1
    24e4:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_GRP , RW_PIN , DIO_u8OUTPUT);
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	62 e0       	ldi	r22, 0x02	; 2
    24ec:	41 e0       	ldi	r20, 0x01	; 1
    24ee:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_GRP , EN_PIN , DIO_u8OUTPUT);
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	60 e0       	ldi	r22, 0x00	; 0
    24f6:	41 e0       	ldi	r20, 0x01	; 1
    24f8:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_GRP , D7_PIN , DIO_u8OUTPUT);
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	67 e0       	ldi	r22, 0x07	; 7
    2500:	41 e0       	ldi	r20, 0x01	; 1
    2502:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_GRP , D6_PIN , DIO_u8OUTPUT);
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	66 e0       	ldi	r22, 0x06	; 6
    250a:	41 e0       	ldi	r20, 0x01	; 1
    250c:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_GRP , D5_PIN , DIO_u8OUTPUT);
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	65 e0       	ldi	r22, 0x05	; 5
    2514:	41 e0       	ldi	r20, 0x01	; 1
    2516:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_GRP , D4_PIN , DIO_u8OUTPUT);
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	64 e0       	ldi	r22, 0x04	; 4
    251e:	41 e0       	ldi	r20, 0x01	; 1
    2520:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <DIO_enuSetPinDirection>

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
	LCD_enuWriteNLatch(0x38);

#elif LCD_MODE == FOUR_BIT
	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	61 e0       	ldi	r22, 0x01	; 1
    2528:	40 e0       	ldi	r20, 0x00	; 0
    252a:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(D7_GRP , D7_PIN ,  0 );
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	67 e0       	ldi	r22, 0x07	; 7
    2532:	40 e0       	ldi	r20, 0x00	; 0
    2534:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP , D6_PIN ,  0 );
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	66 e0       	ldi	r22, 0x06	; 6
    253c:	40 e0       	ldi	r20, 0x00	; 0
    253e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP , D5_PIN ,  1 );
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	65 e0       	ldi	r22, 0x05	; 5
    2546:	41 e0       	ldi	r20, 0x01	; 1
    2548:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP , D4_PIN ,  0 );
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	64 e0       	ldi	r22, 0x04	; 4
    2550:	40 e0       	ldi	r20, 0x00	; 0
    2552:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_GRP , EN_PIN ,  DIO_u8HIGH );
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	60 e0       	ldi	r22, 0x00	; 0
    255a:	41 e0       	ldi	r20, 0x01	; 1
    255c:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	a0 e0       	ldi	r26, 0x00	; 0
    2566:	b0 e4       	ldi	r27, 0x40	; 64
    2568:	89 8f       	std	Y+25, r24	; 0x19
    256a:	9a 8f       	std	Y+26, r25	; 0x1a
    256c:	ab 8f       	std	Y+27, r26	; 0x1b
    256e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2570:	69 8d       	ldd	r22, Y+25	; 0x19
    2572:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2574:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2576:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	4a e7       	ldi	r20, 0x7A	; 122
    257e:	55 e4       	ldi	r21, 0x45	; 69
    2580:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	8d 8b       	std	Y+21, r24	; 0x15
    258a:	9e 8b       	std	Y+22, r25	; 0x16
    258c:	af 8b       	std	Y+23, r26	; 0x17
    258e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2590:	6d 89       	ldd	r22, Y+21	; 0x15
    2592:	7e 89       	ldd	r23, Y+22	; 0x16
    2594:	8f 89       	ldd	r24, Y+23	; 0x17
    2596:	98 8d       	ldd	r25, Y+24	; 0x18
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e8       	ldi	r20, 0x80	; 128
    259e:	5f e3       	ldi	r21, 0x3F	; 63
    25a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25a4:	88 23       	and	r24, r24
    25a6:	2c f4       	brge	.+10     	; 0x25b2 <LCD_enuInit+0x1d0>
		__ticks = 1;
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	9c 8b       	std	Y+20, r25	; 0x14
    25ae:	8b 8b       	std	Y+19, r24	; 0x13
    25b0:	3f c0       	rjmp	.+126    	; 0x2630 <LCD_enuInit+0x24e>
	else if (__tmp > 65535)
    25b2:	6d 89       	ldd	r22, Y+21	; 0x15
    25b4:	7e 89       	ldd	r23, Y+22	; 0x16
    25b6:	8f 89       	ldd	r24, Y+23	; 0x17
    25b8:	98 8d       	ldd	r25, Y+24	; 0x18
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	3f ef       	ldi	r19, 0xFF	; 255
    25be:	4f e7       	ldi	r20, 0x7F	; 127
    25c0:	57 e4       	ldi	r21, 0x47	; 71
    25c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25c6:	18 16       	cp	r1, r24
    25c8:	4c f5       	brge	.+82     	; 0x261c <LCD_enuInit+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ca:	69 8d       	ldd	r22, Y+25	; 0x19
    25cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	40 e2       	ldi	r20, 0x20	; 32
    25d8:	51 e4       	ldi	r21, 0x41	; 65
    25da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	bc 01       	movw	r22, r24
    25e4:	cd 01       	movw	r24, r26
    25e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	9c 8b       	std	Y+20, r25	; 0x14
    25f0:	8b 8b       	std	Y+19, r24	; 0x13
    25f2:	0f c0       	rjmp	.+30     	; 0x2612 <LCD_enuInit+0x230>
    25f4:	80 e9       	ldi	r24, 0x90	; 144
    25f6:	91 e0       	ldi	r25, 0x01	; 1
    25f8:	9a 8b       	std	Y+18, r25	; 0x12
    25fa:	89 8b       	std	Y+17, r24	; 0x11
    25fc:	89 89       	ldd	r24, Y+17	; 0x11
    25fe:	9a 89       	ldd	r25, Y+18	; 0x12
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	f1 f7       	brne	.-4      	; 0x2600 <LCD_enuInit+0x21e>
    2604:	9a 8b       	std	Y+18, r25	; 0x12
    2606:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2608:	8b 89       	ldd	r24, Y+19	; 0x13
    260a:	9c 89       	ldd	r25, Y+20	; 0x14
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	9c 8b       	std	Y+20, r25	; 0x14
    2610:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2612:	8b 89       	ldd	r24, Y+19	; 0x13
    2614:	9c 89       	ldd	r25, Y+20	; 0x14
    2616:	00 97       	sbiw	r24, 0x00	; 0
    2618:	69 f7       	brne	.-38     	; 0x25f4 <LCD_enuInit+0x212>
    261a:	14 c0       	rjmp	.+40     	; 0x2644 <LCD_enuInit+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261c:	6d 89       	ldd	r22, Y+21	; 0x15
    261e:	7e 89       	ldd	r23, Y+22	; 0x16
    2620:	8f 89       	ldd	r24, Y+23	; 0x17
    2622:	98 8d       	ldd	r25, Y+24	; 0x18
    2624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	9c 8b       	std	Y+20, r25	; 0x14
    262e:	8b 8b       	std	Y+19, r24	; 0x13
    2630:	8b 89       	ldd	r24, Y+19	; 0x13
    2632:	9c 89       	ldd	r25, Y+20	; 0x14
    2634:	98 8b       	std	Y+16, r25	; 0x10
    2636:	8f 87       	std	Y+15, r24	; 0x0f
    2638:	8f 85       	ldd	r24, Y+15	; 0x0f
    263a:	98 89       	ldd	r25, Y+16	; 0x10
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	f1 f7       	brne	.-4      	; 0x263c <LCD_enuInit+0x25a>
    2640:	98 8b       	std	Y+16, r25	; 0x10
    2642:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms (2);
	DIO_enuSetPinValue(EN_GRP , EN_PIN ,  DIO_u8LOW );
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	60 e0       	ldi	r22, 0x00	; 0
    2648:	40 e0       	ldi	r20, 0x00	; 0
    264a:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	a0 e0       	ldi	r26, 0x00	; 0
    2654:	b0 e4       	ldi	r27, 0x40	; 64
    2656:	8b 87       	std	Y+11, r24	; 0x0b
    2658:	9c 87       	std	Y+12, r25	; 0x0c
    265a:	ad 87       	std	Y+13, r26	; 0x0d
    265c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    265e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2660:	7c 85       	ldd	r23, Y+12	; 0x0c
    2662:	8d 85       	ldd	r24, Y+13	; 0x0d
    2664:	9e 85       	ldd	r25, Y+14	; 0x0e
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	4a e7       	ldi	r20, 0x7A	; 122
    266c:	55 e4       	ldi	r21, 0x45	; 69
    266e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	8f 83       	std	Y+7, r24	; 0x07
    2678:	98 87       	std	Y+8, r25	; 0x08
    267a:	a9 87       	std	Y+9, r26	; 0x09
    267c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    267e:	6f 81       	ldd	r22, Y+7	; 0x07
    2680:	78 85       	ldd	r23, Y+8	; 0x08
    2682:	89 85       	ldd	r24, Y+9	; 0x09
    2684:	9a 85       	ldd	r25, Y+10	; 0x0a
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	40 e8       	ldi	r20, 0x80	; 128
    268c:	5f e3       	ldi	r21, 0x3F	; 63
    268e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2692:	88 23       	and	r24, r24
    2694:	2c f4       	brge	.+10     	; 0x26a0 <LCD_enuInit+0x2be>
		__ticks = 1;
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	9e 83       	std	Y+6, r25	; 0x06
    269c:	8d 83       	std	Y+5, r24	; 0x05
    269e:	3f c0       	rjmp	.+126    	; 0x271e <LCD_enuInit+0x33c>
	else if (__tmp > 65535)
    26a0:	6f 81       	ldd	r22, Y+7	; 0x07
    26a2:	78 85       	ldd	r23, Y+8	; 0x08
    26a4:	89 85       	ldd	r24, Y+9	; 0x09
    26a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	3f ef       	ldi	r19, 0xFF	; 255
    26ac:	4f e7       	ldi	r20, 0x7F	; 127
    26ae:	57 e4       	ldi	r21, 0x47	; 71
    26b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26b4:	18 16       	cp	r1, r24
    26b6:	4c f5       	brge	.+82     	; 0x270a <LCD_enuInit+0x328>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    26bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    26be:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e2       	ldi	r20, 0x20	; 32
    26c6:	51 e4       	ldi	r21, 0x41	; 65
    26c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	bc 01       	movw	r22, r24
    26d2:	cd 01       	movw	r24, r26
    26d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	9e 83       	std	Y+6, r25	; 0x06
    26de:	8d 83       	std	Y+5, r24	; 0x05
    26e0:	0f c0       	rjmp	.+30     	; 0x2700 <LCD_enuInit+0x31e>
    26e2:	80 e9       	ldi	r24, 0x90	; 144
    26e4:	91 e0       	ldi	r25, 0x01	; 1
    26e6:	9c 83       	std	Y+4, r25	; 0x04
    26e8:	8b 83       	std	Y+3, r24	; 0x03
    26ea:	8b 81       	ldd	r24, Y+3	; 0x03
    26ec:	9c 81       	ldd	r25, Y+4	; 0x04
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	f1 f7       	brne	.-4      	; 0x26ee <LCD_enuInit+0x30c>
    26f2:	9c 83       	std	Y+4, r25	; 0x04
    26f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f6:	8d 81       	ldd	r24, Y+5	; 0x05
    26f8:	9e 81       	ldd	r25, Y+6	; 0x06
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	9e 83       	std	Y+6, r25	; 0x06
    26fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2700:	8d 81       	ldd	r24, Y+5	; 0x05
    2702:	9e 81       	ldd	r25, Y+6	; 0x06
    2704:	00 97       	sbiw	r24, 0x00	; 0
    2706:	69 f7       	brne	.-38     	; 0x26e2 <LCD_enuInit+0x300>
    2708:	14 c0       	rjmp	.+40     	; 0x2732 <LCD_enuInit+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270a:	6f 81       	ldd	r22, Y+7	; 0x07
    270c:	78 85       	ldd	r23, Y+8	; 0x08
    270e:	89 85       	ldd	r24, Y+9	; 0x09
    2710:	9a 85       	ldd	r25, Y+10	; 0x0a
    2712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	9e 83       	std	Y+6, r25	; 0x06
    271c:	8d 83       	std	Y+5, r24	; 0x05
    271e:	8d 81       	ldd	r24, Y+5	; 0x05
    2720:	9e 81       	ldd	r25, Y+6	; 0x06
    2722:	9a 83       	std	Y+2, r25	; 0x02
    2724:	89 83       	std	Y+1, r24	; 0x01
    2726:	89 81       	ldd	r24, Y+1	; 0x01
    2728:	9a 81       	ldd	r25, Y+2	; 0x02
    272a:	01 97       	sbiw	r24, 0x01	; 1
    272c:	f1 f7       	brne	.-4      	; 0x272a <LCD_enuInit+0x348>
    272e:	9a 83       	std	Y+2, r25	; 0x02
    2730:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (2);

	LCD_enuWriteNLatch(0x28);
    2732:	88 e2       	ldi	r24, 0x28	; 40
    2734:	0e 94 67 15 	call	0x2ace	; 0x2ace <LCD_enuWriteNLatch>
#else
#error "LCD mode is wrong ya 7ayawan"
#endif

	//display control
	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	61 e0       	ldi	r22, 0x01	; 1
    273c:	40 e0       	ldi	r20, 0x00	; 0
    273e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x0F);
    2742:	8f e0       	ldi	r24, 0x0F	; 15
    2744:	0e 94 67 15 	call	0x2ace	; 0x2ace <LCD_enuWriteNLatch>

	//clear display control
	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	61 e0       	ldi	r22, 0x01	; 1
    274c:	40 e0       	ldi	r20, 0x00	; 0
    274e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x1);
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	0e 94 67 15 	call	0x2ace	; 0x2ace <LCD_enuWriteNLatch>

	//entry set
	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	61 e0       	ldi	r22, 0x01	; 1
    275c:	40 e0       	ldi	r20, 0x00	; 0
    275e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x6);
    2762:	86 e0       	ldi	r24, 0x06	; 6
    2764:	0e 94 67 15 	call	0x2ace	; 0x2ace <LCD_enuWriteNLatch>

	return Local_enuErrorState;
    2768:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    276a:	ab 96       	adiw	r28, 0x2b	; 43
    276c:	0f b6       	in	r0, 0x3f	; 63
    276e:	f8 94       	cli
    2770:	de bf       	out	0x3e, r29	; 62
    2772:	0f be       	out	0x3f, r0	; 63
    2774:	cd bf       	out	0x3d, r28	; 61
    2776:	cf 91       	pop	r28
    2778:	df 91       	pop	r29
    277a:	08 95       	ret

0000277c <LCD_enuSendData>:

ES_t LCD_enuSendData(u8 Copy_u8Data)
{
    277c:	df 93       	push	r29
    277e:	cf 93       	push	r28
    2780:	00 d0       	rcall	.+0      	; 0x2782 <LCD_enuSendData+0x6>
    2782:	cd b7       	in	r28, 0x3d	; 61
    2784:	de b7       	in	r29, 0x3e	; 62
    2786:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	61 e0       	ldi	r22, 0x01	; 1
    2790:	41 e0       	ldi	r20, 0x01	; 1
    2792:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(Copy_u8Data);
    2796:	8a 81       	ldd	r24, Y+2	; 0x02
    2798:	0e 94 67 15 	call	0x2ace	; 0x2ace <LCD_enuWriteNLatch>

	return Local_enuErrorState;
    279c:	89 81       	ldd	r24, Y+1	; 0x01
}
    279e:	0f 90       	pop	r0
    27a0:	0f 90       	pop	r0
    27a2:	cf 91       	pop	r28
    27a4:	df 91       	pop	r29
    27a6:	08 95       	ret

000027a8 <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Cmnd)
{
    27a8:	df 93       	push	r29
    27aa:	cf 93       	push	r28
    27ac:	00 d0       	rcall	.+0      	; 0x27ae <LCD_enuSendCommand+0x6>
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62
    27b2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	61 e0       	ldi	r22, 0x01	; 1
    27bc:	40 e0       	ldi	r20, 0x00	; 0
    27be:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
	//SEND DATA & LATCH
	LCD_enuWriteNLatch(Copy_u8Cmnd);
    27c2:	8a 81       	ldd	r24, Y+2	; 0x02
    27c4:	0e 94 67 15 	call	0x2ace	; 0x2ace <LCD_enuWriteNLatch>

	return Local_enuErrorState;
    27c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    27ca:	0f 90       	pop	r0
    27cc:	0f 90       	pop	r0
    27ce:	cf 91       	pop	r28
    27d0:	df 91       	pop	r29
    27d2:	08 95       	ret

000027d4 <LCD_enuSendString>:

ES_t LCD_enuSendString(const char * Copy_pcString)
{
    27d4:	df 93       	push	r29
    27d6:	cf 93       	push	r28
    27d8:	00 d0       	rcall	.+0      	; 0x27da <LCD_enuSendString+0x6>
    27da:	0f 92       	push	r0
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
    27e0:	9a 83       	std	Y+2, r25	; 0x02
    27e2:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_pcString != NULL)
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	9a 81       	ldd	r25, Y+2	; 0x02
    27e8:	00 97       	sbiw	r24, 0x00	; 0
    27ea:	89 f0       	breq	.+34     	; 0x280e <LCD_enuSendString+0x3a>
    27ec:	0b c0       	rjmp	.+22     	; 0x2804 <LCD_enuSendString+0x30>
	{
		while (*Copy_pcString)
		{
			LCD_enuSendData(*Copy_pcString++);
    27ee:	e9 81       	ldd	r30, Y+1	; 0x01
    27f0:	fa 81       	ldd	r31, Y+2	; 0x02
    27f2:	20 81       	ld	r18, Z
    27f4:	89 81       	ldd	r24, Y+1	; 0x01
    27f6:	9a 81       	ldd	r25, Y+2	; 0x02
    27f8:	01 96       	adiw	r24, 0x01	; 1
    27fa:	9a 83       	std	Y+2, r25	; 0x02
    27fc:	89 83       	std	Y+1, r24	; 0x01
    27fe:	82 2f       	mov	r24, r18
    2800:	0e 94 be 13 	call	0x277c	; 0x277c <LCD_enuSendData>

ES_t LCD_enuSendString(const char * Copy_pcString)
{
	if (Copy_pcString != NULL)
	{
		while (*Copy_pcString)
    2804:	e9 81       	ldd	r30, Y+1	; 0x01
    2806:	fa 81       	ldd	r31, Y+2	; 0x02
    2808:	80 81       	ld	r24, Z
    280a:	88 23       	and	r24, r24
    280c:	81 f7       	brne	.-32     	; 0x27ee <LCD_enuSendString+0x1a>
		{
			LCD_enuSendData(*Copy_pcString++);
		}
	}
}
    280e:	0f 90       	pop	r0
    2810:	0f 90       	pop	r0
    2812:	0f 90       	pop	r0
    2814:	cf 91       	pop	r28
    2816:	df 91       	pop	r29
    2818:	08 95       	ret

0000281a <LCD_enuGoToPosition>:

ES_t LCD_enuGoToPosition(u8 Copy_u8Row , u8 Copy_u8Column){
    281a:	df 93       	push	r29
    281c:	cf 93       	push	r28
    281e:	00 d0       	rcall	.+0      	; 0x2820 <LCD_enuGoToPosition+0x6>
    2820:	00 d0       	rcall	.+0      	; 0x2822 <LCD_enuGoToPosition+0x8>
    2822:	cd b7       	in	r28, 0x3d	; 61
    2824:	de b7       	in	r29, 0x3e	; 62
    2826:	8b 83       	std	Y+3, r24	; 0x03
    2828:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	8a 83       	std	Y+2, r24	; 0x02
	if(Copy_u8Row<2 && Copy_u8Column<16){
    282e:	8b 81       	ldd	r24, Y+3	; 0x03
    2830:	82 30       	cpi	r24, 0x02	; 2
    2832:	d0 f4       	brcc	.+52     	; 0x2868 <LCD_enuGoToPosition+0x4e>
    2834:	8c 81       	ldd	r24, Y+4	; 0x04
    2836:	80 31       	cpi	r24, 0x10	; 16
    2838:	b8 f4       	brcc	.+46     	; 0x2868 <LCD_enuGoToPosition+0x4e>
		u8 address = Copy_u8Row * 0x40 +Copy_u8Column; // row one:0x00 to 0x0f,row two :0x40 to 0x4f
    283a:	8b 81       	ldd	r24, Y+3	; 0x03
    283c:	88 2f       	mov	r24, r24
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	00 24       	eor	r0, r0
    2842:	96 95       	lsr	r25
    2844:	87 95       	ror	r24
    2846:	07 94       	ror	r0
    2848:	96 95       	lsr	r25
    284a:	87 95       	ror	r24
    284c:	07 94       	ror	r0
    284e:	98 2f       	mov	r25, r24
    2850:	80 2d       	mov	r24, r0
    2852:	98 2f       	mov	r25, r24
    2854:	8c 81       	ldd	r24, Y+4	; 0x04
    2856:	89 0f       	add	r24, r25
    2858:	89 83       	std	Y+1, r24	; 0x01
		address|=(1<<7);                             //for set an address location you must set 1 in pin 7 in the address
    285a:	89 81       	ldd	r24, Y+1	; 0x01
    285c:	80 68       	ori	r24, 0x80	; 128
    285e:	89 83       	std	Y+1, r24	; 0x01
		LCD_enuSendCommand(address);
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_enuSendCommand>
		Local_enuErrorState = ES_OK;
    2866:	1a 82       	std	Y+2, r1	; 0x02

	}


	return Local_enuErrorState;
    2868:	8a 81       	ldd	r24, Y+2	; 0x02
}
    286a:	0f 90       	pop	r0
    286c:	0f 90       	pop	r0
    286e:	0f 90       	pop	r0
    2870:	0f 90       	pop	r0
    2872:	cf 91       	pop	r28
    2874:	df 91       	pop	r29
    2876:	08 95       	ret

00002878 <LCD_enuStoreCustom>:

ES_t LCD_enuStoreCustom(u8* Copy_pu8Pattern , u8 Copy_u8CGRamIndex){
    2878:	df 93       	push	r29
    287a:	cf 93       	push	r28
    287c:	00 d0       	rcall	.+0      	; 0x287e <LCD_enuStoreCustom+0x6>
    287e:	00 d0       	rcall	.+0      	; 0x2880 <LCD_enuStoreCustom+0x8>
    2880:	00 d0       	rcall	.+0      	; 0x2882 <LCD_enuStoreCustom+0xa>
    2882:	cd b7       	in	r28, 0x3d	; 61
    2884:	de b7       	in	r29, 0x3e	; 62
    2886:	9d 83       	std	Y+5, r25	; 0x05
    2888:	8c 83       	std	Y+4, r24	; 0x04
    288a:	6e 83       	std	Y+6, r22	; 0x06
	ES_t Local_enuErrorState = ES_NOK;
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	8b 83       	std	Y+3, r24	; 0x03
	u8 address;
	u8 index=0;
    2890:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8CGRamIndex<8){           //CGRAM contain 8 locations.
    2892:	8e 81       	ldd	r24, Y+6	; 0x06
    2894:	88 30       	cpi	r24, 0x08	; 8
    2896:	18 f5       	brcc	.+70     	; 0x28de <LCD_enuStoreCustom+0x66>
		address= Copy_u8CGRamIndex * 8;
    2898:	8e 81       	ldd	r24, Y+6	; 0x06
    289a:	88 2f       	mov	r24, r24
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	88 0f       	add	r24, r24
    28a0:	99 1f       	adc	r25, r25
    28a2:	88 0f       	add	r24, r24
    28a4:	99 1f       	adc	r25, r25
    28a6:	88 0f       	add	r24, r24
    28a8:	99 1f       	adc	r25, r25
    28aa:	8a 83       	std	Y+2, r24	; 0x02
		address|=(1<<6);      //set CGRAM Address
    28ac:	8a 81       	ldd	r24, Y+2	; 0x02
    28ae:	80 64       	ori	r24, 0x40	; 64
    28b0:	8a 83       	std	Y+2, r24	; 0x02
		LCD_enuSendCommand(address);
    28b2:	8a 81       	ldd	r24, Y+2	; 0x02
    28b4:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_enuSendCommand>
    28b8:	0e c0       	rjmp	.+28     	; 0x28d6 <LCD_enuStoreCustom+0x5e>
		for(;index<8;index++){
			LCD_enuSendData(Copy_pu8Pattern[index]);
    28ba:	89 81       	ldd	r24, Y+1	; 0x01
    28bc:	28 2f       	mov	r18, r24
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	8c 81       	ldd	r24, Y+4	; 0x04
    28c2:	9d 81       	ldd	r25, Y+5	; 0x05
    28c4:	fc 01       	movw	r30, r24
    28c6:	e2 0f       	add	r30, r18
    28c8:	f3 1f       	adc	r31, r19
    28ca:	80 81       	ld	r24, Z
    28cc:	0e 94 be 13 	call	0x277c	; 0x277c <LCD_enuSendData>
	u8 index=0;
	if(Copy_u8CGRamIndex<8){           //CGRAM contain 8 locations.
		address= Copy_u8CGRamIndex * 8;
		address|=(1<<6);      //set CGRAM Address
		LCD_enuSendCommand(address);
		for(;index<8;index++){
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	8f 5f       	subi	r24, 0xFF	; 255
    28d4:	89 83       	std	Y+1, r24	; 0x01
    28d6:	89 81       	ldd	r24, Y+1	; 0x01
    28d8:	88 30       	cpi	r24, 0x08	; 8
    28da:	78 f3       	brcs	.-34     	; 0x28ba <LCD_enuStoreCustom+0x42>
			LCD_enuSendData(Copy_pu8Pattern[index]);
		}
		Local_enuErrorState = ES_OK;
    28dc:	1b 82       	std	Y+3, r1	; 0x03
	}
	LCD_enuSendCommand(0x02);
    28de:	82 e0       	ldi	r24, 0x02	; 2
    28e0:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_enuSendCommand>
	return Local_enuErrorState ;
    28e4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    28e6:	26 96       	adiw	r28, 0x06	; 6
    28e8:	0f b6       	in	r0, 0x3f	; 63
    28ea:	f8 94       	cli
    28ec:	de bf       	out	0x3e, r29	; 62
    28ee:	0f be       	out	0x3f, r0	; 63
    28f0:	cd bf       	out	0x3d, r28	; 61
    28f2:	cf 91       	pop	r28
    28f4:	df 91       	pop	r29
    28f6:	08 95       	ret

000028f8 <LCD_enuDisplayCustom>:

ES_t LCD_enuDisplayCustom(u8 Copy_u8CGRamIndex){
    28f8:	df 93       	push	r29
    28fa:	cf 93       	push	r28
    28fc:	0f 92       	push	r0
    28fe:	cd b7       	in	r28, 0x3d	; 61
    2900:	de b7       	in	r29, 0x3e	; 62
    2902:	89 83       	std	Y+1, r24	; 0x01
	LCD_enuSendData(Copy_u8CGRamIndex);
    2904:	89 81       	ldd	r24, Y+1	; 0x01
    2906:	0e 94 be 13 	call	0x277c	; 0x277c <LCD_enuSendData>
	return ES_OK;
    290a:	80 e0       	ldi	r24, 0x00	; 0
}
    290c:	0f 90       	pop	r0
    290e:	cf 91       	pop	r28
    2910:	df 91       	pop	r29
    2912:	08 95       	ret

00002914 <LCD_enuSendIntegerNum>:

ES_t LCD_enuSendIntegerNum(s32 Copy_s32Num){
    2914:	df 93       	push	r29
    2916:	cf 93       	push	r28
    2918:	cd b7       	in	r28, 0x3d	; 61
    291a:	de b7       	in	r29, 0x3e	; 62
    291c:	68 97       	sbiw	r28, 0x18	; 24
    291e:	0f b6       	in	r0, 0x3f	; 63
    2920:	f8 94       	cli
    2922:	de bf       	out	0x3e, r29	; 62
    2924:	0f be       	out	0x3f, r0	; 63
    2926:	cd bf       	out	0x3d, r28	; 61
    2928:	6d 8b       	std	Y+21, r22	; 0x15
    292a:	7e 8b       	std	Y+22, r23	; 0x16
    292c:	8f 8b       	std	Y+23, r24	; 0x17
    292e:	98 8f       	std	Y+24, r25	; 0x18
	ES_t Local_enuErrorState = ES_NOK;
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	8f 83       	std	Y+7, r24	; 0x07
	u8 num[13]={0} , digit=0 , modelus;
    2934:	8d e0       	ldi	r24, 0x0D	; 13
    2936:	fe 01       	movw	r30, r28
    2938:	38 96       	adiw	r30, 0x08	; 8
    293a:	df 01       	movw	r26, r30
    293c:	98 2f       	mov	r25, r24
    293e:	1d 92       	st	X+, r1
    2940:	9a 95       	dec	r25
    2942:	e9 f7       	brne	.-6      	; 0x293e <LCD_enuSendIntegerNum+0x2a>
    2944:	1e 82       	std	Y+6, r1	; 0x06
	s32 reminder =Copy_s32Num;
    2946:	8d 89       	ldd	r24, Y+21	; 0x15
    2948:	9e 89       	ldd	r25, Y+22	; 0x16
    294a:	af 89       	ldd	r26, Y+23	; 0x17
    294c:	b8 8d       	ldd	r27, Y+24	; 0x18
    294e:	89 83       	std	Y+1, r24	; 0x01
    2950:	9a 83       	std	Y+2, r25	; 0x02
    2952:	ab 83       	std	Y+3, r26	; 0x03
    2954:	bc 83       	std	Y+4, r27	; 0x04
	if(Copy_s32Num != 0){
    2956:	8d 89       	ldd	r24, Y+21	; 0x15
    2958:	9e 89       	ldd	r25, Y+22	; 0x16
    295a:	af 89       	ldd	r26, Y+23	; 0x17
    295c:	b8 8d       	ldd	r27, Y+24	; 0x18
    295e:	00 97       	sbiw	r24, 0x00	; 0
    2960:	a1 05       	cpc	r26, r1
    2962:	b1 05       	cpc	r27, r1
    2964:	09 f4       	brne	.+2      	; 0x2968 <LCD_enuSendIntegerNum+0x54>
    2966:	a5 c0       	rjmp	.+330    	; 0x2ab2 <LCD_enuSendIntegerNum+0x19e>
		if(Copy_s32Num < 0){
    2968:	8d 89       	ldd	r24, Y+21	; 0x15
    296a:	9e 89       	ldd	r25, Y+22	; 0x16
    296c:	af 89       	ldd	r26, Y+23	; 0x17
    296e:	b8 8d       	ldd	r27, Y+24	; 0x18
    2970:	bb 23       	and	r27, r27
    2972:	bc f5       	brge	.+110    	; 0x29e2 <LCD_enuSendIntegerNum+0xce>
			LCD_enuSendData('-');
    2974:	8d e2       	ldi	r24, 0x2D	; 45
    2976:	0e 94 be 13 	call	0x277c	; 0x277c <LCD_enuSendData>
			Copy_s32Num*=-1;
    297a:	8d 89       	ldd	r24, Y+21	; 0x15
    297c:	9e 89       	ldd	r25, Y+22	; 0x16
    297e:	af 89       	ldd	r26, Y+23	; 0x17
    2980:	b8 8d       	ldd	r27, Y+24	; 0x18
    2982:	b0 95       	com	r27
    2984:	a0 95       	com	r26
    2986:	90 95       	com	r25
    2988:	81 95       	neg	r24
    298a:	9f 4f       	sbci	r25, 0xFF	; 255
    298c:	af 4f       	sbci	r26, 0xFF	; 255
    298e:	bf 4f       	sbci	r27, 0xFF	; 255
    2990:	8d 8b       	std	Y+21, r24	; 0x15
    2992:	9e 8b       	std	Y+22, r25	; 0x16
    2994:	af 8b       	std	Y+23, r26	; 0x17
    2996:	b8 8f       	std	Y+24, r27	; 0x18
			reminder*=-1;
    2998:	89 81       	ldd	r24, Y+1	; 0x01
    299a:	9a 81       	ldd	r25, Y+2	; 0x02
    299c:	ab 81       	ldd	r26, Y+3	; 0x03
    299e:	bc 81       	ldd	r27, Y+4	; 0x04
    29a0:	b0 95       	com	r27
    29a2:	a0 95       	com	r26
    29a4:	90 95       	com	r25
    29a6:	81 95       	neg	r24
    29a8:	9f 4f       	sbci	r25, 0xFF	; 255
    29aa:	af 4f       	sbci	r26, 0xFF	; 255
    29ac:	bf 4f       	sbci	r27, 0xFF	; 255
    29ae:	89 83       	std	Y+1, r24	; 0x01
    29b0:	9a 83       	std	Y+2, r25	; 0x02
    29b2:	ab 83       	std	Y+3, r26	; 0x03
    29b4:	bc 83       	std	Y+4, r27	; 0x04
    29b6:	15 c0       	rjmp	.+42     	; 0x29e2 <LCD_enuSendIntegerNum+0xce>
		}
		while(Copy_s32Num){
			digit++;
    29b8:	8e 81       	ldd	r24, Y+6	; 0x06
    29ba:	8f 5f       	subi	r24, 0xFF	; 255
    29bc:	8e 83       	std	Y+6, r24	; 0x06
			Copy_s32Num/=10;
    29be:	8d 89       	ldd	r24, Y+21	; 0x15
    29c0:	9e 89       	ldd	r25, Y+22	; 0x16
    29c2:	af 89       	ldd	r26, Y+23	; 0x17
    29c4:	b8 8d       	ldd	r27, Y+24	; 0x18
    29c6:	2a e0       	ldi	r18, 0x0A	; 10
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	40 e0       	ldi	r20, 0x00	; 0
    29cc:	50 e0       	ldi	r21, 0x00	; 0
    29ce:	bc 01       	movw	r22, r24
    29d0:	cd 01       	movw	r24, r26
    29d2:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__divmodsi4>
    29d6:	da 01       	movw	r26, r20
    29d8:	c9 01       	movw	r24, r18
    29da:	8d 8b       	std	Y+21, r24	; 0x15
    29dc:	9e 8b       	std	Y+22, r25	; 0x16
    29de:	af 8b       	std	Y+23, r26	; 0x17
    29e0:	b8 8f       	std	Y+24, r27	; 0x18
		if(Copy_s32Num < 0){
			LCD_enuSendData('-');
			Copy_s32Num*=-1;
			reminder*=-1;
		}
		while(Copy_s32Num){
    29e2:	8d 89       	ldd	r24, Y+21	; 0x15
    29e4:	9e 89       	ldd	r25, Y+22	; 0x16
    29e6:	af 89       	ldd	r26, Y+23	; 0x17
    29e8:	b8 8d       	ldd	r27, Y+24	; 0x18
    29ea:	00 97       	sbiw	r24, 0x00	; 0
    29ec:	a1 05       	cpc	r26, r1
    29ee:	b1 05       	cpc	r27, r1
    29f0:	19 f7       	brne	.-58     	; 0x29b8 <LCD_enuSendIntegerNum+0xa4>
			digit++;
			Copy_s32Num/=10;
		}
		Copy_s32Num=reminder;
    29f2:	89 81       	ldd	r24, Y+1	; 0x01
    29f4:	9a 81       	ldd	r25, Y+2	; 0x02
    29f6:	ab 81       	ldd	r26, Y+3	; 0x03
    29f8:	bc 81       	ldd	r27, Y+4	; 0x04
    29fa:	8d 8b       	std	Y+21, r24	; 0x15
    29fc:	9e 8b       	std	Y+22, r25	; 0x16
    29fe:	af 8b       	std	Y+23, r26	; 0x17
    2a00:	b8 8f       	std	Y+24, r27	; 0x18
    2a02:	33 c0       	rjmp	.+102    	; 0x2a6a <LCD_enuSendIntegerNum+0x156>
		while(Copy_s32Num){
			modelus=Copy_s32Num % 10;
    2a04:	8d 89       	ldd	r24, Y+21	; 0x15
    2a06:	9e 89       	ldd	r25, Y+22	; 0x16
    2a08:	af 89       	ldd	r26, Y+23	; 0x17
    2a0a:	b8 8d       	ldd	r27, Y+24	; 0x18
    2a0c:	2a e0       	ldi	r18, 0x0A	; 10
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	40 e0       	ldi	r20, 0x00	; 0
    2a12:	50 e0       	ldi	r21, 0x00	; 0
    2a14:	bc 01       	movw	r22, r24
    2a16:	cd 01       	movw	r24, r26
    2a18:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__divmodsi4>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	8d 83       	std	Y+5, r24	; 0x05
			num[digit-1]=modelus+'0';
    2a22:	8e 81       	ldd	r24, Y+6	; 0x06
    2a24:	88 2f       	mov	r24, r24
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	9c 01       	movw	r18, r24
    2a2a:	21 50       	subi	r18, 0x01	; 1
    2a2c:	30 40       	sbci	r19, 0x00	; 0
    2a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a30:	48 2f       	mov	r20, r24
    2a32:	40 5d       	subi	r20, 0xD0	; 208
    2a34:	ce 01       	movw	r24, r28
    2a36:	08 96       	adiw	r24, 0x08	; 8
    2a38:	fc 01       	movw	r30, r24
    2a3a:	e2 0f       	add	r30, r18
    2a3c:	f3 1f       	adc	r31, r19
    2a3e:	40 83       	st	Z, r20
			Copy_s32Num/=10;
    2a40:	8d 89       	ldd	r24, Y+21	; 0x15
    2a42:	9e 89       	ldd	r25, Y+22	; 0x16
    2a44:	af 89       	ldd	r26, Y+23	; 0x17
    2a46:	b8 8d       	ldd	r27, Y+24	; 0x18
    2a48:	2a e0       	ldi	r18, 0x0A	; 10
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	40 e0       	ldi	r20, 0x00	; 0
    2a4e:	50 e0       	ldi	r21, 0x00	; 0
    2a50:	bc 01       	movw	r22, r24
    2a52:	cd 01       	movw	r24, r26
    2a54:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__divmodsi4>
    2a58:	da 01       	movw	r26, r20
    2a5a:	c9 01       	movw	r24, r18
    2a5c:	8d 8b       	std	Y+21, r24	; 0x15
    2a5e:	9e 8b       	std	Y+22, r25	; 0x16
    2a60:	af 8b       	std	Y+23, r26	; 0x17
    2a62:	b8 8f       	std	Y+24, r27	; 0x18
			digit--;
    2a64:	8e 81       	ldd	r24, Y+6	; 0x06
    2a66:	81 50       	subi	r24, 0x01	; 1
    2a68:	8e 83       	std	Y+6, r24	; 0x06
		while(Copy_s32Num){
			digit++;
			Copy_s32Num/=10;
		}
		Copy_s32Num=reminder;
		while(Copy_s32Num){
    2a6a:	8d 89       	ldd	r24, Y+21	; 0x15
    2a6c:	9e 89       	ldd	r25, Y+22	; 0x16
    2a6e:	af 89       	ldd	r26, Y+23	; 0x17
    2a70:	b8 8d       	ldd	r27, Y+24	; 0x18
    2a72:	00 97       	sbiw	r24, 0x00	; 0
    2a74:	a1 05       	cpc	r26, r1
    2a76:	b1 05       	cpc	r27, r1
    2a78:	29 f6       	brne	.-118    	; 0x2a04 <LCD_enuSendIntegerNum+0xf0>
    2a7a:	0f c0       	rjmp	.+30     	; 0x2a9a <LCD_enuSendIntegerNum+0x186>
			num[digit-1]=modelus+'0';
			Copy_s32Num/=10;
			digit--;
		}
		while(num[digit]){
			LCD_enuSendData(num[digit++]);
    2a7c:	8e 81       	ldd	r24, Y+6	; 0x06
    2a7e:	28 2f       	mov	r18, r24
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	ce 01       	movw	r24, r28
    2a84:	08 96       	adiw	r24, 0x08	; 8
    2a86:	fc 01       	movw	r30, r24
    2a88:	e2 0f       	add	r30, r18
    2a8a:	f3 1f       	adc	r31, r19
    2a8c:	90 81       	ld	r25, Z
    2a8e:	8e 81       	ldd	r24, Y+6	; 0x06
    2a90:	8f 5f       	subi	r24, 0xFF	; 255
    2a92:	8e 83       	std	Y+6, r24	; 0x06
    2a94:	89 2f       	mov	r24, r25
    2a96:	0e 94 be 13 	call	0x277c	; 0x277c <LCD_enuSendData>
			modelus=Copy_s32Num % 10;
			num[digit-1]=modelus+'0';
			Copy_s32Num/=10;
			digit--;
		}
		while(num[digit]){
    2a9a:	8e 81       	ldd	r24, Y+6	; 0x06
    2a9c:	28 2f       	mov	r18, r24
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	ce 01       	movw	r24, r28
    2aa2:	08 96       	adiw	r24, 0x08	; 8
    2aa4:	fc 01       	movw	r30, r24
    2aa6:	e2 0f       	add	r30, r18
    2aa8:	f3 1f       	adc	r31, r19
    2aaa:	80 81       	ld	r24, Z
    2aac:	88 23       	and	r24, r24
    2aae:	31 f7       	brne	.-52     	; 0x2a7c <LCD_enuSendIntegerNum+0x168>
    2ab0:	04 c0       	rjmp	.+8      	; 0x2aba <LCD_enuSendIntegerNum+0x1a6>
			LCD_enuSendData(num[digit++]);
		}
	}
	else{
		LCD_enuSendData('0');
    2ab2:	80 e3       	ldi	r24, 0x30	; 48
    2ab4:	0e 94 be 13 	call	0x277c	; 0x277c <LCD_enuSendData>
		Local_enuErrorState = ES_OK;
    2ab8:	1f 82       	std	Y+7, r1	; 0x07

	}

	return Local_enuErrorState;
    2aba:	8f 81       	ldd	r24, Y+7	; 0x07

}
    2abc:	68 96       	adiw	r28, 0x18	; 24
    2abe:	0f b6       	in	r0, 0x3f	; 63
    2ac0:	f8 94       	cli
    2ac2:	de bf       	out	0x3e, r29	; 62
    2ac4:	0f be       	out	0x3f, r0	; 63
    2ac6:	cd bf       	out	0x3d, r28	; 61
    2ac8:	cf 91       	pop	r28
    2aca:	df 91       	pop	r29
    2acc:	08 95       	ret

00002ace <LCD_enuWriteNLatch>:

static ES_t LCD_enuWriteNLatch(u8 Copy_u8Byte)
{
    2ace:	df 93       	push	r29
    2ad0:	cf 93       	push	r28
    2ad2:	cd b7       	in	r28, 0x3d	; 61
    2ad4:	de b7       	in	r29, 0x3e	; 62
    2ad6:	ea 97       	sbiw	r28, 0x3a	; 58
    2ad8:	0f b6       	in	r0, 0x3f	; 63
    2ada:	f8 94       	cli
    2adc:	de bf       	out	0x3e, r29	; 62
    2ade:	0f be       	out	0x3f, r0	; 63
    2ae0:	cd bf       	out	0x3d, r28	; 61
    2ae2:	89 af       	std	Y+57, r24	; 0x39
	DIO_enuSetPinValue( RW_GRP , RW_PIN , DIO_u8LOW); //RW
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	62 e0       	ldi	r22, 0x02	; 2
    2ae8:	40 e0       	ldi	r20, 0x00	; 0
    2aea:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
	DIO_enuSetPinValue( EN_GRP , EN_PIN , DIO_u8LOW); //EN
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	60 e0       	ldi	r22, 0x00	; 0
    2af2:	40 e0       	ldi	r20, 0x00	; 0
    2af4:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
	_delay_ms (2);


#elif LCD_MODE == FOUR_BIT

	DIO_enuSetPinValue(D7_GRP , D7_PIN ,  ((Copy_u8Byte >> 7) & 1) );
    2af8:	89 ad       	ldd	r24, Y+57	; 0x39
    2afa:	98 2f       	mov	r25, r24
    2afc:	99 1f       	adc	r25, r25
    2afe:	99 27       	eor	r25, r25
    2b00:	99 1f       	adc	r25, r25
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	67 e0       	ldi	r22, 0x07	; 7
    2b06:	49 2f       	mov	r20, r25
    2b08:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP , D6_PIN ,  ((Copy_u8Byte >> 6) & 1) );
    2b0c:	89 ad       	ldd	r24, Y+57	; 0x39
    2b0e:	82 95       	swap	r24
    2b10:	86 95       	lsr	r24
    2b12:	86 95       	lsr	r24
    2b14:	83 70       	andi	r24, 0x03	; 3
    2b16:	98 2f       	mov	r25, r24
    2b18:	91 70       	andi	r25, 0x01	; 1
    2b1a:	80 e0       	ldi	r24, 0x00	; 0
    2b1c:	66 e0       	ldi	r22, 0x06	; 6
    2b1e:	49 2f       	mov	r20, r25
    2b20:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP , D5_PIN ,  ((Copy_u8Byte >> 5) & 1) );
    2b24:	89 ad       	ldd	r24, Y+57	; 0x39
    2b26:	82 95       	swap	r24
    2b28:	86 95       	lsr	r24
    2b2a:	87 70       	andi	r24, 0x07	; 7
    2b2c:	98 2f       	mov	r25, r24
    2b2e:	91 70       	andi	r25, 0x01	; 1
    2b30:	80 e0       	ldi	r24, 0x00	; 0
    2b32:	65 e0       	ldi	r22, 0x05	; 5
    2b34:	49 2f       	mov	r20, r25
    2b36:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP , D4_PIN ,  ((Copy_u8Byte >> 4) & 1) );
    2b3a:	89 ad       	ldd	r24, Y+57	; 0x39
    2b3c:	82 95       	swap	r24
    2b3e:	8f 70       	andi	r24, 0x0F	; 15
    2b40:	98 2f       	mov	r25, r24
    2b42:	91 70       	andi	r25, 0x01	; 1
    2b44:	80 e0       	ldi	r24, 0x00	; 0
    2b46:	64 e0       	ldi	r22, 0x04	; 4
    2b48:	49 2f       	mov	r20, r25
    2b4a:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_GRP , EN_PIN ,  DIO_u8HIGH );
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	60 e0       	ldi	r22, 0x00	; 0
    2b52:	41 e0       	ldi	r20, 0x01	; 1
    2b54:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
    2b58:	80 e0       	ldi	r24, 0x00	; 0
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	a0 e0       	ldi	r26, 0x00	; 0
    2b5e:	b0 e4       	ldi	r27, 0x40	; 64
    2b60:	8d ab       	std	Y+53, r24	; 0x35
    2b62:	9e ab       	std	Y+54, r25	; 0x36
    2b64:	af ab       	std	Y+55, r26	; 0x37
    2b66:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b68:	6d a9       	ldd	r22, Y+53	; 0x35
    2b6a:	7e a9       	ldd	r23, Y+54	; 0x36
    2b6c:	8f a9       	ldd	r24, Y+55	; 0x37
    2b6e:	98 ad       	ldd	r25, Y+56	; 0x38
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	4a e7       	ldi	r20, 0x7A	; 122
    2b76:	55 e4       	ldi	r21, 0x45	; 69
    2b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	89 ab       	std	Y+49, r24	; 0x31
    2b82:	9a ab       	std	Y+50, r25	; 0x32
    2b84:	ab ab       	std	Y+51, r26	; 0x33
    2b86:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b88:	69 a9       	ldd	r22, Y+49	; 0x31
    2b8a:	7a a9       	ldd	r23, Y+50	; 0x32
    2b8c:	8b a9       	ldd	r24, Y+51	; 0x33
    2b8e:	9c a9       	ldd	r25, Y+52	; 0x34
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	40 e8       	ldi	r20, 0x80	; 128
    2b96:	5f e3       	ldi	r21, 0x3F	; 63
    2b98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b9c:	88 23       	and	r24, r24
    2b9e:	2c f4       	brge	.+10     	; 0x2baa <LCD_enuWriteNLatch+0xdc>
		__ticks = 1;
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	98 ab       	std	Y+48, r25	; 0x30
    2ba6:	8f a7       	std	Y+47, r24	; 0x2f
    2ba8:	3f c0       	rjmp	.+126    	; 0x2c28 <LCD_enuWriteNLatch+0x15a>
	else if (__tmp > 65535)
    2baa:	69 a9       	ldd	r22, Y+49	; 0x31
    2bac:	7a a9       	ldd	r23, Y+50	; 0x32
    2bae:	8b a9       	ldd	r24, Y+51	; 0x33
    2bb0:	9c a9       	ldd	r25, Y+52	; 0x34
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	3f ef       	ldi	r19, 0xFF	; 255
    2bb6:	4f e7       	ldi	r20, 0x7F	; 127
    2bb8:	57 e4       	ldi	r21, 0x47	; 71
    2bba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bbe:	18 16       	cp	r1, r24
    2bc0:	4c f5       	brge	.+82     	; 0x2c14 <LCD_enuWriteNLatch+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc2:	6d a9       	ldd	r22, Y+53	; 0x35
    2bc4:	7e a9       	ldd	r23, Y+54	; 0x36
    2bc6:	8f a9       	ldd	r24, Y+55	; 0x37
    2bc8:	98 ad       	ldd	r25, Y+56	; 0x38
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	40 e2       	ldi	r20, 0x20	; 32
    2bd0:	51 e4       	ldi	r21, 0x41	; 65
    2bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	bc 01       	movw	r22, r24
    2bdc:	cd 01       	movw	r24, r26
    2bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be2:	dc 01       	movw	r26, r24
    2be4:	cb 01       	movw	r24, r22
    2be6:	98 ab       	std	Y+48, r25	; 0x30
    2be8:	8f a7       	std	Y+47, r24	; 0x2f
    2bea:	0f c0       	rjmp	.+30     	; 0x2c0a <LCD_enuWriteNLatch+0x13c>
    2bec:	80 e9       	ldi	r24, 0x90	; 144
    2bee:	91 e0       	ldi	r25, 0x01	; 1
    2bf0:	9e a7       	std	Y+46, r25	; 0x2e
    2bf2:	8d a7       	std	Y+45, r24	; 0x2d
    2bf4:	8d a5       	ldd	r24, Y+45	; 0x2d
    2bf6:	9e a5       	ldd	r25, Y+46	; 0x2e
    2bf8:	01 97       	sbiw	r24, 0x01	; 1
    2bfa:	f1 f7       	brne	.-4      	; 0x2bf8 <LCD_enuWriteNLatch+0x12a>
    2bfc:	9e a7       	std	Y+46, r25	; 0x2e
    2bfe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c00:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c02:	98 a9       	ldd	r25, Y+48	; 0x30
    2c04:	01 97       	sbiw	r24, 0x01	; 1
    2c06:	98 ab       	std	Y+48, r25	; 0x30
    2c08:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c0c:	98 a9       	ldd	r25, Y+48	; 0x30
    2c0e:	00 97       	sbiw	r24, 0x00	; 0
    2c10:	69 f7       	brne	.-38     	; 0x2bec <LCD_enuWriteNLatch+0x11e>
    2c12:	14 c0       	rjmp	.+40     	; 0x2c3c <LCD_enuWriteNLatch+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c14:	69 a9       	ldd	r22, Y+49	; 0x31
    2c16:	7a a9       	ldd	r23, Y+50	; 0x32
    2c18:	8b a9       	ldd	r24, Y+51	; 0x33
    2c1a:	9c a9       	ldd	r25, Y+52	; 0x34
    2c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	98 ab       	std	Y+48, r25	; 0x30
    2c26:	8f a7       	std	Y+47, r24	; 0x2f
    2c28:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c2a:	98 a9       	ldd	r25, Y+48	; 0x30
    2c2c:	9c a7       	std	Y+44, r25	; 0x2c
    2c2e:	8b a7       	std	Y+43, r24	; 0x2b
    2c30:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c32:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c34:	01 97       	sbiw	r24, 0x01	; 1
    2c36:	f1 f7       	brne	.-4      	; 0x2c34 <LCD_enuWriteNLatch+0x166>
    2c38:	9c a7       	std	Y+44, r25	; 0x2c
    2c3a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms (2);
	DIO_enuSetPinValue(EN_GRP , EN_PIN ,  DIO_u8LOW );
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	60 e0       	ldi	r22, 0x00	; 0
    2c40:	40 e0       	ldi	r20, 0x00	; 0
    2c42:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
    2c46:	80 e0       	ldi	r24, 0x00	; 0
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	a0 e0       	ldi	r26, 0x00	; 0
    2c4c:	b0 e4       	ldi	r27, 0x40	; 64
    2c4e:	8f a3       	std	Y+39, r24	; 0x27
    2c50:	98 a7       	std	Y+40, r25	; 0x28
    2c52:	a9 a7       	std	Y+41, r26	; 0x29
    2c54:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c56:	6f a1       	ldd	r22, Y+39	; 0x27
    2c58:	78 a5       	ldd	r23, Y+40	; 0x28
    2c5a:	89 a5       	ldd	r24, Y+41	; 0x29
    2c5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c5e:	20 e0       	ldi	r18, 0x00	; 0
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	4a e7       	ldi	r20, 0x7A	; 122
    2c64:	55 e4       	ldi	r21, 0x45	; 69
    2c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	cb 01       	movw	r24, r22
    2c6e:	8b a3       	std	Y+35, r24	; 0x23
    2c70:	9c a3       	std	Y+36, r25	; 0x24
    2c72:	ad a3       	std	Y+37, r26	; 0x25
    2c74:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c76:	6b a1       	ldd	r22, Y+35	; 0x23
    2c78:	7c a1       	ldd	r23, Y+36	; 0x24
    2c7a:	8d a1       	ldd	r24, Y+37	; 0x25
    2c7c:	9e a1       	ldd	r25, Y+38	; 0x26
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	40 e8       	ldi	r20, 0x80	; 128
    2c84:	5f e3       	ldi	r21, 0x3F	; 63
    2c86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c8a:	88 23       	and	r24, r24
    2c8c:	2c f4       	brge	.+10     	; 0x2c98 <LCD_enuWriteNLatch+0x1ca>
		__ticks = 1;
    2c8e:	81 e0       	ldi	r24, 0x01	; 1
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	9a a3       	std	Y+34, r25	; 0x22
    2c94:	89 a3       	std	Y+33, r24	; 0x21
    2c96:	3f c0       	rjmp	.+126    	; 0x2d16 <LCD_enuWriteNLatch+0x248>
	else if (__tmp > 65535)
    2c98:	6b a1       	ldd	r22, Y+35	; 0x23
    2c9a:	7c a1       	ldd	r23, Y+36	; 0x24
    2c9c:	8d a1       	ldd	r24, Y+37	; 0x25
    2c9e:	9e a1       	ldd	r25, Y+38	; 0x26
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	3f ef       	ldi	r19, 0xFF	; 255
    2ca4:	4f e7       	ldi	r20, 0x7F	; 127
    2ca6:	57 e4       	ldi	r21, 0x47	; 71
    2ca8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cac:	18 16       	cp	r1, r24
    2cae:	4c f5       	brge	.+82     	; 0x2d02 <LCD_enuWriteNLatch+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb0:	6f a1       	ldd	r22, Y+39	; 0x27
    2cb2:	78 a5       	ldd	r23, Y+40	; 0x28
    2cb4:	89 a5       	ldd	r24, Y+41	; 0x29
    2cb6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	40 e2       	ldi	r20, 0x20	; 32
    2cbe:	51 e4       	ldi	r21, 0x41	; 65
    2cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	bc 01       	movw	r22, r24
    2cca:	cd 01       	movw	r24, r26
    2ccc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd0:	dc 01       	movw	r26, r24
    2cd2:	cb 01       	movw	r24, r22
    2cd4:	9a a3       	std	Y+34, r25	; 0x22
    2cd6:	89 a3       	std	Y+33, r24	; 0x21
    2cd8:	0f c0       	rjmp	.+30     	; 0x2cf8 <LCD_enuWriteNLatch+0x22a>
    2cda:	80 e9       	ldi	r24, 0x90	; 144
    2cdc:	91 e0       	ldi	r25, 0x01	; 1
    2cde:	98 a3       	std	Y+32, r25	; 0x20
    2ce0:	8f 8f       	std	Y+31, r24	; 0x1f
    2ce2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ce4:	98 a1       	ldd	r25, Y+32	; 0x20
    2ce6:	01 97       	sbiw	r24, 0x01	; 1
    2ce8:	f1 f7       	brne	.-4      	; 0x2ce6 <LCD_enuWriteNLatch+0x218>
    2cea:	98 a3       	std	Y+32, r25	; 0x20
    2cec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cee:	89 a1       	ldd	r24, Y+33	; 0x21
    2cf0:	9a a1       	ldd	r25, Y+34	; 0x22
    2cf2:	01 97       	sbiw	r24, 0x01	; 1
    2cf4:	9a a3       	std	Y+34, r25	; 0x22
    2cf6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf8:	89 a1       	ldd	r24, Y+33	; 0x21
    2cfa:	9a a1       	ldd	r25, Y+34	; 0x22
    2cfc:	00 97       	sbiw	r24, 0x00	; 0
    2cfe:	69 f7       	brne	.-38     	; 0x2cda <LCD_enuWriteNLatch+0x20c>
    2d00:	14 c0       	rjmp	.+40     	; 0x2d2a <LCD_enuWriteNLatch+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d02:	6b a1       	ldd	r22, Y+35	; 0x23
    2d04:	7c a1       	ldd	r23, Y+36	; 0x24
    2d06:	8d a1       	ldd	r24, Y+37	; 0x25
    2d08:	9e a1       	ldd	r25, Y+38	; 0x26
    2d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0e:	dc 01       	movw	r26, r24
    2d10:	cb 01       	movw	r24, r22
    2d12:	9a a3       	std	Y+34, r25	; 0x22
    2d14:	89 a3       	std	Y+33, r24	; 0x21
    2d16:	89 a1       	ldd	r24, Y+33	; 0x21
    2d18:	9a a1       	ldd	r25, Y+34	; 0x22
    2d1a:	9e 8f       	std	Y+30, r25	; 0x1e
    2d1c:	8d 8f       	std	Y+29, r24	; 0x1d
    2d1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d20:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d22:	01 97       	sbiw	r24, 0x01	; 1
    2d24:	f1 f7       	brne	.-4      	; 0x2d22 <LCD_enuWriteNLatch+0x254>
    2d26:	9e 8f       	std	Y+30, r25	; 0x1e
    2d28:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms (2);

	DIO_enuSetPinValue(D7_GRP , D7_PIN ,  ((Copy_u8Byte >> 3) & 1) );
    2d2a:	89 ad       	ldd	r24, Y+57	; 0x39
    2d2c:	86 95       	lsr	r24
    2d2e:	86 95       	lsr	r24
    2d30:	86 95       	lsr	r24
    2d32:	98 2f       	mov	r25, r24
    2d34:	91 70       	andi	r25, 0x01	; 1
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	67 e0       	ldi	r22, 0x07	; 7
    2d3a:	49 2f       	mov	r20, r25
    2d3c:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP , D6_PIN ,  ((Copy_u8Byte >> 2) & 1) );
    2d40:	89 ad       	ldd	r24, Y+57	; 0x39
    2d42:	86 95       	lsr	r24
    2d44:	86 95       	lsr	r24
    2d46:	98 2f       	mov	r25, r24
    2d48:	91 70       	andi	r25, 0x01	; 1
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	66 e0       	ldi	r22, 0x06	; 6
    2d4e:	49 2f       	mov	r20, r25
    2d50:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP , D5_PIN ,  ((Copy_u8Byte >> 1) & 1) );
    2d54:	89 ad       	ldd	r24, Y+57	; 0x39
    2d56:	86 95       	lsr	r24
    2d58:	98 2f       	mov	r25, r24
    2d5a:	91 70       	andi	r25, 0x01	; 1
    2d5c:	80 e0       	ldi	r24, 0x00	; 0
    2d5e:	65 e0       	ldi	r22, 0x05	; 5
    2d60:	49 2f       	mov	r20, r25
    2d62:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP , D4_PIN ,  ((Copy_u8Byte >> 0) & 1) );
    2d66:	89 ad       	ldd	r24, Y+57	; 0x39
    2d68:	98 2f       	mov	r25, r24
    2d6a:	91 70       	andi	r25, 0x01	; 1
    2d6c:	80 e0       	ldi	r24, 0x00	; 0
    2d6e:	64 e0       	ldi	r22, 0x04	; 4
    2d70:	49 2f       	mov	r20, r25
    2d72:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>


	DIO_enuSetPinValue(EN_GRP , EN_PIN ,  DIO_u8HIGH );
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	60 e0       	ldi	r22, 0x00	; 0
    2d7a:	41 e0       	ldi	r20, 0x01	; 1
    2d7c:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
    2d80:	80 e0       	ldi	r24, 0x00	; 0
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	a0 e0       	ldi	r26, 0x00	; 0
    2d86:	b0 e4       	ldi	r27, 0x40	; 64
    2d88:	89 8f       	std	Y+25, r24	; 0x19
    2d8a:	9a 8f       	std	Y+26, r25	; 0x1a
    2d8c:	ab 8f       	std	Y+27, r26	; 0x1b
    2d8e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d90:	69 8d       	ldd	r22, Y+25	; 0x19
    2d92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d98:	20 e0       	ldi	r18, 0x00	; 0
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	4a e7       	ldi	r20, 0x7A	; 122
    2d9e:	55 e4       	ldi	r21, 0x45	; 69
    2da0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da4:	dc 01       	movw	r26, r24
    2da6:	cb 01       	movw	r24, r22
    2da8:	8d 8b       	std	Y+21, r24	; 0x15
    2daa:	9e 8b       	std	Y+22, r25	; 0x16
    2dac:	af 8b       	std	Y+23, r26	; 0x17
    2dae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2db0:	6d 89       	ldd	r22, Y+21	; 0x15
    2db2:	7e 89       	ldd	r23, Y+22	; 0x16
    2db4:	8f 89       	ldd	r24, Y+23	; 0x17
    2db6:	98 8d       	ldd	r25, Y+24	; 0x18
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	40 e8       	ldi	r20, 0x80	; 128
    2dbe:	5f e3       	ldi	r21, 0x3F	; 63
    2dc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dc4:	88 23       	and	r24, r24
    2dc6:	2c f4       	brge	.+10     	; 0x2dd2 <LCD_enuWriteNLatch+0x304>
		__ticks = 1;
    2dc8:	81 e0       	ldi	r24, 0x01	; 1
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	9c 8b       	std	Y+20, r25	; 0x14
    2dce:	8b 8b       	std	Y+19, r24	; 0x13
    2dd0:	3f c0       	rjmp	.+126    	; 0x2e50 <LCD_enuWriteNLatch+0x382>
	else if (__tmp > 65535)
    2dd2:	6d 89       	ldd	r22, Y+21	; 0x15
    2dd4:	7e 89       	ldd	r23, Y+22	; 0x16
    2dd6:	8f 89       	ldd	r24, Y+23	; 0x17
    2dd8:	98 8d       	ldd	r25, Y+24	; 0x18
    2dda:	20 e0       	ldi	r18, 0x00	; 0
    2ddc:	3f ef       	ldi	r19, 0xFF	; 255
    2dde:	4f e7       	ldi	r20, 0x7F	; 127
    2de0:	57 e4       	ldi	r21, 0x47	; 71
    2de2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2de6:	18 16       	cp	r1, r24
    2de8:	4c f5       	brge	.+82     	; 0x2e3c <LCD_enuWriteNLatch+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dea:	69 8d       	ldd	r22, Y+25	; 0x19
    2dec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2df0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2df2:	20 e0       	ldi	r18, 0x00	; 0
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	40 e2       	ldi	r20, 0x20	; 32
    2df8:	51 e4       	ldi	r21, 0x41	; 65
    2dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dfe:	dc 01       	movw	r26, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	bc 01       	movw	r22, r24
    2e04:	cd 01       	movw	r24, r26
    2e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e0a:	dc 01       	movw	r26, r24
    2e0c:	cb 01       	movw	r24, r22
    2e0e:	9c 8b       	std	Y+20, r25	; 0x14
    2e10:	8b 8b       	std	Y+19, r24	; 0x13
    2e12:	0f c0       	rjmp	.+30     	; 0x2e32 <LCD_enuWriteNLatch+0x364>
    2e14:	80 e9       	ldi	r24, 0x90	; 144
    2e16:	91 e0       	ldi	r25, 0x01	; 1
    2e18:	9a 8b       	std	Y+18, r25	; 0x12
    2e1a:	89 8b       	std	Y+17, r24	; 0x11
    2e1c:	89 89       	ldd	r24, Y+17	; 0x11
    2e1e:	9a 89       	ldd	r25, Y+18	; 0x12
    2e20:	01 97       	sbiw	r24, 0x01	; 1
    2e22:	f1 f7       	brne	.-4      	; 0x2e20 <LCD_enuWriteNLatch+0x352>
    2e24:	9a 8b       	std	Y+18, r25	; 0x12
    2e26:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e28:	8b 89       	ldd	r24, Y+19	; 0x13
    2e2a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e2c:	01 97       	sbiw	r24, 0x01	; 1
    2e2e:	9c 8b       	std	Y+20, r25	; 0x14
    2e30:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e32:	8b 89       	ldd	r24, Y+19	; 0x13
    2e34:	9c 89       	ldd	r25, Y+20	; 0x14
    2e36:	00 97       	sbiw	r24, 0x00	; 0
    2e38:	69 f7       	brne	.-38     	; 0x2e14 <LCD_enuWriteNLatch+0x346>
    2e3a:	14 c0       	rjmp	.+40     	; 0x2e64 <LCD_enuWriteNLatch+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e3c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e3e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e40:	8f 89       	ldd	r24, Y+23	; 0x17
    2e42:	98 8d       	ldd	r25, Y+24	; 0x18
    2e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e48:	dc 01       	movw	r26, r24
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	9c 8b       	std	Y+20, r25	; 0x14
    2e4e:	8b 8b       	std	Y+19, r24	; 0x13
    2e50:	8b 89       	ldd	r24, Y+19	; 0x13
    2e52:	9c 89       	ldd	r25, Y+20	; 0x14
    2e54:	98 8b       	std	Y+16, r25	; 0x10
    2e56:	8f 87       	std	Y+15, r24	; 0x0f
    2e58:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e5a:	98 89       	ldd	r25, Y+16	; 0x10
    2e5c:	01 97       	sbiw	r24, 0x01	; 1
    2e5e:	f1 f7       	brne	.-4      	; 0x2e5c <LCD_enuWriteNLatch+0x38e>
    2e60:	98 8b       	std	Y+16, r25	; 0x10
    2e62:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms (2);
	DIO_enuSetPinValue(EN_GRP , EN_PIN ,  DIO_u8LOW );
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	60 e0       	ldi	r22, 0x00	; 0
    2e68:	40 e0       	ldi	r20, 0x00	; 0
    2e6a:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
    2e6e:	80 e0       	ldi	r24, 0x00	; 0
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	a0 e0       	ldi	r26, 0x00	; 0
    2e74:	b0 e4       	ldi	r27, 0x40	; 64
    2e76:	8b 87       	std	Y+11, r24	; 0x0b
    2e78:	9c 87       	std	Y+12, r25	; 0x0c
    2e7a:	ad 87       	std	Y+13, r26	; 0x0d
    2e7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e80:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e82:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e84:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	4a e7       	ldi	r20, 0x7A	; 122
    2e8c:	55 e4       	ldi	r21, 0x45	; 69
    2e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	8f 83       	std	Y+7, r24	; 0x07
    2e98:	98 87       	std	Y+8, r25	; 0x08
    2e9a:	a9 87       	std	Y+9, r26	; 0x09
    2e9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2ea0:	78 85       	ldd	r23, Y+8	; 0x08
    2ea2:	89 85       	ldd	r24, Y+9	; 0x09
    2ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
    2eaa:	40 e8       	ldi	r20, 0x80	; 128
    2eac:	5f e3       	ldi	r21, 0x3F	; 63
    2eae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2eb2:	88 23       	and	r24, r24
    2eb4:	2c f4       	brge	.+10     	; 0x2ec0 <LCD_enuWriteNLatch+0x3f2>
		__ticks = 1;
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	9e 83       	std	Y+6, r25	; 0x06
    2ebc:	8d 83       	std	Y+5, r24	; 0x05
    2ebe:	3f c0       	rjmp	.+126    	; 0x2f3e <LCD_enuWriteNLatch+0x470>
	else if (__tmp > 65535)
    2ec0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec2:	78 85       	ldd	r23, Y+8	; 0x08
    2ec4:	89 85       	ldd	r24, Y+9	; 0x09
    2ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	3f ef       	ldi	r19, 0xFF	; 255
    2ecc:	4f e7       	ldi	r20, 0x7F	; 127
    2ece:	57 e4       	ldi	r21, 0x47	; 71
    2ed0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ed4:	18 16       	cp	r1, r24
    2ed6:	4c f5       	brge	.+82     	; 0x2f2a <LCD_enuWriteNLatch+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eda:	7c 85       	ldd	r23, Y+12	; 0x0c
    2edc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ede:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ee0:	20 e0       	ldi	r18, 0x00	; 0
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	40 e2       	ldi	r20, 0x20	; 32
    2ee6:	51 e4       	ldi	r21, 0x41	; 65
    2ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eec:	dc 01       	movw	r26, r24
    2eee:	cb 01       	movw	r24, r22
    2ef0:	bc 01       	movw	r22, r24
    2ef2:	cd 01       	movw	r24, r26
    2ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	9e 83       	std	Y+6, r25	; 0x06
    2efe:	8d 83       	std	Y+5, r24	; 0x05
    2f00:	0f c0       	rjmp	.+30     	; 0x2f20 <LCD_enuWriteNLatch+0x452>
    2f02:	80 e9       	ldi	r24, 0x90	; 144
    2f04:	91 e0       	ldi	r25, 0x01	; 1
    2f06:	9c 83       	std	Y+4, r25	; 0x04
    2f08:	8b 83       	std	Y+3, r24	; 0x03
    2f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f0e:	01 97       	sbiw	r24, 0x01	; 1
    2f10:	f1 f7       	brne	.-4      	; 0x2f0e <LCD_enuWriteNLatch+0x440>
    2f12:	9c 83       	std	Y+4, r25	; 0x04
    2f14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f16:	8d 81       	ldd	r24, Y+5	; 0x05
    2f18:	9e 81       	ldd	r25, Y+6	; 0x06
    2f1a:	01 97       	sbiw	r24, 0x01	; 1
    2f1c:	9e 83       	std	Y+6, r25	; 0x06
    2f1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f20:	8d 81       	ldd	r24, Y+5	; 0x05
    2f22:	9e 81       	ldd	r25, Y+6	; 0x06
    2f24:	00 97       	sbiw	r24, 0x00	; 0
    2f26:	69 f7       	brne	.-38     	; 0x2f02 <LCD_enuWriteNLatch+0x434>
    2f28:	14 c0       	rjmp	.+40     	; 0x2f52 <LCD_enuWriteNLatch+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f2c:	78 85       	ldd	r23, Y+8	; 0x08
    2f2e:	89 85       	ldd	r24, Y+9	; 0x09
    2f30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f36:	dc 01       	movw	r26, r24
    2f38:	cb 01       	movw	r24, r22
    2f3a:	9e 83       	std	Y+6, r25	; 0x06
    2f3c:	8d 83       	std	Y+5, r24	; 0x05
    2f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f40:	9e 81       	ldd	r25, Y+6	; 0x06
    2f42:	9a 83       	std	Y+2, r25	; 0x02
    2f44:	89 83       	std	Y+1, r24	; 0x01
    2f46:	89 81       	ldd	r24, Y+1	; 0x01
    2f48:	9a 81       	ldd	r25, Y+2	; 0x02
    2f4a:	01 97       	sbiw	r24, 0x01	; 1
    2f4c:	f1 f7       	brne	.-4      	; 0x2f4a <LCD_enuWriteNLatch+0x47c>
    2f4e:	9a 83       	std	Y+2, r25	; 0x02
    2f50:	89 83       	std	Y+1, r24	; 0x01

#else
#error "LCD mode is wrong ya 7ayawan"
#endif

}
    2f52:	ea 96       	adiw	r28, 0x3a	; 58
    2f54:	0f b6       	in	r0, 0x3f	; 63
    2f56:	f8 94       	cli
    2f58:	de bf       	out	0x3e, r29	; 62
    2f5a:	0f be       	out	0x3f, r0	; 63
    2f5c:	cd bf       	out	0x3d, r28	; 61
    2f5e:	cf 91       	pop	r28
    2f60:	df 91       	pop	r29
    2f62:	08 95       	ret

00002f64 <Keypad_enuInit>:





ES_t Keypad_enuInit(void){
    2f64:	df 93       	push	r29
    2f66:	cf 93       	push	r28
    2f68:	0f 92       	push	r0
    2f6a:	cd b7       	in	r28, 0x3d	; 61
    2f6c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    2f70:	89 83       	std	Y+1, r24	; 0x01

#if Col_Num>0 &&Col_Num<=4 && Row_Num>0 && Row_Num<=4

	DIO_enuSetPinDirection(R1_GRB,R1_PIN,DIO_u8INPUT);
    2f72:	82 e0       	ldi	r24, 0x02	; 2
    2f74:	60 e0       	ldi	r22, 0x00	; 0
    2f76:	40 e0       	ldi	r20, 0x00	; 0
    2f78:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R2_GRB,R2_PIN,DIO_u8INPUT);
    2f7c:	82 e0       	ldi	r24, 0x02	; 2
    2f7e:	61 e0       	ldi	r22, 0x01	; 1
    2f80:	40 e0       	ldi	r20, 0x00	; 0
    2f82:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R3_GRB,R3_PIN,DIO_u8INPUT);
    2f86:	82 e0       	ldi	r24, 0x02	; 2
    2f88:	62 e0       	ldi	r22, 0x02	; 2
    2f8a:	40 e0       	ldi	r20, 0x00	; 0
    2f8c:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R4_GRB,R4_PIN,DIO_u8INPUT);
    2f90:	82 e0       	ldi	r24, 0x02	; 2
    2f92:	63 e0       	ldi	r22, 0x03	; 3
    2f94:	40 e0       	ldi	r20, 0x00	; 0
    2f96:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(C1_GRB,C1_PIN,DIO_u8OUTPUT);
    2f9a:	83 e0       	ldi	r24, 0x03	; 3
    2f9c:	64 e0       	ldi	r22, 0x04	; 4
    2f9e:	41 e0       	ldi	r20, 0x01	; 1
    2fa0:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C2_GRB,C2_PIN,DIO_u8OUTPUT);
    2fa4:	83 e0       	ldi	r24, 0x03	; 3
    2fa6:	65 e0       	ldi	r22, 0x05	; 5
    2fa8:	41 e0       	ldi	r20, 0x01	; 1
    2faa:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C3_GRB,C3_PIN,DIO_u8OUTPUT);
    2fae:	83 e0       	ldi	r24, 0x03	; 3
    2fb0:	66 e0       	ldi	r22, 0x06	; 6
    2fb2:	41 e0       	ldi	r20, 0x01	; 1
    2fb4:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C4_GRB,C4_PIN,DIO_u8OUTPUT);
    2fb8:	83 e0       	ldi	r24, 0x03	; 3
    2fba:	67 e0       	ldi	r22, 0x07	; 7
    2fbc:	41 e0       	ldi	r20, 0x01	; 1
    2fbe:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <DIO_enuSetPinDirection>

	DIO_enuSetPinValue(R1_GRB,R1_PIN,DIO_u8PULLUP);
    2fc2:	82 e0       	ldi	r24, 0x02	; 2
    2fc4:	60 e0       	ldi	r22, 0x00	; 0
    2fc6:	41 e0       	ldi	r20, 0x01	; 1
    2fc8:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R2_GRB,R2_PIN,DIO_u8PULLUP);
    2fcc:	82 e0       	ldi	r24, 0x02	; 2
    2fce:	61 e0       	ldi	r22, 0x01	; 1
    2fd0:	41 e0       	ldi	r20, 0x01	; 1
    2fd2:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R3_GRB,R3_PIN,DIO_u8PULLUP);
    2fd6:	82 e0       	ldi	r24, 0x02	; 2
    2fd8:	62 e0       	ldi	r22, 0x02	; 2
    2fda:	41 e0       	ldi	r20, 0x01	; 1
    2fdc:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R4_GRB,R4_PIN,DIO_u8PULLUP);
    2fe0:	82 e0       	ldi	r24, 0x02	; 2
    2fe2:	63 e0       	ldi	r22, 0x03	; 3
    2fe4:	41 e0       	ldi	r20, 0x01	; 1
    2fe6:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(C1_GRB , C1_PIN , DIO_u8HIGH);
    2fea:	83 e0       	ldi	r24, 0x03	; 3
    2fec:	64 e0       	ldi	r22, 0x04	; 4
    2fee:	41 e0       	ldi	r20, 0x01	; 1
    2ff0:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C2_GRB , C2_PIN , DIO_u8HIGH);
    2ff4:	83 e0       	ldi	r24, 0x03	; 3
    2ff6:	65 e0       	ldi	r22, 0x05	; 5
    2ff8:	41 e0       	ldi	r20, 0x01	; 1
    2ffa:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C3_GRB , C3_PIN , DIO_u8HIGH);
    2ffe:	83 e0       	ldi	r24, 0x03	; 3
    3000:	66 e0       	ldi	r22, 0x06	; 6
    3002:	41 e0       	ldi	r20, 0x01	; 1
    3004:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C4_GRB , C4_PIN , DIO_u8HIGH);
    3008:	83 e0       	ldi	r24, 0x03	; 3
    300a:	67 e0       	ldi	r22, 0x07	; 7
    300c:	41 e0       	ldi	r20, 0x01	; 1
    300e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
#else
#error"the KeyPad size is wrong "
#endif

	Local_enuErrorState=ES_OK;
    3012:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    3014:	89 81       	ldd	r24, Y+1	; 0x01
}
    3016:	0f 90       	pop	r0
    3018:	cf 91       	pop	r28
    301a:	df 91       	pop	r29
    301c:	08 95       	ret

0000301e <Keypad_enuGetPressedKey>:

ES_t Keypad_enuGetPressedKey(u8* Copy_Pu8KeyValue){
    301e:	df 93       	push	r29
    3020:	cf 93       	push	r28
    3022:	cd b7       	in	r28, 0x3d	; 61
    3024:	de b7       	in	r29, 0x3e	; 62
    3026:	e9 97       	sbiw	r28, 0x39	; 57
    3028:	0f b6       	in	r0, 0x3f	; 63
    302a:	f8 94       	cli
    302c:	de bf       	out	0x3e, r29	; 62
    302e:	0f be       	out	0x3f, r0	; 63
    3030:	cd bf       	out	0x3d, r28	; 61
    3032:	9c ab       	std	Y+52, r25	; 0x34
    3034:	8b ab       	std	Y+51, r24	; 0x33
	ES_t Local_enuErrorState=ES_NOK;
    3036:	81 e0       	ldi	r24, 0x01	; 1
    3038:	89 8b       	std	Y+17, r24	; 0x11
	if(Copy_Pu8KeyValue!=NULL){
    303a:	8b a9       	ldd	r24, Y+51	; 0x33
    303c:	9c a9       	ldd	r25, Y+52	; 0x34
    303e:	00 97       	sbiw	r24, 0x00	; 0
    3040:	09 f4       	brne	.+2      	; 0x3044 <Keypad_enuGetPressedKey+0x26>
    3042:	68 c1       	rjmp	.+720    	; 0x3314 <Keypad_enuGetPressedKey+0x2f6>
		u8 Local_u8RowIter=0,Local_u8RowValue;
    3044:	18 8a       	std	Y+16, r1	; 0x10
		u8 Local_u8ColGRB[]={C1_GRB,C2_GRB,C3_GRB,C4_GRB};
    3046:	83 e0       	ldi	r24, 0x03	; 3
    3048:	8b 8b       	std	Y+19, r24	; 0x13
    304a:	83 e0       	ldi	r24, 0x03	; 3
    304c:	8c 8b       	std	Y+20, r24	; 0x14
    304e:	83 e0       	ldi	r24, 0x03	; 3
    3050:	8d 8b       	std	Y+21, r24	; 0x15
    3052:	83 e0       	ldi	r24, 0x03	; 3
    3054:	8e 8b       	std	Y+22, r24	; 0x16
		u8 Local_u8ColPIN[]={C1_PIN,C2_PIN,C3_PIN,C4_PIN};
    3056:	84 e0       	ldi	r24, 0x04	; 4
    3058:	8f 8b       	std	Y+23, r24	; 0x17
    305a:	85 e0       	ldi	r24, 0x05	; 5
    305c:	88 8f       	std	Y+24, r24	; 0x18
    305e:	86 e0       	ldi	r24, 0x06	; 6
    3060:	89 8f       	std	Y+25, r24	; 0x19
    3062:	87 e0       	ldi	r24, 0x07	; 7
    3064:	8a 8f       	std	Y+26, r24	; 0x1a

		u8 Local_u8RowGRB[]={R1_GRB,R2_GRB,R3_GRB,R4_GRB};
    3066:	82 e0       	ldi	r24, 0x02	; 2
    3068:	8b 8f       	std	Y+27, r24	; 0x1b
    306a:	82 e0       	ldi	r24, 0x02	; 2
    306c:	8c 8f       	std	Y+28, r24	; 0x1c
    306e:	82 e0       	ldi	r24, 0x02	; 2
    3070:	8d 8f       	std	Y+29, r24	; 0x1d
    3072:	82 e0       	ldi	r24, 0x02	; 2
    3074:	8e 8f       	std	Y+30, r24	; 0x1e
		u8 Local_u8RowPIN[]={R1_PIN,R2_PIN,R3_PIN,R4_PIN};
    3076:	1f 8e       	std	Y+31, r1	; 0x1f
    3078:	81 e0       	ldi	r24, 0x01	; 1
    307a:	88 a3       	std	Y+32, r24	; 0x20
    307c:	82 e0       	ldi	r24, 0x02	; 2
    307e:	89 a3       	std	Y+33, r24	; 0x21
    3080:	83 e0       	ldi	r24, 0x03	; 3
    3082:	8a a3       	std	Y+34, r24	; 0x22
		u8 Local_u8ColIter=0;
    3084:	1f 86       	std	Y+15, r1	; 0x0f
		*Copy_Pu8KeyValue=0xff;
    3086:	eb a9       	ldd	r30, Y+51	; 0x33
    3088:	fc a9       	ldd	r31, Y+52	; 0x34
    308a:	8f ef       	ldi	r24, 0xFF	; 255
    308c:	80 83       	st	Z, r24
    308e:	3d c1       	rjmp	.+634    	; 0x330a <Keypad_enuGetPressedKey+0x2ec>
		for(;Local_u8ColIter< Col_Num ;Local_u8ColIter++){

			DIO_enuSetPinValue(Local_u8ColGRB[Local_u8ColIter],Local_u8ColPIN[Local_u8ColIter],DIO_u8LOW);
    3090:	8f 85       	ldd	r24, Y+15	; 0x0f
    3092:	28 2f       	mov	r18, r24
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	ce 01       	movw	r24, r28
    3098:	43 96       	adiw	r24, 0x13	; 19
    309a:	fc 01       	movw	r30, r24
    309c:	e2 0f       	add	r30, r18
    309e:	f3 1f       	adc	r31, r19
    30a0:	40 81       	ld	r20, Z
    30a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    30a4:	28 2f       	mov	r18, r24
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	ce 01       	movw	r24, r28
    30aa:	47 96       	adiw	r24, 0x17	; 23
    30ac:	fc 01       	movw	r30, r24
    30ae:	e2 0f       	add	r30, r18
    30b0:	f3 1f       	adc	r31, r19
    30b2:	90 81       	ld	r25, Z
    30b4:	84 2f       	mov	r24, r20
    30b6:	69 2f       	mov	r22, r25
    30b8:	40 e0       	ldi	r20, 0x00	; 0
    30ba:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>

			for(Local_u8RowIter=0;Local_u8RowIter<Row_Num;Local_u8RowIter++){
    30be:	18 8a       	std	Y+16, r1	; 0x10
    30c0:	05 c1       	rjmp	.+522    	; 0x32cc <Keypad_enuGetPressedKey+0x2ae>
				DIO_enuGetPinValue(Local_u8RowGRB[Local_u8RowIter],Local_u8RowPIN[Local_u8RowIter],&Local_u8RowValue);
    30c2:	88 89       	ldd	r24, Y+16	; 0x10
    30c4:	28 2f       	mov	r18, r24
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	ce 01       	movw	r24, r28
    30ca:	4b 96       	adiw	r24, 0x1b	; 27
    30cc:	fc 01       	movw	r30, r24
    30ce:	e2 0f       	add	r30, r18
    30d0:	f3 1f       	adc	r31, r19
    30d2:	40 81       	ld	r20, Z
    30d4:	88 89       	ldd	r24, Y+16	; 0x10
    30d6:	28 2f       	mov	r18, r24
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	ce 01       	movw	r24, r28
    30dc:	4f 96       	adiw	r24, 0x1f	; 31
    30de:	fc 01       	movw	r30, r24
    30e0:	e2 0f       	add	r30, r18
    30e2:	f3 1f       	adc	r31, r19
    30e4:	90 81       	ld	r25, Z
    30e6:	9e 01       	movw	r18, r28
    30e8:	2e 5e       	subi	r18, 0xEE	; 238
    30ea:	3f 4f       	sbci	r19, 0xFF	; 255
    30ec:	84 2f       	mov	r24, r20
    30ee:	69 2f       	mov	r22, r25
    30f0:	a9 01       	movw	r20, r18
    30f2:	0e 94 0c 10 	call	0x2018	; 0x2018 <DIO_enuGetPinValue>

				if(!Local_u8RowValue){
    30f6:	8a 89       	ldd	r24, Y+18	; 0x12
    30f8:	88 23       	and	r24, r24
    30fa:	09 f0       	breq	.+2      	; 0x30fe <Keypad_enuGetPressedKey+0xe0>
    30fc:	e4 c0       	rjmp	.+456    	; 0x32c6 <Keypad_enuGetPressedKey+0x2a8>
    30fe:	80 e0       	ldi	r24, 0x00	; 0
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	a0 e2       	ldi	r26, 0x20	; 32
    3104:	b1 e4       	ldi	r27, 0x41	; 65
    3106:	8b 87       	std	Y+11, r24	; 0x0b
    3108:	9c 87       	std	Y+12, r25	; 0x0c
    310a:	ad 87       	std	Y+13, r26	; 0x0d
    310c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    310e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3110:	7c 85       	ldd	r23, Y+12	; 0x0c
    3112:	8d 85       	ldd	r24, Y+13	; 0x0d
    3114:	9e 85       	ldd	r25, Y+14	; 0x0e
    3116:	20 e0       	ldi	r18, 0x00	; 0
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	4a e7       	ldi	r20, 0x7A	; 122
    311c:	55 e4       	ldi	r21, 0x45	; 69
    311e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3122:	dc 01       	movw	r26, r24
    3124:	cb 01       	movw	r24, r22
    3126:	8f 83       	std	Y+7, r24	; 0x07
    3128:	98 87       	std	Y+8, r25	; 0x08
    312a:	a9 87       	std	Y+9, r26	; 0x09
    312c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    312e:	6f 81       	ldd	r22, Y+7	; 0x07
    3130:	78 85       	ldd	r23, Y+8	; 0x08
    3132:	89 85       	ldd	r24, Y+9	; 0x09
    3134:	9a 85       	ldd	r25, Y+10	; 0x0a
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	40 e8       	ldi	r20, 0x80	; 128
    313c:	5f e3       	ldi	r21, 0x3F	; 63
    313e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3142:	88 23       	and	r24, r24
    3144:	2c f4       	brge	.+10     	; 0x3150 <Keypad_enuGetPressedKey+0x132>
		__ticks = 1;
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	9e 83       	std	Y+6, r25	; 0x06
    314c:	8d 83       	std	Y+5, r24	; 0x05
    314e:	3f c0       	rjmp	.+126    	; 0x31ce <Keypad_enuGetPressedKey+0x1b0>
	else if (__tmp > 65535)
    3150:	6f 81       	ldd	r22, Y+7	; 0x07
    3152:	78 85       	ldd	r23, Y+8	; 0x08
    3154:	89 85       	ldd	r24, Y+9	; 0x09
    3156:	9a 85       	ldd	r25, Y+10	; 0x0a
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	3f ef       	ldi	r19, 0xFF	; 255
    315c:	4f e7       	ldi	r20, 0x7F	; 127
    315e:	57 e4       	ldi	r21, 0x47	; 71
    3160:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3164:	18 16       	cp	r1, r24
    3166:	4c f5       	brge	.+82     	; 0x31ba <Keypad_enuGetPressedKey+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3168:	6b 85       	ldd	r22, Y+11	; 0x0b
    316a:	7c 85       	ldd	r23, Y+12	; 0x0c
    316c:	8d 85       	ldd	r24, Y+13	; 0x0d
    316e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	40 e2       	ldi	r20, 0x20	; 32
    3176:	51 e4       	ldi	r21, 0x41	; 65
    3178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	bc 01       	movw	r22, r24
    3182:	cd 01       	movw	r24, r26
    3184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3188:	dc 01       	movw	r26, r24
    318a:	cb 01       	movw	r24, r22
    318c:	9e 83       	std	Y+6, r25	; 0x06
    318e:	8d 83       	std	Y+5, r24	; 0x05
    3190:	0f c0       	rjmp	.+30     	; 0x31b0 <Keypad_enuGetPressedKey+0x192>
    3192:	80 e9       	ldi	r24, 0x90	; 144
    3194:	91 e0       	ldi	r25, 0x01	; 1
    3196:	9c 83       	std	Y+4, r25	; 0x04
    3198:	8b 83       	std	Y+3, r24	; 0x03
    319a:	8b 81       	ldd	r24, Y+3	; 0x03
    319c:	9c 81       	ldd	r25, Y+4	; 0x04
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	f1 f7       	brne	.-4      	; 0x319e <Keypad_enuGetPressedKey+0x180>
    31a2:	9c 83       	std	Y+4, r25	; 0x04
    31a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31a6:	8d 81       	ldd	r24, Y+5	; 0x05
    31a8:	9e 81       	ldd	r25, Y+6	; 0x06
    31aa:	01 97       	sbiw	r24, 0x01	; 1
    31ac:	9e 83       	std	Y+6, r25	; 0x06
    31ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31b0:	8d 81       	ldd	r24, Y+5	; 0x05
    31b2:	9e 81       	ldd	r25, Y+6	; 0x06
    31b4:	00 97       	sbiw	r24, 0x00	; 0
    31b6:	69 f7       	brne	.-38     	; 0x3192 <Keypad_enuGetPressedKey+0x174>
    31b8:	14 c0       	rjmp	.+40     	; 0x31e2 <Keypad_enuGetPressedKey+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ba:	6f 81       	ldd	r22, Y+7	; 0x07
    31bc:	78 85       	ldd	r23, Y+8	; 0x08
    31be:	89 85       	ldd	r24, Y+9	; 0x09
    31c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c6:	dc 01       	movw	r26, r24
    31c8:	cb 01       	movw	r24, r22
    31ca:	9e 83       	std	Y+6, r25	; 0x06
    31cc:	8d 83       	std	Y+5, r24	; 0x05
    31ce:	8d 81       	ldd	r24, Y+5	; 0x05
    31d0:	9e 81       	ldd	r25, Y+6	; 0x06
    31d2:	9a 83       	std	Y+2, r25	; 0x02
    31d4:	89 83       	std	Y+1, r24	; 0x01
    31d6:	89 81       	ldd	r24, Y+1	; 0x01
    31d8:	9a 81       	ldd	r25, Y+2	; 0x02
    31da:	01 97       	sbiw	r24, 0x01	; 1
    31dc:	f1 f7       	brne	.-4      	; 0x31da <Keypad_enuGetPressedKey+0x1bc>
    31de:	9a 83       	std	Y+2, r25	; 0x02
    31e0:	89 83       	std	Y+1, r24	; 0x01
					// for depouncing
					_delay_ms(10);
					DIO_enuGetPinValue(Local_u8RowGRB[Local_u8RowIter],Local_u8RowPIN[Local_u8RowIter],&Local_u8RowValue);
    31e2:	88 89       	ldd	r24, Y+16	; 0x10
    31e4:	28 2f       	mov	r18, r24
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	ce 01       	movw	r24, r28
    31ea:	4b 96       	adiw	r24, 0x1b	; 27
    31ec:	fc 01       	movw	r30, r24
    31ee:	e2 0f       	add	r30, r18
    31f0:	f3 1f       	adc	r31, r19
    31f2:	40 81       	ld	r20, Z
    31f4:	88 89       	ldd	r24, Y+16	; 0x10
    31f6:	28 2f       	mov	r18, r24
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	ce 01       	movw	r24, r28
    31fc:	4f 96       	adiw	r24, 0x1f	; 31
    31fe:	fc 01       	movw	r30, r24
    3200:	e2 0f       	add	r30, r18
    3202:	f3 1f       	adc	r31, r19
    3204:	90 81       	ld	r25, Z
    3206:	9e 01       	movw	r18, r28
    3208:	2e 5e       	subi	r18, 0xEE	; 238
    320a:	3f 4f       	sbci	r19, 0xFF	; 255
    320c:	84 2f       	mov	r24, r20
    320e:	69 2f       	mov	r22, r25
    3210:	a9 01       	movw	r20, r18
    3212:	0e 94 0c 10 	call	0x2018	; 0x2018 <DIO_enuGetPinValue>
					 if(!Local_u8RowValue){
    3216:	8a 89       	ldd	r24, Y+18	; 0x12
    3218:	88 23       	and	r24, r24
    321a:	09 f0       	breq	.+2      	; 0x321e <Keypad_enuGetPressedKey+0x200>
    321c:	54 c0       	rjmp	.+168    	; 0x32c6 <Keypad_enuGetPressedKey+0x2a8>
    321e:	1a c0       	rjmp	.+52     	; 0x3254 <Keypad_enuGetPressedKey+0x236>
						 while(!Local_u8RowValue){
							 DIO_enuGetPinValue(Local_u8RowGRB[Local_u8RowIter],Local_u8RowPIN[Local_u8RowIter],&Local_u8RowValue);
    3220:	88 89       	ldd	r24, Y+16	; 0x10
    3222:	28 2f       	mov	r18, r24
    3224:	30 e0       	ldi	r19, 0x00	; 0
    3226:	ce 01       	movw	r24, r28
    3228:	4b 96       	adiw	r24, 0x1b	; 27
    322a:	fc 01       	movw	r30, r24
    322c:	e2 0f       	add	r30, r18
    322e:	f3 1f       	adc	r31, r19
    3230:	40 81       	ld	r20, Z
    3232:	88 89       	ldd	r24, Y+16	; 0x10
    3234:	28 2f       	mov	r18, r24
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	ce 01       	movw	r24, r28
    323a:	4f 96       	adiw	r24, 0x1f	; 31
    323c:	fc 01       	movw	r30, r24
    323e:	e2 0f       	add	r30, r18
    3240:	f3 1f       	adc	r31, r19
    3242:	90 81       	ld	r25, Z
    3244:	9e 01       	movw	r18, r28
    3246:	2e 5e       	subi	r18, 0xEE	; 238
    3248:	3f 4f       	sbci	r19, 0xFF	; 255
    324a:	84 2f       	mov	r24, r20
    324c:	69 2f       	mov	r22, r25
    324e:	a9 01       	movw	r20, r18
    3250:	0e 94 0c 10 	call	0x2018	; 0x2018 <DIO_enuGetPinValue>
				if(!Local_u8RowValue){
					// for depouncing
					_delay_ms(10);
					DIO_enuGetPinValue(Local_u8RowGRB[Local_u8RowIter],Local_u8RowPIN[Local_u8RowIter],&Local_u8RowValue);
					 if(!Local_u8RowValue){
						 while(!Local_u8RowValue){
    3254:	8a 89       	ldd	r24, Y+18	; 0x12
    3256:	88 23       	and	r24, r24
    3258:	19 f3       	breq	.-58     	; 0x3220 <Keypad_enuGetPressedKey+0x202>
							 DIO_enuGetPinValue(Local_u8RowGRB[Local_u8RowIter],Local_u8RowPIN[Local_u8RowIter],&Local_u8RowValue);
						 }

						 //take action
						 u8 Local_Au8KeyValue[Row_Num][Col_Num]= Key_Values;
    325a:	ce 01       	movw	r24, r28
    325c:	83 96       	adiw	r24, 0x23	; 35
    325e:	9e ab       	std	Y+54, r25	; 0x36
    3260:	8d ab       	std	Y+53, r24	; 0x35
    3262:	e9 ef       	ldi	r30, 0xF9	; 249
    3264:	f0 e0       	ldi	r31, 0x00	; 0
    3266:	f8 af       	std	Y+56, r31	; 0x38
    3268:	ef ab       	std	Y+55, r30	; 0x37
    326a:	f0 e1       	ldi	r31, 0x10	; 16
    326c:	f9 af       	std	Y+57, r31	; 0x39
    326e:	ef a9       	ldd	r30, Y+55	; 0x37
    3270:	f8 ad       	ldd	r31, Y+56	; 0x38
    3272:	00 80       	ld	r0, Z
    3274:	8f a9       	ldd	r24, Y+55	; 0x37
    3276:	98 ad       	ldd	r25, Y+56	; 0x38
    3278:	01 96       	adiw	r24, 0x01	; 1
    327a:	98 af       	std	Y+56, r25	; 0x38
    327c:	8f ab       	std	Y+55, r24	; 0x37
    327e:	ed a9       	ldd	r30, Y+53	; 0x35
    3280:	fe a9       	ldd	r31, Y+54	; 0x36
    3282:	00 82       	st	Z, r0
    3284:	8d a9       	ldd	r24, Y+53	; 0x35
    3286:	9e a9       	ldd	r25, Y+54	; 0x36
    3288:	01 96       	adiw	r24, 0x01	; 1
    328a:	9e ab       	std	Y+54, r25	; 0x36
    328c:	8d ab       	std	Y+53, r24	; 0x35
    328e:	99 ad       	ldd	r25, Y+57	; 0x39
    3290:	91 50       	subi	r25, 0x01	; 1
    3292:	99 af       	std	Y+57, r25	; 0x39
    3294:	e9 ad       	ldd	r30, Y+57	; 0x39
    3296:	ee 23       	and	r30, r30
    3298:	51 f7       	brne	.-44     	; 0x326e <Keypad_enuGetPressedKey+0x250>
						 * Copy_Pu8KeyValue=Local_Au8KeyValue[Local_u8RowIter][Local_u8ColIter];
    329a:	88 89       	ldd	r24, Y+16	; 0x10
    329c:	28 2f       	mov	r18, r24
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    32a2:	48 2f       	mov	r20, r24
    32a4:	50 e0       	ldi	r21, 0x00	; 0
    32a6:	22 0f       	add	r18, r18
    32a8:	33 1f       	adc	r19, r19
    32aa:	22 0f       	add	r18, r18
    32ac:	33 1f       	adc	r19, r19
    32ae:	ce 01       	movw	r24, r28
    32b0:	01 96       	adiw	r24, 0x01	; 1
    32b2:	82 0f       	add	r24, r18
    32b4:	93 1f       	adc	r25, r19
    32b6:	84 0f       	add	r24, r20
    32b8:	95 1f       	adc	r25, r21
    32ba:	fc 01       	movw	r30, r24
    32bc:	b2 96       	adiw	r30, 0x22	; 34
    32be:	80 81       	ld	r24, Z
    32c0:	eb a9       	ldd	r30, Y+51	; 0x33
    32c2:	fc a9       	ldd	r31, Y+52	; 0x34
    32c4:	80 83       	st	Z, r24
		*Copy_Pu8KeyValue=0xff;
		for(;Local_u8ColIter< Col_Num ;Local_u8ColIter++){

			DIO_enuSetPinValue(Local_u8ColGRB[Local_u8ColIter],Local_u8ColPIN[Local_u8ColIter],DIO_u8LOW);

			for(Local_u8RowIter=0;Local_u8RowIter<Row_Num;Local_u8RowIter++){
    32c6:	88 89       	ldd	r24, Y+16	; 0x10
    32c8:	8f 5f       	subi	r24, 0xFF	; 255
    32ca:	88 8b       	std	Y+16, r24	; 0x10
    32cc:	88 89       	ldd	r24, Y+16	; 0x10
    32ce:	84 30       	cpi	r24, 0x04	; 4
    32d0:	08 f4       	brcc	.+2      	; 0x32d4 <Keypad_enuGetPressedKey+0x2b6>
    32d2:	f7 ce       	rjmp	.-530    	; 0x30c2 <Keypad_enuGetPressedKey+0xa4>

				}

			}

			DIO_enuSetPinValue(Local_u8ColGRB[Local_u8ColIter],Local_u8ColPIN[Local_u8ColIter],DIO_u8HIGH);
    32d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    32d6:	28 2f       	mov	r18, r24
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	ce 01       	movw	r24, r28
    32dc:	43 96       	adiw	r24, 0x13	; 19
    32de:	fc 01       	movw	r30, r24
    32e0:	e2 0f       	add	r30, r18
    32e2:	f3 1f       	adc	r31, r19
    32e4:	40 81       	ld	r20, Z
    32e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    32e8:	28 2f       	mov	r18, r24
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	ce 01       	movw	r24, r28
    32ee:	47 96       	adiw	r24, 0x17	; 23
    32f0:	fc 01       	movw	r30, r24
    32f2:	e2 0f       	add	r30, r18
    32f4:	f3 1f       	adc	r31, r19
    32f6:	90 81       	ld	r25, Z
    32f8:	84 2f       	mov	r24, r20
    32fa:	69 2f       	mov	r22, r25
    32fc:	41 e0       	ldi	r20, 0x01	; 1
    32fe:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
			Local_enuErrorState=ES_OK;
    3302:	19 8a       	std	Y+17, r1	; 0x11

		u8 Local_u8RowGRB[]={R1_GRB,R2_GRB,R3_GRB,R4_GRB};
		u8 Local_u8RowPIN[]={R1_PIN,R2_PIN,R3_PIN,R4_PIN};
		u8 Local_u8ColIter=0;
		*Copy_Pu8KeyValue=0xff;
		for(;Local_u8ColIter< Col_Num ;Local_u8ColIter++){
    3304:	8f 85       	ldd	r24, Y+15	; 0x0f
    3306:	8f 5f       	subi	r24, 0xFF	; 255
    3308:	8f 87       	std	Y+15, r24	; 0x0f
    330a:	8f 85       	ldd	r24, Y+15	; 0x0f
    330c:	84 30       	cpi	r24, 0x04	; 4
    330e:	08 f4       	brcc	.+2      	; 0x3312 <Keypad_enuGetPressedKey+0x2f4>
    3310:	bf ce       	rjmp	.-642    	; 0x3090 <Keypad_enuGetPressedKey+0x72>
    3312:	02 c0       	rjmp	.+4      	; 0x3318 <Keypad_enuGetPressedKey+0x2fa>
			DIO_enuSetPinValue(Local_u8ColGRB[Local_u8ColIter],Local_u8ColPIN[Local_u8ColIter],DIO_u8HIGH);
			Local_enuErrorState=ES_OK;
		}
	}
	else{
		Local_enuErrorState=ES_NULL_POINTER;
    3314:	83 e0       	ldi	r24, 0x03	; 3
    3316:	89 8b       	std	Y+17, r24	; 0x11
	}



	return Local_enuErrorState;
    3318:	89 89       	ldd	r24, Y+17	; 0x11
}
    331a:	e9 96       	adiw	r28, 0x39	; 57
    331c:	0f b6       	in	r0, 0x3f	; 63
    331e:	f8 94       	cli
    3320:	de bf       	out	0x3e, r29	; 62
    3322:	0f be       	out	0x3f, r0	; 63
    3324:	cd bf       	out	0x3d, r28	; 61
    3326:	cf 91       	pop	r28
    3328:	df 91       	pop	r29
    332a:	08 95       	ret

0000332c <DCMOTOR_enuInit>:
#include "../../MCAL/PWM0/PWM_Int.h"

#include"DCMOTOR_Config.h"
#include"DCMOTOR_Priv.h"

ES_t DCMOTOR_enuInit(void){
    332c:	df 93       	push	r29
    332e:	cf 93       	push	r28
    3330:	0f 92       	push	r0
    3332:	cd b7       	in	r28, 0x3d	; 61
    3334:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState =ES_NOK;
    3336:	81 e0       	ldi	r24, 0x01	; 1
    3338:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuSetPinDirection(Motor1_1GRP,Motor1_1PIN,DIO_u8OUTPUT);
    333a:	81 e0       	ldi	r24, 0x01	; 1
    333c:	64 e0       	ldi	r22, 0x04	; 4
    333e:	41 e0       	ldi	r20, 0x01	; 1
    3340:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(Motor1_2GRP,Motor1_2PIN,DIO_u8OUTPUT);
    3344:	81 e0       	ldi	r24, 0x01	; 1
    3346:	65 e0       	ldi	r22, 0x05	; 5
    3348:	41 e0       	ldi	r20, 0x01	; 1
    334a:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(Motor2_3GRP,Motor2_3PIN,DIO_u8OUTPUT);
    334e:	81 e0       	ldi	r24, 0x01	; 1
    3350:	66 e0       	ldi	r22, 0x06	; 6
    3352:	41 e0       	ldi	r20, 0x01	; 1
    3354:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(Motor2_4GRP,Motor2_4PIN,DIO_u8OUTPUT);
    3358:	81 e0       	ldi	r24, 0x01	; 1
    335a:	67 e0       	ldi	r22, 0x07	; 7
    335c:	41 e0       	ldi	r20, 0x01	; 1
    335e:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <DIO_enuSetPinDirection>

	PWM0_enuInit();
    3362:	0e 94 ab 08 	call	0x1156	; 0x1156 <PWM0_enuInit>

	return Local_enuErrorState ;
    3366:	89 81       	ldd	r24, Y+1	; 0x01
}
    3368:	0f 90       	pop	r0
    336a:	cf 91       	pop	r28
    336c:	df 91       	pop	r29
    336e:	08 95       	ret

00003370 <DCMOTOR_enuSetDirectionAndMotorNum>:

ES_t DCMOTOR_enuSetDirectionAndMotorNum(u16 Copy_u8Direction,u8 Copy_u8MotorNumber){
    3370:	df 93       	push	r29
    3372:	cf 93       	push	r28
    3374:	cd b7       	in	r28, 0x3d	; 61
    3376:	de b7       	in	r29, 0x3e	; 62
    3378:	2a 97       	sbiw	r28, 0x0a	; 10
    337a:	0f b6       	in	r0, 0x3f	; 63
    337c:	f8 94       	cli
    337e:	de bf       	out	0x3e, r29	; 62
    3380:	0f be       	out	0x3f, r0	; 63
    3382:	cd bf       	out	0x3d, r28	; 61
    3384:	9b 83       	std	Y+3, r25	; 0x03
    3386:	8a 83       	std	Y+2, r24	; 0x02
    3388:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState =ES_NOK;
    338a:	81 e0       	ldi	r24, 0x01	; 1
    338c:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8MotorNumber){
    338e:	8c 81       	ldd	r24, Y+4	; 0x04
    3390:	28 2f       	mov	r18, r24
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	3e 83       	std	Y+6, r19	; 0x06
    3396:	2d 83       	std	Y+5, r18	; 0x05
    3398:	8d 81       	ldd	r24, Y+5	; 0x05
    339a:	9e 81       	ldd	r25, Y+6	; 0x06
    339c:	00 97       	sbiw	r24, 0x00	; 0
    339e:	31 f0       	breq	.+12     	; 0x33ac <DCMOTOR_enuSetDirectionAndMotorNum+0x3c>
    33a0:	2d 81       	ldd	r18, Y+5	; 0x05
    33a2:	3e 81       	ldd	r19, Y+6	; 0x06
    33a4:	21 30       	cpi	r18, 0x01	; 1
    33a6:	31 05       	cpc	r19, r1
    33a8:	b1 f1       	breq	.+108    	; 0x3416 <DCMOTOR_enuSetDirectionAndMotorNum+0xa6>
    33aa:	69 c0       	rjmp	.+210    	; 0x347e <DCMOTOR_enuSetDirectionAndMotorNum+0x10e>
		case A :			//MOTOR A

			switch(Copy_u8Direction){
    33ac:	8a 81       	ldd	r24, Y+2	; 0x02
    33ae:	9b 81       	ldd	r25, Y+3	; 0x03
    33b0:	98 87       	std	Y+8, r25	; 0x08
    33b2:	8f 83       	std	Y+7, r24	; 0x07
    33b4:	2f 81       	ldd	r18, Y+7	; 0x07
    33b6:	38 85       	ldd	r19, Y+8	; 0x08
    33b8:	25 32       	cpi	r18, 0x25	; 37
    33ba:	31 05       	cpc	r19, r1
    33bc:	59 f0       	breq	.+22     	; 0x33d4 <DCMOTOR_enuSetDirectionAndMotorNum+0x64>
    33be:	8f 81       	ldd	r24, Y+7	; 0x07
    33c0:	98 85       	ldd	r25, Y+8	; 0x08
    33c2:	8f 32       	cpi	r24, 0x2F	; 47
    33c4:	91 05       	cpc	r25, r1
    33c6:	89 f0       	breq	.+34     	; 0x33ea <DCMOTOR_enuSetDirectionAndMotorNum+0x7a>
    33c8:	2f 81       	ldd	r18, Y+7	; 0x07
    33ca:	38 85       	ldd	r19, Y+8	; 0x08
    33cc:	24 30       	cpi	r18, 0x04	; 4
    33ce:	31 05       	cpc	r19, r1
    33d0:	b9 f0       	breq	.+46     	; 0x3400 <DCMOTOR_enuSetDirectionAndMotorNum+0x90>
    33d2:	55 c0       	rjmp	.+170    	; 0x347e <DCMOTOR_enuSetDirectionAndMotorNum+0x10e>
				case CLW :
					DIO_enuSetPinValue(Motor1_1GRP,Motor1_1PIN,DIO_u8HIGH);
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	64 e0       	ldi	r22, 0x04	; 4
    33d8:	41 e0       	ldi	r20, 0x01	; 1
    33da:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
					DIO_enuSetPinValue(Motor1_2GRP,Motor1_2PIN,DIO_u8LOW);
    33de:	81 e0       	ldi	r24, 0x01	; 1
    33e0:	65 e0       	ldi	r22, 0x05	; 5
    33e2:	40 e0       	ldi	r20, 0x00	; 0
    33e4:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
    33e8:	4a c0       	rjmp	.+148    	; 0x347e <DCMOTOR_enuSetDirectionAndMotorNum+0x10e>
					break;

				case ACLW:
					DIO_enuSetPinValue(Motor1_1GRP,Motor1_1PIN,DIO_u8LOW);
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	64 e0       	ldi	r22, 0x04	; 4
    33ee:	40 e0       	ldi	r20, 0x00	; 0
    33f0:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
					DIO_enuSetPinValue(Motor1_2GRP,Motor1_2PIN,DIO_u8HIGH);
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	65 e0       	ldi	r22, 0x05	; 5
    33f8:	41 e0       	ldi	r20, 0x01	; 1
    33fa:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
    33fe:	3f c0       	rjmp	.+126    	; 0x347e <DCMOTOR_enuSetDirectionAndMotorNum+0x10e>
					break;
				case STOP :
					DIO_enuSetPinValue(Motor1_1GRP,Motor1_1PIN,DIO_u8LOW);
    3400:	81 e0       	ldi	r24, 0x01	; 1
    3402:	64 e0       	ldi	r22, 0x04	; 4
    3404:	40 e0       	ldi	r20, 0x00	; 0
    3406:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
					DIO_enuSetPinValue(Motor1_2GRP,Motor1_2PIN,DIO_u8LOW);
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	65 e0       	ldi	r22, 0x05	; 5
    340e:	40 e0       	ldi	r20, 0x00	; 0
    3410:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
    3414:	34 c0       	rjmp	.+104    	; 0x347e <DCMOTOR_enuSetDirectionAndMotorNum+0x10e>
				default:
					break;
			}
			break;
		case B:					//MOTOR B
			switch(Copy_u8Direction){
    3416:	8a 81       	ldd	r24, Y+2	; 0x02
    3418:	9b 81       	ldd	r25, Y+3	; 0x03
    341a:	9a 87       	std	Y+10, r25	; 0x0a
    341c:	89 87       	std	Y+9, r24	; 0x09
    341e:	29 85       	ldd	r18, Y+9	; 0x09
    3420:	3a 85       	ldd	r19, Y+10	; 0x0a
    3422:	25 32       	cpi	r18, 0x25	; 37
    3424:	31 05       	cpc	r19, r1
    3426:	59 f0       	breq	.+22     	; 0x343e <DCMOTOR_enuSetDirectionAndMotorNum+0xce>
    3428:	89 85       	ldd	r24, Y+9	; 0x09
    342a:	9a 85       	ldd	r25, Y+10	; 0x0a
    342c:	8f 32       	cpi	r24, 0x2F	; 47
    342e:	91 05       	cpc	r25, r1
    3430:	89 f0       	breq	.+34     	; 0x3454 <DCMOTOR_enuSetDirectionAndMotorNum+0xe4>
    3432:	29 85       	ldd	r18, Y+9	; 0x09
    3434:	3a 85       	ldd	r19, Y+10	; 0x0a
    3436:	24 30       	cpi	r18, 0x04	; 4
    3438:	31 05       	cpc	r19, r1
    343a:	b9 f0       	breq	.+46     	; 0x346a <DCMOTOR_enuSetDirectionAndMotorNum+0xfa>
    343c:	20 c0       	rjmp	.+64     	; 0x347e <DCMOTOR_enuSetDirectionAndMotorNum+0x10e>
				case CLW :
					DIO_enuSetPinValue(Motor2_3GRP,Motor2_3PIN,DIO_u8HIGH);
    343e:	81 e0       	ldi	r24, 0x01	; 1
    3440:	66 e0       	ldi	r22, 0x06	; 6
    3442:	41 e0       	ldi	r20, 0x01	; 1
    3444:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
					DIO_enuSetPinValue(Motor2_4GRP,Motor2_4PIN,DIO_u8LOW);
    3448:	81 e0       	ldi	r24, 0x01	; 1
    344a:	67 e0       	ldi	r22, 0x07	; 7
    344c:	40 e0       	ldi	r20, 0x00	; 0
    344e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
    3452:	15 c0       	rjmp	.+42     	; 0x347e <DCMOTOR_enuSetDirectionAndMotorNum+0x10e>
					break;

				case ACLW:
					DIO_enuSetPinValue(Motor2_3GRP,Motor2_3PIN,DIO_u8LOW);
    3454:	81 e0       	ldi	r24, 0x01	; 1
    3456:	66 e0       	ldi	r22, 0x06	; 6
    3458:	40 e0       	ldi	r20, 0x00	; 0
    345a:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
					DIO_enuSetPinValue(Motor2_4GRP,Motor2_4PIN,DIO_u8HIGH);
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	67 e0       	ldi	r22, 0x07	; 7
    3462:	41 e0       	ldi	r20, 0x01	; 1
    3464:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
    3468:	0a c0       	rjmp	.+20     	; 0x347e <DCMOTOR_enuSetDirectionAndMotorNum+0x10e>
					break;
				case STOP:
					DIO_enuSetPinValue(Motor2_3GRP,Motor2_3PIN,DIO_u8LOW);
    346a:	81 e0       	ldi	r24, 0x01	; 1
    346c:	66 e0       	ldi	r22, 0x06	; 6
    346e:	40 e0       	ldi	r20, 0x00	; 0
    3470:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
					DIO_enuSetPinValue(Motor2_4GRP,Motor2_4PIN,DIO_u8LOW);
    3474:	81 e0       	ldi	r24, 0x01	; 1
    3476:	67 e0       	ldi	r22, 0x07	; 7
    3478:	40 e0       	ldi	r20, 0x00	; 0
    347a:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <DIO_enuSetPinValue>
				break;

	}


	Local_enuErrorState =ES_OK;
    347e:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState ;
    3480:	89 81       	ldd	r24, Y+1	; 0x01
}
    3482:	2a 96       	adiw	r28, 0x0a	; 10
    3484:	0f b6       	in	r0, 0x3f	; 63
    3486:	f8 94       	cli
    3488:	de bf       	out	0x3e, r29	; 62
    348a:	0f be       	out	0x3f, r0	; 63
    348c:	cd bf       	out	0x3d, r28	; 61
    348e:	cf 91       	pop	r28
    3490:	df 91       	pop	r29
    3492:	08 95       	ret

00003494 <DCMOTOR_enuSetSpeed>:
ES_t DCMOTOR_enuSetSpeed(u8 Copy_u8Speed){
    3494:	df 93       	push	r29
    3496:	cf 93       	push	r28
    3498:	00 d0       	rcall	.+0      	; 0x349a <DCMOTOR_enuSetSpeed+0x6>
    349a:	cd b7       	in	r28, 0x3d	; 61
    349c:	de b7       	in	r29, 0x3e	; 62
    349e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState =ES_NOK;
    34a0:	81 e0       	ldi	r24, 0x01	; 1
    34a2:	89 83       	std	Y+1, r24	; 0x01
	PWM0_enuSetDutyCycle(Copy_u8Speed);
    34a4:	8a 81       	ldd	r24, Y+2	; 0x02
    34a6:	0e 94 da 08 	call	0x11b4	; 0x11b4 <PWM0_enuSetDutyCycle>
	return Local_enuErrorState ;
    34aa:	89 81       	ldd	r24, Y+1	; 0x01

}
    34ac:	0f 90       	pop	r0
    34ae:	0f 90       	pop	r0
    34b0:	cf 91       	pop	r28
    34b2:	df 91       	pop	r29
    34b4:	08 95       	ret

000034b6 <DCMOTOR_Start>:

ES_t DCMOTOR_Start(void){
    34b6:	df 93       	push	r29
    34b8:	cf 93       	push	r28
    34ba:	0f 92       	push	r0
    34bc:	cd b7       	in	r28, 0x3d	; 61
    34be:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState =ES_NOK;
    34c0:	81 e0       	ldi	r24, 0x01	; 1
    34c2:	89 83       	std	Y+1, r24	; 0x01
	PWM0_Start();
    34c4:	0e 94 0a 09 	call	0x1214	; 0x1214 <PWM0_Start>
	return Local_enuErrorState ;
    34c8:	89 81       	ldd	r24, Y+1	; 0x01

}
    34ca:	0f 90       	pop	r0
    34cc:	cf 91       	pop	r28
    34ce:	df 91       	pop	r29
    34d0:	08 95       	ret

000034d2 <DCMOTOR_Stop>:

ES_t DCMOTOR_Stop(void){
    34d2:	df 93       	push	r29
    34d4:	cf 93       	push	r28
    34d6:	0f 92       	push	r0
    34d8:	cd b7       	in	r28, 0x3d	; 61
    34da:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState =ES_NOK;
    34dc:	81 e0       	ldi	r24, 0x01	; 1
    34de:	89 83       	std	Y+1, r24	; 0x01
	PWM0_Stop();
    34e0:	0e 94 1e 09 	call	0x123c	; 0x123c <PWM0_Stop>
	return Local_enuErrorState ;
    34e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    34e6:	0f 90       	pop	r0
    34e8:	cf 91       	pop	r28
    34ea:	df 91       	pop	r29
    34ec:	08 95       	ret

000034ee <main>:



//************************************************************************Slave***********************************************************************

int main(void){
    34ee:	df 93       	push	r29
    34f0:	cf 93       	push	r28
    34f2:	cd b7       	in	r28, 0x3d	; 61
    34f4:	de b7       	in	r29, 0x3e	; 62
    34f6:	60 97       	sbiw	r28, 0x10	; 16
    34f8:	0f b6       	in	r0, 0x3f	; 63
    34fa:	f8 94       	cli
    34fc:	de bf       	out	0x3e, r29	; 62
    34fe:	0f be       	out	0x3f, r0	; 63
    3500:	cd bf       	out	0x3d, r28	; 61

	DIO_enuInit();
    3502:	0e 94 b9 0c 	call	0x1972	; 0x1972 <DIO_enuInit>
	DCMOTOR_enuInit();
    3506:	0e 94 96 19 	call	0x332c	; 0x332c <DCMOTOR_enuInit>
	UART_enuInit();
    350a:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_enuInit>
	LCD_enuInit();
    350e:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <LCD_enuInit>

	DIO_enuSetPinDirection(DIO_u8GROUP_D,DIO_u8PIN0,DIO_u8INPUT); 		// SET RX AS INPUT
    3512:	83 e0       	ldi	r24, 0x03	; 3
    3514:	60 e0       	ldi	r22, 0x00	; 0
    3516:	40 e0       	ldi	r20, 0x00	; 0
    3518:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <DIO_enuSetPinDirection>


	DCMOTOR_Start();
    351c:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <DCMOTOR_Start>
    3520:	80 e0       	ldi	r24, 0x00	; 0
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	aa ef       	ldi	r26, 0xFA	; 250
    3526:	b3 e4       	ldi	r27, 0x43	; 67
    3528:	8b 87       	std	Y+11, r24	; 0x0b
    352a:	9c 87       	std	Y+12, r25	; 0x0c
    352c:	ad 87       	std	Y+13, r26	; 0x0d
    352e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3530:	6b 85       	ldd	r22, Y+11	; 0x0b
    3532:	7c 85       	ldd	r23, Y+12	; 0x0c
    3534:	8d 85       	ldd	r24, Y+13	; 0x0d
    3536:	9e 85       	ldd	r25, Y+14	; 0x0e
    3538:	20 e0       	ldi	r18, 0x00	; 0
    353a:	30 e0       	ldi	r19, 0x00	; 0
    353c:	4a e7       	ldi	r20, 0x7A	; 122
    353e:	55 e4       	ldi	r21, 0x45	; 69
    3540:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3544:	dc 01       	movw	r26, r24
    3546:	cb 01       	movw	r24, r22
    3548:	8f 83       	std	Y+7, r24	; 0x07
    354a:	98 87       	std	Y+8, r25	; 0x08
    354c:	a9 87       	std	Y+9, r26	; 0x09
    354e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3550:	6f 81       	ldd	r22, Y+7	; 0x07
    3552:	78 85       	ldd	r23, Y+8	; 0x08
    3554:	89 85       	ldd	r24, Y+9	; 0x09
    3556:	9a 85       	ldd	r25, Y+10	; 0x0a
    3558:	20 e0       	ldi	r18, 0x00	; 0
    355a:	30 e0       	ldi	r19, 0x00	; 0
    355c:	40 e8       	ldi	r20, 0x80	; 128
    355e:	5f e3       	ldi	r21, 0x3F	; 63
    3560:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3564:	88 23       	and	r24, r24
    3566:	2c f4       	brge	.+10     	; 0x3572 <main+0x84>
		__ticks = 1;
    3568:	81 e0       	ldi	r24, 0x01	; 1
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	9e 83       	std	Y+6, r25	; 0x06
    356e:	8d 83       	std	Y+5, r24	; 0x05
    3570:	3f c0       	rjmp	.+126    	; 0x35f0 <main+0x102>
	else if (__tmp > 65535)
    3572:	6f 81       	ldd	r22, Y+7	; 0x07
    3574:	78 85       	ldd	r23, Y+8	; 0x08
    3576:	89 85       	ldd	r24, Y+9	; 0x09
    3578:	9a 85       	ldd	r25, Y+10	; 0x0a
    357a:	20 e0       	ldi	r18, 0x00	; 0
    357c:	3f ef       	ldi	r19, 0xFF	; 255
    357e:	4f e7       	ldi	r20, 0x7F	; 127
    3580:	57 e4       	ldi	r21, 0x47	; 71
    3582:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3586:	18 16       	cp	r1, r24
    3588:	4c f5       	brge	.+82     	; 0x35dc <main+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    358a:	6b 85       	ldd	r22, Y+11	; 0x0b
    358c:	7c 85       	ldd	r23, Y+12	; 0x0c
    358e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3590:	9e 85       	ldd	r25, Y+14	; 0x0e
    3592:	20 e0       	ldi	r18, 0x00	; 0
    3594:	30 e0       	ldi	r19, 0x00	; 0
    3596:	40 e2       	ldi	r20, 0x20	; 32
    3598:	51 e4       	ldi	r21, 0x41	; 65
    359a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    359e:	dc 01       	movw	r26, r24
    35a0:	cb 01       	movw	r24, r22
    35a2:	bc 01       	movw	r22, r24
    35a4:	cd 01       	movw	r24, r26
    35a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35aa:	dc 01       	movw	r26, r24
    35ac:	cb 01       	movw	r24, r22
    35ae:	9e 83       	std	Y+6, r25	; 0x06
    35b0:	8d 83       	std	Y+5, r24	; 0x05
    35b2:	0f c0       	rjmp	.+30     	; 0x35d2 <main+0xe4>
    35b4:	80 e9       	ldi	r24, 0x90	; 144
    35b6:	91 e0       	ldi	r25, 0x01	; 1
    35b8:	9c 83       	std	Y+4, r25	; 0x04
    35ba:	8b 83       	std	Y+3, r24	; 0x03
    35bc:	8b 81       	ldd	r24, Y+3	; 0x03
    35be:	9c 81       	ldd	r25, Y+4	; 0x04
    35c0:	01 97       	sbiw	r24, 0x01	; 1
    35c2:	f1 f7       	brne	.-4      	; 0x35c0 <main+0xd2>
    35c4:	9c 83       	std	Y+4, r25	; 0x04
    35c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35c8:	8d 81       	ldd	r24, Y+5	; 0x05
    35ca:	9e 81       	ldd	r25, Y+6	; 0x06
    35cc:	01 97       	sbiw	r24, 0x01	; 1
    35ce:	9e 83       	std	Y+6, r25	; 0x06
    35d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35d2:	8d 81       	ldd	r24, Y+5	; 0x05
    35d4:	9e 81       	ldd	r25, Y+6	; 0x06
    35d6:	00 97       	sbiw	r24, 0x00	; 0
    35d8:	69 f7       	brne	.-38     	; 0x35b4 <main+0xc6>
    35da:	14 c0       	rjmp	.+40     	; 0x3604 <main+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35dc:	6f 81       	ldd	r22, Y+7	; 0x07
    35de:	78 85       	ldd	r23, Y+8	; 0x08
    35e0:	89 85       	ldd	r24, Y+9	; 0x09
    35e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e8:	dc 01       	movw	r26, r24
    35ea:	cb 01       	movw	r24, r22
    35ec:	9e 83       	std	Y+6, r25	; 0x06
    35ee:	8d 83       	std	Y+5, r24	; 0x05
    35f0:	8d 81       	ldd	r24, Y+5	; 0x05
    35f2:	9e 81       	ldd	r25, Y+6	; 0x06
    35f4:	9a 83       	std	Y+2, r25	; 0x02
    35f6:	89 83       	std	Y+1, r24	; 0x01
    35f8:	89 81       	ldd	r24, Y+1	; 0x01
    35fa:	9a 81       	ldd	r25, Y+2	; 0x02
    35fc:	01 97       	sbiw	r24, 0x01	; 1
    35fe:	f1 f7       	brne	.-4      	; 0x35fc <main+0x10e>
    3600:	9a 83       	std	Y+2, r25	; 0x02
    3602:	89 83       	std	Y+1, r24	; 0x01
	while (1)
	{

		_delay_ms(500);

		DCMOTOR_Start();
    3604:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <DCMOTOR_Start>
		UART_enuRecieveString(&data);
    3608:	ce 01       	movw	r24, r28
    360a:	0f 96       	adiw	r24, 0x0f	; 15
    360c:	0e 94 51 06 	call	0xca2	; 0xca2 <UART_enuRecieveString>



		if(strcmp(data , "NB")==0){
    3610:	ce 01       	movw	r24, r28
    3612:	0f 96       	adiw	r24, 0x0f	; 15
    3614:	20 e6       	ldi	r18, 0x60	; 96
    3616:	30 e0       	ldi	r19, 0x00	; 0
    3618:	b9 01       	movw	r22, r18
    361a:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <strcmp>
    361e:	00 97       	sbiw	r24, 0x00	; 0
    3620:	d9 f4       	brne	.+54     	; 0x3658 <main+0x16a>

			LCD_enuSendCommand(0X01);
    3622:	81 e0       	ldi	r24, 0x01	; 1
    3624:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_enuSendCommand>
			DCMOTOR_enuSetSpeed(65);
    3628:	81 e4       	ldi	r24, 0x41	; 65
    362a:	0e 94 4a 1a 	call	0x3494	; 0x3494 <DCMOTOR_enuSetSpeed>
			DCMOTOR_enuSetDirectionAndMotorNum(CLW,A);
    362e:	85 e2       	ldi	r24, 0x25	; 37
    3630:	60 e0       	ldi	r22, 0x00	; 0
    3632:	0e 94 b8 19 	call	0x3370	; 0x3370 <DCMOTOR_enuSetDirectionAndMotorNum>
			DCMOTOR_enuSetDirectionAndMotorNum(CLW,B);
    3636:	85 e2       	ldi	r24, 0x25	; 37
    3638:	61 e0       	ldi	r22, 0x01	; 1
    363a:	0e 94 b8 19 	call	0x3370	; 0x3370 <DCMOTOR_enuSetDirectionAndMotorNum>
			LCD_enuSendString("Direction: Back");
    363e:	83 e6       	ldi	r24, 0x63	; 99
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <LCD_enuSendString>
			LCD_enuGoToPosition(1,0);
    3646:	81 e0       	ldi	r24, 0x01	; 1
    3648:	60 e0       	ldi	r22, 0x00	; 0
    364a:	0e 94 0d 14 	call	0x281a	; 0x281a <LCD_enuGoToPosition>
			LCD_enuSendString("Speed : Normal");
    364e:	83 e7       	ldi	r24, 0x73	; 115
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <LCD_enuSendString>
    3656:	64 cf       	rjmp	.-312    	; 0x3520 <main+0x32>

		}

		else if(strcmp(data , "NF")==0){
    3658:	ce 01       	movw	r24, r28
    365a:	0f 96       	adiw	r24, 0x0f	; 15
    365c:	22 e8       	ldi	r18, 0x82	; 130
    365e:	30 e0       	ldi	r19, 0x00	; 0
    3660:	b9 01       	movw	r22, r18
    3662:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <strcmp>
    3666:	00 97       	sbiw	r24, 0x00	; 0
    3668:	d9 f4       	brne	.+54     	; 0x36a0 <main+0x1b2>

			LCD_enuSendCommand(0X01);
    366a:	81 e0       	ldi	r24, 0x01	; 1
    366c:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_enuSendCommand>
			DCMOTOR_enuSetSpeed(65);
    3670:	81 e4       	ldi	r24, 0x41	; 65
    3672:	0e 94 4a 1a 	call	0x3494	; 0x3494 <DCMOTOR_enuSetSpeed>
			DCMOTOR_enuSetDirectionAndMotorNum(ACLW,A);
    3676:	8f e2       	ldi	r24, 0x2F	; 47
    3678:	60 e0       	ldi	r22, 0x00	; 0
    367a:	0e 94 b8 19 	call	0x3370	; 0x3370 <DCMOTOR_enuSetDirectionAndMotorNum>
			DCMOTOR_enuSetDirectionAndMotorNum(ACLW,B);
    367e:	8f e2       	ldi	r24, 0x2F	; 47
    3680:	61 e0       	ldi	r22, 0x01	; 1
    3682:	0e 94 b8 19 	call	0x3370	; 0x3370 <DCMOTOR_enuSetDirectionAndMotorNum>
			LCD_enuSendString("Direction: UP");
    3686:	85 e8       	ldi	r24, 0x85	; 133
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <LCD_enuSendString>
			LCD_enuGoToPosition(1,0);
    368e:	81 e0       	ldi	r24, 0x01	; 1
    3690:	60 e0       	ldi	r22, 0x00	; 0
    3692:	0e 94 0d 14 	call	0x281a	; 0x281a <LCD_enuGoToPosition>
			LCD_enuSendString("Speed : Normal");
    3696:	83 e7       	ldi	r24, 0x73	; 115
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <LCD_enuSendString>
    369e:	40 cf       	rjmp	.-384    	; 0x3520 <main+0x32>
		}
		else if(strcmp(data , "NR")==0){
    36a0:	ce 01       	movw	r24, r28
    36a2:	0f 96       	adiw	r24, 0x0f	; 15
    36a4:	23 e9       	ldi	r18, 0x93	; 147
    36a6:	30 e0       	ldi	r19, 0x00	; 0
    36a8:	b9 01       	movw	r22, r18
    36aa:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <strcmp>
    36ae:	00 97       	sbiw	r24, 0x00	; 0
    36b0:	d9 f4       	brne	.+54     	; 0x36e8 <main+0x1fa>

			LCD_enuSendCommand(0X01);
    36b2:	81 e0       	ldi	r24, 0x01	; 1
    36b4:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_enuSendCommand>
			DCMOTOR_enuSetSpeed(65);
    36b8:	81 e4       	ldi	r24, 0x41	; 65
    36ba:	0e 94 4a 1a 	call	0x3494	; 0x3494 <DCMOTOR_enuSetSpeed>
			DCMOTOR_enuSetDirectionAndMotorNum(ACLW,A);
    36be:	8f e2       	ldi	r24, 0x2F	; 47
    36c0:	60 e0       	ldi	r22, 0x00	; 0
    36c2:	0e 94 b8 19 	call	0x3370	; 0x3370 <DCMOTOR_enuSetDirectionAndMotorNum>
			DCMOTOR_enuSetDirectionAndMotorNum(CLW,B);
    36c6:	85 e2       	ldi	r24, 0x25	; 37
    36c8:	61 e0       	ldi	r22, 0x01	; 1
    36ca:	0e 94 b8 19 	call	0x3370	; 0x3370 <DCMOTOR_enuSetDirectionAndMotorNum>
			LCD_enuSendString("Direction: Right");
    36ce:	86 e9       	ldi	r24, 0x96	; 150
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <LCD_enuSendString>
			LCD_enuGoToPosition(1,0);
    36d6:	81 e0       	ldi	r24, 0x01	; 1
    36d8:	60 e0       	ldi	r22, 0x00	; 0
    36da:	0e 94 0d 14 	call	0x281a	; 0x281a <LCD_enuGoToPosition>
			LCD_enuSendString("Speed : Normal");
    36de:	83 e7       	ldi	r24, 0x73	; 115
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <LCD_enuSendString>
    36e6:	1c cf       	rjmp	.-456    	; 0x3520 <main+0x32>
		}
		else if(strcmp(data , "NL")==0){
    36e8:	ce 01       	movw	r24, r28
    36ea:	0f 96       	adiw	r24, 0x0f	; 15
    36ec:	27 ea       	ldi	r18, 0xA7	; 167
    36ee:	30 e0       	ldi	r19, 0x00	; 0
    36f0:	b9 01       	movw	r22, r18
    36f2:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <strcmp>
    36f6:	00 97       	sbiw	r24, 0x00	; 0
    36f8:	d9 f4       	brne	.+54     	; 0x3730 <main+0x242>

			LCD_enuSendCommand(0X01);
    36fa:	81 e0       	ldi	r24, 0x01	; 1
    36fc:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_enuSendCommand>
			DCMOTOR_enuSetSpeed(65);
    3700:	81 e4       	ldi	r24, 0x41	; 65
    3702:	0e 94 4a 1a 	call	0x3494	; 0x3494 <DCMOTOR_enuSetSpeed>
			DCMOTOR_enuSetDirectionAndMotorNum(CLW,A);
    3706:	85 e2       	ldi	r24, 0x25	; 37
    3708:	60 e0       	ldi	r22, 0x00	; 0
    370a:	0e 94 b8 19 	call	0x3370	; 0x3370 <DCMOTOR_enuSetDirectionAndMotorNum>
			DCMOTOR_enuSetDirectionAndMotorNum(ACLW,B);
    370e:	8f e2       	ldi	r24, 0x2F	; 47
    3710:	61 e0       	ldi	r22, 0x01	; 1
    3712:	0e 94 b8 19 	call	0x3370	; 0x3370 <DCMOTOR_enuSetDirectionAndMotorNum>
			LCD_enuSendString("Direction: Left");
    3716:	8a ea       	ldi	r24, 0xAA	; 170
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <LCD_enuSendString>
			LCD_enuGoToPosition(1,0);
    371e:	81 e0       	ldi	r24, 0x01	; 1
    3720:	60 e0       	ldi	r22, 0x00	; 0
    3722:	0e 94 0d 14 	call	0x281a	; 0x281a <LCD_enuGoToPosition>
			LCD_enuSendString("Speed : Normal");
    3726:	83 e7       	ldi	r24, 0x73	; 115
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <LCD_enuSendString>
    372e:	f8 ce       	rjmp	.-528    	; 0x3520 <main+0x32>
		}
		else if(strcmp(data , "DB")==0){
    3730:	ce 01       	movw	r24, r28
    3732:	0f 96       	adiw	r24, 0x0f	; 15
    3734:	2a eb       	ldi	r18, 0xBA	; 186
    3736:	30 e0       	ldi	r19, 0x00	; 0
    3738:	b9 01       	movw	r22, r18
    373a:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <strcmp>
    373e:	00 97       	sbiw	r24, 0x00	; 0
    3740:	d9 f4       	brne	.+54     	; 0x3778 <main+0x28a>

			LCD_enuSendCommand(0X01);
    3742:	81 e0       	ldi	r24, 0x01	; 1
    3744:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_enuSendCommand>
			DCMOTOR_enuSetSpeed(100);
    3748:	84 e6       	ldi	r24, 0x64	; 100
    374a:	0e 94 4a 1a 	call	0x3494	; 0x3494 <DCMOTOR_enuSetSpeed>
			DCMOTOR_enuSetDirectionAndMotorNum(CLW,A);
    374e:	85 e2       	ldi	r24, 0x25	; 37
    3750:	60 e0       	ldi	r22, 0x00	; 0
    3752:	0e 94 b8 19 	call	0x3370	; 0x3370 <DCMOTOR_enuSetDirectionAndMotorNum>
			DCMOTOR_enuSetDirectionAndMotorNum(CLW,B);
    3756:	85 e2       	ldi	r24, 0x25	; 37
    3758:	61 e0       	ldi	r22, 0x01	; 1
    375a:	0e 94 b8 19 	call	0x3370	; 0x3370 <DCMOTOR_enuSetDirectionAndMotorNum>
			LCD_enuSendString("Direction: Back");
    375e:	83 e6       	ldi	r24, 0x63	; 99
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <LCD_enuSendString>
			LCD_enuGoToPosition(1,0);
    3766:	81 e0       	ldi	r24, 0x01	; 1
    3768:	60 e0       	ldi	r22, 0x00	; 0
    376a:	0e 94 0d 14 	call	0x281a	; 0x281a <LCD_enuGoToPosition>
			LCD_enuSendString("Speed : Double");
    376e:	8d eb       	ldi	r24, 0xBD	; 189
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <LCD_enuSendString>
    3776:	d4 ce       	rjmp	.-600    	; 0x3520 <main+0x32>

		}

		else if(strcmp(data , "DF")==0){
    3778:	ce 01       	movw	r24, r28
    377a:	0f 96       	adiw	r24, 0x0f	; 15
    377c:	2c ec       	ldi	r18, 0xCC	; 204
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	b9 01       	movw	r22, r18
    3782:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <strcmp>
    3786:	00 97       	sbiw	r24, 0x00	; 0
    3788:	d9 f4       	brne	.+54     	; 0x37c0 <main+0x2d2>

			LCD_enuSendCommand(0X01);
    378a:	81 e0       	ldi	r24, 0x01	; 1
    378c:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_enuSendCommand>
			DCMOTOR_enuSetSpeed(100);
    3790:	84 e6       	ldi	r24, 0x64	; 100
    3792:	0e 94 4a 1a 	call	0x3494	; 0x3494 <DCMOTOR_enuSetSpeed>
			DCMOTOR_enuSetDirectionAndMotorNum(ACLW,A);
    3796:	8f e2       	ldi	r24, 0x2F	; 47
    3798:	60 e0       	ldi	r22, 0x00	; 0
    379a:	0e 94 b8 19 	call	0x3370	; 0x3370 <DCMOTOR_enuSetDirectionAndMotorNum>
			DCMOTOR_enuSetDirectionAndMotorNum(ACLW,B);
    379e:	8f e2       	ldi	r24, 0x2F	; 47
    37a0:	61 e0       	ldi	r22, 0x01	; 1
    37a2:	0e 94 b8 19 	call	0x3370	; 0x3370 <DCMOTOR_enuSetDirectionAndMotorNum>
			LCD_enuSendString("Direction: UP");
    37a6:	85 e8       	ldi	r24, 0x85	; 133
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <LCD_enuSendString>
			LCD_enuGoToPosition(1,0);
    37ae:	81 e0       	ldi	r24, 0x01	; 1
    37b0:	60 e0       	ldi	r22, 0x00	; 0
    37b2:	0e 94 0d 14 	call	0x281a	; 0x281a <LCD_enuGoToPosition>
			LCD_enuSendString("Speed : Double");
    37b6:	8d eb       	ldi	r24, 0xBD	; 189
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <LCD_enuSendString>
    37be:	b0 ce       	rjmp	.-672    	; 0x3520 <main+0x32>
		}
		else if(strcmp(data , "DR")==0){
    37c0:	ce 01       	movw	r24, r28
    37c2:	0f 96       	adiw	r24, 0x0f	; 15
    37c4:	2f ec       	ldi	r18, 0xCF	; 207
    37c6:	30 e0       	ldi	r19, 0x00	; 0
    37c8:	b9 01       	movw	r22, r18
    37ca:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <strcmp>
    37ce:	00 97       	sbiw	r24, 0x00	; 0
    37d0:	d9 f4       	brne	.+54     	; 0x3808 <main+0x31a>

			LCD_enuSendCommand(0X01);
    37d2:	81 e0       	ldi	r24, 0x01	; 1
    37d4:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_enuSendCommand>
			DCMOTOR_enuSetSpeed(100);
    37d8:	84 e6       	ldi	r24, 0x64	; 100
    37da:	0e 94 4a 1a 	call	0x3494	; 0x3494 <DCMOTOR_enuSetSpeed>
			DCMOTOR_enuSetDirectionAndMotorNum(ACLW,A);
    37de:	8f e2       	ldi	r24, 0x2F	; 47
    37e0:	60 e0       	ldi	r22, 0x00	; 0
    37e2:	0e 94 b8 19 	call	0x3370	; 0x3370 <DCMOTOR_enuSetDirectionAndMotorNum>
			DCMOTOR_enuSetDirectionAndMotorNum(CLW,B);
    37e6:	85 e2       	ldi	r24, 0x25	; 37
    37e8:	61 e0       	ldi	r22, 0x01	; 1
    37ea:	0e 94 b8 19 	call	0x3370	; 0x3370 <DCMOTOR_enuSetDirectionAndMotorNum>
			LCD_enuSendString("Direction: Right");
    37ee:	86 e9       	ldi	r24, 0x96	; 150
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <LCD_enuSendString>
			LCD_enuGoToPosition(1,0);
    37f6:	81 e0       	ldi	r24, 0x01	; 1
    37f8:	60 e0       	ldi	r22, 0x00	; 0
    37fa:	0e 94 0d 14 	call	0x281a	; 0x281a <LCD_enuGoToPosition>
			LCD_enuSendString("Speed : Double");
    37fe:	8d eb       	ldi	r24, 0xBD	; 189
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <LCD_enuSendString>
    3806:	8c ce       	rjmp	.-744    	; 0x3520 <main+0x32>
		}
		else if(strcmp(data , "DL")==0){
    3808:	ce 01       	movw	r24, r28
    380a:	0f 96       	adiw	r24, 0x0f	; 15
    380c:	22 ed       	ldi	r18, 0xD2	; 210
    380e:	30 e0       	ldi	r19, 0x00	; 0
    3810:	b9 01       	movw	r22, r18
    3812:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <strcmp>
    3816:	00 97       	sbiw	r24, 0x00	; 0
    3818:	d9 f4       	brne	.+54     	; 0x3850 <main+0x362>

			LCD_enuSendCommand(0X01);
    381a:	81 e0       	ldi	r24, 0x01	; 1
    381c:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_enuSendCommand>
			DCMOTOR_enuSetSpeed(100);
    3820:	84 e6       	ldi	r24, 0x64	; 100
    3822:	0e 94 4a 1a 	call	0x3494	; 0x3494 <DCMOTOR_enuSetSpeed>
			DCMOTOR_enuSetDirectionAndMotorNum(CLW,A);
    3826:	85 e2       	ldi	r24, 0x25	; 37
    3828:	60 e0       	ldi	r22, 0x00	; 0
    382a:	0e 94 b8 19 	call	0x3370	; 0x3370 <DCMOTOR_enuSetDirectionAndMotorNum>
			DCMOTOR_enuSetDirectionAndMotorNum(ACLW,B);
    382e:	8f e2       	ldi	r24, 0x2F	; 47
    3830:	61 e0       	ldi	r22, 0x01	; 1
    3832:	0e 94 b8 19 	call	0x3370	; 0x3370 <DCMOTOR_enuSetDirectionAndMotorNum>
			LCD_enuSendString("Direction: Left");
    3836:	8a ea       	ldi	r24, 0xAA	; 170
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <LCD_enuSendString>
			LCD_enuGoToPosition(1,0);
    383e:	81 e0       	ldi	r24, 0x01	; 1
    3840:	60 e0       	ldi	r22, 0x00	; 0
    3842:	0e 94 0d 14 	call	0x281a	; 0x281a <LCD_enuGoToPosition>
			LCD_enuSendString("Speed : Double");
    3846:	8d eb       	ldi	r24, 0xBD	; 189
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <LCD_enuSendString>
    384e:	68 ce       	rjmp	.-816    	; 0x3520 <main+0x32>

		}
		else if(strcmp(data , "ST")==0){
    3850:	ce 01       	movw	r24, r28
    3852:	0f 96       	adiw	r24, 0x0f	; 15
    3854:	25 ed       	ldi	r18, 0xD5	; 213
    3856:	30 e0       	ldi	r19, 0x00	; 0
    3858:	b9 01       	movw	r22, r18
    385a:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <strcmp>
    385e:	00 97       	sbiw	r24, 0x00	; 0
    3860:	09 f0       	breq	.+2      	; 0x3864 <main+0x376>
    3862:	5e ce       	rjmp	.-836    	; 0x3520 <main+0x32>
			LCD_enuSendCommand(0X01);
    3864:	81 e0       	ldi	r24, 0x01	; 1
    3866:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_enuSendCommand>
			DCMOTOR_enuSetDirectionAndMotorNum(STOP,A);
    386a:	84 e0       	ldi	r24, 0x04	; 4
    386c:	60 e0       	ldi	r22, 0x00	; 0
    386e:	0e 94 b8 19 	call	0x3370	; 0x3370 <DCMOTOR_enuSetDirectionAndMotorNum>
			DCMOTOR_enuSetDirectionAndMotorNum(STOP,B);
    3872:	84 e0       	ldi	r24, 0x04	; 4
    3874:	61 e0       	ldi	r22, 0x01	; 1
    3876:	0e 94 b8 19 	call	0x3370	; 0x3370 <DCMOTOR_enuSetDirectionAndMotorNum>
			LCD_enuGoToPosition(0,7);
    387a:	80 e0       	ldi	r24, 0x00	; 0
    387c:	67 e0       	ldi	r22, 0x07	; 7
    387e:	0e 94 0d 14 	call	0x281a	; 0x281a <LCD_enuGoToPosition>
			LCD_enuSendString("CAR");
    3882:	88 ed       	ldi	r24, 0xD8	; 216
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <LCD_enuSendString>
			LCD_enuGoToPosition(1,3);
    388a:	81 e0       	ldi	r24, 0x01	; 1
    388c:	63 e0       	ldi	r22, 0x03	; 3
    388e:	0e 94 0d 14 	call	0x281a	; 0x281a <LCD_enuGoToPosition>
			LCD_enuSendString("IS STOPPED");
    3892:	8c ed       	ldi	r24, 0xDC	; 220
    3894:	90 e0       	ldi	r25, 0x00	; 0
    3896:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <LCD_enuSendString>
    389a:	42 ce       	rjmp	.-892    	; 0x3520 <main+0x32>

0000389c <__mulsi3>:
    389c:	62 9f       	mul	r22, r18
    389e:	d0 01       	movw	r26, r0
    38a0:	73 9f       	mul	r23, r19
    38a2:	f0 01       	movw	r30, r0
    38a4:	82 9f       	mul	r24, r18
    38a6:	e0 0d       	add	r30, r0
    38a8:	f1 1d       	adc	r31, r1
    38aa:	64 9f       	mul	r22, r20
    38ac:	e0 0d       	add	r30, r0
    38ae:	f1 1d       	adc	r31, r1
    38b0:	92 9f       	mul	r25, r18
    38b2:	f0 0d       	add	r31, r0
    38b4:	83 9f       	mul	r24, r19
    38b6:	f0 0d       	add	r31, r0
    38b8:	74 9f       	mul	r23, r20
    38ba:	f0 0d       	add	r31, r0
    38bc:	65 9f       	mul	r22, r21
    38be:	f0 0d       	add	r31, r0
    38c0:	99 27       	eor	r25, r25
    38c2:	72 9f       	mul	r23, r18
    38c4:	b0 0d       	add	r27, r0
    38c6:	e1 1d       	adc	r30, r1
    38c8:	f9 1f       	adc	r31, r25
    38ca:	63 9f       	mul	r22, r19
    38cc:	b0 0d       	add	r27, r0
    38ce:	e1 1d       	adc	r30, r1
    38d0:	f9 1f       	adc	r31, r25
    38d2:	bd 01       	movw	r22, r26
    38d4:	cf 01       	movw	r24, r30
    38d6:	11 24       	eor	r1, r1
    38d8:	08 95       	ret

000038da <__divmodhi4>:
    38da:	97 fb       	bst	r25, 7
    38dc:	09 2e       	mov	r0, r25
    38de:	07 26       	eor	r0, r23
    38e0:	0a d0       	rcall	.+20     	; 0x38f6 <__divmodhi4_neg1>
    38e2:	77 fd       	sbrc	r23, 7
    38e4:	04 d0       	rcall	.+8      	; 0x38ee <__divmodhi4_neg2>
    38e6:	49 d0       	rcall	.+146    	; 0x397a <__udivmodhi4>
    38e8:	06 d0       	rcall	.+12     	; 0x38f6 <__divmodhi4_neg1>
    38ea:	00 20       	and	r0, r0
    38ec:	1a f4       	brpl	.+6      	; 0x38f4 <__divmodhi4_exit>

000038ee <__divmodhi4_neg2>:
    38ee:	70 95       	com	r23
    38f0:	61 95       	neg	r22
    38f2:	7f 4f       	sbci	r23, 0xFF	; 255

000038f4 <__divmodhi4_exit>:
    38f4:	08 95       	ret

000038f6 <__divmodhi4_neg1>:
    38f6:	f6 f7       	brtc	.-4      	; 0x38f4 <__divmodhi4_exit>
    38f8:	90 95       	com	r25
    38fa:	81 95       	neg	r24
    38fc:	9f 4f       	sbci	r25, 0xFF	; 255
    38fe:	08 95       	ret

00003900 <__udivmodsi4>:
    3900:	a1 e2       	ldi	r26, 0x21	; 33
    3902:	1a 2e       	mov	r1, r26
    3904:	aa 1b       	sub	r26, r26
    3906:	bb 1b       	sub	r27, r27
    3908:	fd 01       	movw	r30, r26
    390a:	0d c0       	rjmp	.+26     	; 0x3926 <__udivmodsi4_ep>

0000390c <__udivmodsi4_loop>:
    390c:	aa 1f       	adc	r26, r26
    390e:	bb 1f       	adc	r27, r27
    3910:	ee 1f       	adc	r30, r30
    3912:	ff 1f       	adc	r31, r31
    3914:	a2 17       	cp	r26, r18
    3916:	b3 07       	cpc	r27, r19
    3918:	e4 07       	cpc	r30, r20
    391a:	f5 07       	cpc	r31, r21
    391c:	20 f0       	brcs	.+8      	; 0x3926 <__udivmodsi4_ep>
    391e:	a2 1b       	sub	r26, r18
    3920:	b3 0b       	sbc	r27, r19
    3922:	e4 0b       	sbc	r30, r20
    3924:	f5 0b       	sbc	r31, r21

00003926 <__udivmodsi4_ep>:
    3926:	66 1f       	adc	r22, r22
    3928:	77 1f       	adc	r23, r23
    392a:	88 1f       	adc	r24, r24
    392c:	99 1f       	adc	r25, r25
    392e:	1a 94       	dec	r1
    3930:	69 f7       	brne	.-38     	; 0x390c <__udivmodsi4_loop>
    3932:	60 95       	com	r22
    3934:	70 95       	com	r23
    3936:	80 95       	com	r24
    3938:	90 95       	com	r25
    393a:	9b 01       	movw	r18, r22
    393c:	ac 01       	movw	r20, r24
    393e:	bd 01       	movw	r22, r26
    3940:	cf 01       	movw	r24, r30
    3942:	08 95       	ret

00003944 <__divmodsi4>:
    3944:	97 fb       	bst	r25, 7
    3946:	09 2e       	mov	r0, r25
    3948:	05 26       	eor	r0, r21
    394a:	0e d0       	rcall	.+28     	; 0x3968 <__divmodsi4_neg1>
    394c:	57 fd       	sbrc	r21, 7
    394e:	04 d0       	rcall	.+8      	; 0x3958 <__divmodsi4_neg2>
    3950:	d7 df       	rcall	.-82     	; 0x3900 <__udivmodsi4>
    3952:	0a d0       	rcall	.+20     	; 0x3968 <__divmodsi4_neg1>
    3954:	00 1c       	adc	r0, r0
    3956:	38 f4       	brcc	.+14     	; 0x3966 <__divmodsi4_exit>

00003958 <__divmodsi4_neg2>:
    3958:	50 95       	com	r21
    395a:	40 95       	com	r20
    395c:	30 95       	com	r19
    395e:	21 95       	neg	r18
    3960:	3f 4f       	sbci	r19, 0xFF	; 255
    3962:	4f 4f       	sbci	r20, 0xFF	; 255
    3964:	5f 4f       	sbci	r21, 0xFF	; 255

00003966 <__divmodsi4_exit>:
    3966:	08 95       	ret

00003968 <__divmodsi4_neg1>:
    3968:	f6 f7       	brtc	.-4      	; 0x3966 <__divmodsi4_exit>
    396a:	90 95       	com	r25
    396c:	80 95       	com	r24
    396e:	70 95       	com	r23
    3970:	61 95       	neg	r22
    3972:	7f 4f       	sbci	r23, 0xFF	; 255
    3974:	8f 4f       	sbci	r24, 0xFF	; 255
    3976:	9f 4f       	sbci	r25, 0xFF	; 255
    3978:	08 95       	ret

0000397a <__udivmodhi4>:
    397a:	aa 1b       	sub	r26, r26
    397c:	bb 1b       	sub	r27, r27
    397e:	51 e1       	ldi	r21, 0x11	; 17
    3980:	07 c0       	rjmp	.+14     	; 0x3990 <__udivmodhi4_ep>

00003982 <__udivmodhi4_loop>:
    3982:	aa 1f       	adc	r26, r26
    3984:	bb 1f       	adc	r27, r27
    3986:	a6 17       	cp	r26, r22
    3988:	b7 07       	cpc	r27, r23
    398a:	10 f0       	brcs	.+4      	; 0x3990 <__udivmodhi4_ep>
    398c:	a6 1b       	sub	r26, r22
    398e:	b7 0b       	sbc	r27, r23

00003990 <__udivmodhi4_ep>:
    3990:	88 1f       	adc	r24, r24
    3992:	99 1f       	adc	r25, r25
    3994:	5a 95       	dec	r21
    3996:	a9 f7       	brne	.-22     	; 0x3982 <__udivmodhi4_loop>
    3998:	80 95       	com	r24
    399a:	90 95       	com	r25
    399c:	bc 01       	movw	r22, r24
    399e:	cd 01       	movw	r24, r26
    39a0:	08 95       	ret

000039a2 <__prologue_saves__>:
    39a2:	2f 92       	push	r2
    39a4:	3f 92       	push	r3
    39a6:	4f 92       	push	r4
    39a8:	5f 92       	push	r5
    39aa:	6f 92       	push	r6
    39ac:	7f 92       	push	r7
    39ae:	8f 92       	push	r8
    39b0:	9f 92       	push	r9
    39b2:	af 92       	push	r10
    39b4:	bf 92       	push	r11
    39b6:	cf 92       	push	r12
    39b8:	df 92       	push	r13
    39ba:	ef 92       	push	r14
    39bc:	ff 92       	push	r15
    39be:	0f 93       	push	r16
    39c0:	1f 93       	push	r17
    39c2:	cf 93       	push	r28
    39c4:	df 93       	push	r29
    39c6:	cd b7       	in	r28, 0x3d	; 61
    39c8:	de b7       	in	r29, 0x3e	; 62
    39ca:	ca 1b       	sub	r28, r26
    39cc:	db 0b       	sbc	r29, r27
    39ce:	0f b6       	in	r0, 0x3f	; 63
    39d0:	f8 94       	cli
    39d2:	de bf       	out	0x3e, r29	; 62
    39d4:	0f be       	out	0x3f, r0	; 63
    39d6:	cd bf       	out	0x3d, r28	; 61
    39d8:	09 94       	ijmp

000039da <__epilogue_restores__>:
    39da:	2a 88       	ldd	r2, Y+18	; 0x12
    39dc:	39 88       	ldd	r3, Y+17	; 0x11
    39de:	48 88       	ldd	r4, Y+16	; 0x10
    39e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    39e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    39e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    39e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    39e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    39ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    39ec:	b9 84       	ldd	r11, Y+9	; 0x09
    39ee:	c8 84       	ldd	r12, Y+8	; 0x08
    39f0:	df 80       	ldd	r13, Y+7	; 0x07
    39f2:	ee 80       	ldd	r14, Y+6	; 0x06
    39f4:	fd 80       	ldd	r15, Y+5	; 0x05
    39f6:	0c 81       	ldd	r16, Y+4	; 0x04
    39f8:	1b 81       	ldd	r17, Y+3	; 0x03
    39fa:	aa 81       	ldd	r26, Y+2	; 0x02
    39fc:	b9 81       	ldd	r27, Y+1	; 0x01
    39fe:	ce 0f       	add	r28, r30
    3a00:	d1 1d       	adc	r29, r1
    3a02:	0f b6       	in	r0, 0x3f	; 63
    3a04:	f8 94       	cli
    3a06:	de bf       	out	0x3e, r29	; 62
    3a08:	0f be       	out	0x3f, r0	; 63
    3a0a:	cd bf       	out	0x3d, r28	; 61
    3a0c:	ed 01       	movw	r28, r26
    3a0e:	08 95       	ret

00003a10 <strcmp>:
    3a10:	fb 01       	movw	r30, r22
    3a12:	dc 01       	movw	r26, r24
    3a14:	8d 91       	ld	r24, X+
    3a16:	01 90       	ld	r0, Z+
    3a18:	80 19       	sub	r24, r0
    3a1a:	01 10       	cpse	r0, r1
    3a1c:	d9 f3       	breq	.-10     	; 0x3a14 <strcmp+0x4>
    3a1e:	99 0b       	sbc	r25, r25
    3a20:	08 95       	ret

00003a22 <_exit>:
    3a22:	f8 94       	cli

00003a24 <__stop_program>:
    3a24:	ff cf       	rjmp	.-2      	; 0x3a24 <__stop_program>
